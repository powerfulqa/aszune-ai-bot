<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="991" failures="0" errors="0" time="35.082">
  <testsuite name="PerplexitySecure Service - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:21" time="2.597" tests="10">
    <testcase classname="PerplexitySecure Service - Advanced question caching should cache questions and return cached responses" name="PerplexitySecure Service - Advanced question caching should cache questions and return cached responses" time="0.01">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced question caching should not cache when caching is disabled" name="PerplexitySecure Service - Advanced question caching should not cache when caching is disabled" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced question caching should handle cache file read errors gracefully" name="PerplexitySecure Service - Advanced question caching should handle cache file read errors gracefully" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced question caching should handle cache file write errors gracefully" name="PerplexitySecure Service - Advanced question caching should handle cache file write errors gracefully" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced question caching should handle corrupted cache data" name="PerplexitySecure Service - Advanced question caching should handle corrupted cache data" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced file permission security should handle file permission errors gracefully" name="PerplexitySecure Service - Advanced file permission security should handle file permission errors gracefully" time="0.004">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced file permission security should create cache directory with proper permissions" name="PerplexitySecure Service - Advanced file permission security should create cache directory with proper permissions" time="0.083">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced retry mechanism should retry on temporary failures" name="PerplexitySecure Service - Advanced retry mechanism should retry on temporary failures" time="1.046">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced retry mechanism should not retry on permanent failures" name="PerplexitySecure Service - Advanced retry mechanism should not retry on permanent failures" time="0.022">
    </testcase>
    <testcase classname="PerplexitySecure Service - Advanced retry mechanism should handle timeout errors" name="PerplexitySecure Service - Advanced retry mechanism should handle timeout errors" time="1.036">
    </testcase>
  </testsuite>
  <testsuite name="Dashboard Command" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:23" time="0.863" tests="3">
    <testcase classname="Dashboard Command should handle dashboard command successfully" name="Dashboard Command should handle dashboard command successfully" time="0.003">
    </testcase>
    <testcase classname="Dashboard Command should handle dashboard command error" name="Dashboard Command should handle dashboard command error" time="0.002">
    </testcase>
    <testcase classname="Dashboard Command should handle dashboard with degraded performance" name="Dashboard Command should handle dashboard with degraded performance" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="DiscordAnalytics - trackServerActivity" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:24" time="0.128" tests="10">
    <testcase classname="DiscordAnalytics - trackServerActivity should track server activity correctly" name="DiscordAnalytics - trackServerActivity should track server activity correctly" time="0.001">
    </testcase>
    <testcase classname="DiscordAnalytics - trackServerActivity should handle missing serverId" name="DiscordAnalytics - trackServerActivity should handle missing serverId" time="0.001">
    </testcase>
    <testcase classname="DiscordAnalytics - trackServerActivity should handle missing action" name="DiscordAnalytics - trackServerActivity should handle missing action" time="0.001">
    </testcase>
    <testcase classname="DiscordAnalytics - trackServerActivity should include metadata when provided" name="DiscordAnalytics - trackServerActivity should include metadata when provided" time="0.002">
    </testcase>
    <testcase classname="DiscordAnalytics - analyzeUsagePatterns should analyze usage patterns correctly" name="DiscordAnalytics - analyzeUsagePatterns should analyze usage patterns correctly" time="0.002">
    </testcase>
    <testcase classname="DiscordAnalytics - analyzeUsagePatterns should identify command popularity correctly" name="DiscordAnalytics - analyzeUsagePatterns should identify command popularity correctly" time="0.003">
    </testcase>
    <testcase classname="DiscordAnalytics - analyzeUsagePatterns should handle empty activity history" name="DiscordAnalytics - analyzeUsagePatterns should handle empty activity history" time="0.001">
    </testcase>
    <testcase classname="DiscordAnalytics - generateDailyReport should generate comprehensive daily report" name="DiscordAnalytics - generateDailyReport should generate comprehensive daily report" time="0.001">
    </testcase>
    <testcase classname="DiscordAnalytics - generateDailyReport should calculate summary statistics correctly" name="DiscordAnalytics - generateDailyReport should calculate summary statistics correctly" time="0.001">
    </testcase>
    <testcase classname="DiscordAnalytics - generateDailyReport should handle empty activity history gracefully" name="DiscordAnalytics - generateDailyReport should handle empty activity history gracefully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Performance Monitor - Functions" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:24" time="0.571" tests="6">
    <testcase classname="Performance Monitor - Functions throttle functions should throttle function calls based on interval" name="Performance Monitor - Functions throttle functions should throttle function calls based on interval" time="0.166">
    </testcase>
    <testcase classname="Performance Monitor - Functions throttle functions should allow function calls after throttle interval" name="Performance Monitor - Functions throttle functions should allow function calls after throttle interval" time="0.106">
    </testcase>
    <testcase classname="Performance Monitor - Functions throttle functions should debounce function calls" name="Performance Monitor - Functions throttle functions should debounce function calls" time="0.155">
    </testcase>
    <testcase classname="Performance Monitor - Functions _getCpuInfo should return CPU information" name="Performance Monitor - Functions _getCpuInfo should return CPU information" time="0.002">
    </testcase>
    <testcase classname="Performance Monitor - Functions _checkPerformance should log performance metrics" name="Performance Monitor - Functions _checkPerformance should log performance metrics" time="0.014">
    </testcase>
    <testcase classname="Performance Monitor - Functions _checkPerformance should handle errors gracefully" name="Performance Monitor - Functions _checkPerformance should handle errors gracefully" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Bot Initialization" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:25" time="0.223" tests="2">
    <testcase classname="Bot Initialization should create a Discord client and log in" name="Bot Initialization should create a Discord client and log in" time="0.078">
    </testcase>
    <testcase classname="Bot Initialization should register event handlers" name="Bot Initialization should register event handlers" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Commands - Text Command Handler" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:25" time="0.698" tests="18">
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !help command" name="Commands - Text Command Handler handleTextCommand should handle !help command" time="0.002">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !clearhistory command" name="Commands - Text Command Handler handleTextCommand should handle !clearhistory command" time="0.002">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summary command with history" name="Commands - Text Command Handler handleTextCommand should handle !summary command with history" time="0.003">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summary command with no history" name="Commands - Text Command Handler handleTextCommand should handle !summary command with no history" time="0.002">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summary command with only assistant messages in history" name="Commands - Text Command Handler handleTextCommand should handle !summary command with only assistant messages in history" time="0.001">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle errors during text command execution" name="Commands - Text Command Handler handleTextCommand should handle errors during text command execution" time="0.007">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summary command API error" name="Commands - Text Command Handler handleTextCommand should handle !summary command API error" time="0.001">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !stats command" name="Commands - Text Command Handler handleTextCommand should handle !stats command" time="0.002">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summarise command with text" name="Commands - Text Command Handler handleTextCommand should handle !summarise command with text" time="0.003">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summerise command with text (alternative spelling)" name="Commands - Text Command Handler handleTextCommand should handle !summerise command with text (alternative spelling)" time="0.002">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summarise command without text" name="Commands - Text Command Handler handleTextCommand should handle !summarise command without text" time="0.001">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summarise command with empty text" name="Commands - Text Command Handler handleTextCommand should handle !summarise command with empty text" time="0.001">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summarise command with invalid text" name="Commands - Text Command Handler handleTextCommand should handle !summarise command with invalid text" time="0.001">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle !summarise command API error" name="Commands - Text Command Handler handleTextCommand should handle !summarise command API error" time="0.001">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle text command with invalid user ID" name="Commands - Text Command Handler handleTextCommand should handle text command with invalid user ID" time="0.002">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle text command parsing for summarise" name="Commands - Text Command Handler handleTextCommand should handle text command parsing for summarise" time="0.001">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should handle text command parsing for summerise (alternative spelling)" name="Commands - Text Command Handler handleTextCommand should handle text command parsing for summerise (alternative spelling)" time="0.002">
    </testcase>
    <testcase classname="Commands - Text Command Handler handleTextCommand should return null for unknown command" name="Commands - Text Command Handler handleTextCommand should return null for unknown command" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Resources Command" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:26" time="0.394" tests="3">
    <testcase classname="Resources Command should handle resources command successfully" name="Resources Command should handle resources command successfully" time="0.003">
    </testcase>
    <testcase classname="Resources Command should handle resources command error" name="Resources Command should handle resources command error" time="0.002">
    </testcase>
    <testcase classname="Resources Command should handle resources with warning status" name="Resources Command should handle resources with warning status" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="index.js - Event Handler Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:26" time="0.434" tests="5">
    <testcase classname="index.js - Event Handler Branch Coverage Discord client event handlers should handle error events" name="index.js - Event Handler Branch Coverage Discord client event handlers should handle error events" time="0.045">
    </testcase>
    <testcase classname="index.js - Event Handler Branch Coverage Discord client event handlers should handle warning events" name="index.js - Event Handler Branch Coverage Discord client event handlers should handle warning events" time="0.04">
    </testcase>
    <testcase classname="index.js - Event Handler Branch Coverage Discord client event handlers should handle non-command interactions" name="index.js - Event Handler Branch Coverage Discord client event handlers should handle non-command interactions" time="0.039">
    </testcase>
    <testcase classname="index.js - Event Handler Branch Coverage Discord client event handlers should handle command interactions" name="index.js - Event Handler Branch Coverage Discord client event handlers should handle command interactions" time="0.04">
    </testcase>
    <testcase classname="index.js - Event Handler Branch Coverage Login process should handle login failure in production mode" name="index.js - Event Handler Branch Coverage Login process should handle login failure in production mode" time="0.121">
    </testcase>
  </testsuite>
  <testsuite name="Commands - Slash Command Handler" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:27" time="0.448" tests="18">
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /help command" name="Commands - Slash Command Handler handleSlashCommand should handle /help command" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /clearhistory command" name="Commands - Slash Command Handler handleSlashCommand should handle /clearhistory command" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summary command with history" name="Commands - Slash Command Handler handleSlashCommand should handle /summary command with history" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summary command API error" name="Commands - Slash Command Handler handleSlashCommand should handle /summary command API error" time="0.009">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summary command with only assistant messages in history" name="Commands - Slash Command Handler handleSlashCommand should handle /summary command with only assistant messages in history" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summary command with no history" name="Commands - Slash Command Handler handleSlashCommand should handle /summary command with no history" time="0.001">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /stats command" name="Commands - Slash Command Handler handleSlashCommand should handle /stats command" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summarise command with text" name="Commands - Slash Command Handler handleSlashCommand should handle /summarise command with text" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summarise command without text" name="Commands - Slash Command Handler handleSlashCommand should handle /summarise command without text" time="0.001">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summarise command with empty text" name="Commands - Slash Command Handler handleSlashCommand should handle /summarise command with empty text" time="0.001">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summarise command with invalid text" name="Commands - Slash Command Handler handleSlashCommand should handle /summarise command with invalid text" time="0.001">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle /summarise command API error" name="Commands - Slash Command Handler handleSlashCommand should handle /summarise command API error" time="0.001">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle command execution error when not deferred" name="Commands - Slash Command Handler handleSlashCommand should handle command execution error when not deferred" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle unknown command" name="Commands - Slash Command Handler handleSlashCommand should handle unknown command" time="0.001">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle command execution error" name="Commands - Slash Command Handler handleSlashCommand should handle command execution error" time="0.003">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle slash command with invalid user ID" name="Commands - Slash Command Handler handleSlashCommand should handle slash command with invalid user ID" time="0.002">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle slash command when already replied" name="Commands - Slash Command Handler handleSlashCommand should handle slash command when already replied" time="0.001">
    </testcase>
    <testcase classname="Commands - Slash Command Handler handleSlashCommand should handle slash command when already deferred and replied" name="Commands - Slash Command Handler handleSlashCommand should handle slash command when already deferred and replied" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PerplexitySecure Service - Comprehensive Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:27" time="0.394" tests="72">
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should return empty string for null headers" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should return empty string for null headers" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should return empty string for undefined headers" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should return empty string for undefined headers" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should return empty string for null key" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should return empty string for null key" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should get header using Headers.get() method" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should get header using Headers.get() method" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should fall back to object property access" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should fall back to object property access" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should check lowercase header names" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should check lowercase header names" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should check uppercase header names" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should check uppercase header names" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should handle Headers.get() throwing error" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should handle Headers.get() throwing error" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should handle non-object headers" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should handle non-object headers" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should handle function headers" name="PerplexitySecure Service - Comprehensive Coverage _safeGetHeader method should handle function headers" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _shouldUseCache method should return false when caching is explicitly disabled" name="PerplexitySecure Service - Comprehensive Coverage _shouldUseCache method should return false when caching is explicitly disabled" time="0">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _shouldUseCache method should return true when in test environment" name="PerplexitySecure Service - Comprehensive Coverage _shouldUseCache method should return true when in test environment" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _shouldUseCache method should return true when cache is enabled and caching not disabled" name="PerplexitySecure Service - Comprehensive Coverage _shouldUseCache method should return true when cache is enabled and caching not disabled" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should build basic request payload with defaults" name="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should build basic request payload with defaults" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should use custom options when provided" name="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should use custom options when provided" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should handle streaming when PI optimizations enabled" name="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should handle streaming when PI optimizations enabled" time="0.004">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should not enable streaming in low CPU mode" name="PerplexitySecure Service - Comprehensive Coverage _buildRequestPayload method should not enable streaming in low CPU mode" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _getPiOptimizationSettings method should return default settings when PI_OPTIMIZATIONS is not configured" name="PerplexitySecure Service - Comprehensive Coverage _getPiOptimizationSettings method should return default settings when PI_OPTIMIZATIONS is not configured" time="0.003">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _getPiOptimizationSettings method should return settings from config when available" name="PerplexitySecure Service - Comprehensive Coverage _getPiOptimizationSettings method should return settings from config when available" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _getPiOptimizationSettings method should handle config access errors gracefully" name="PerplexitySecure Service - Comprehensive Coverage _getPiOptimizationSettings method should handle config access errors gracefully" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should throw error for null response" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should throw error for null response" time="0.03">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should throw error for undefined response" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should throw error for undefined response" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle error status codes" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle error status codes" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle response without body" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle response without body" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle body without json method" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle body without json method" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle JSON parsing errors" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle JSON parsing errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle invalid response object" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle invalid response object" time="0.003">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle missing choices array" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle missing choices array" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle invalid choice structure" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle invalid choice structure" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle missing message field" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should handle missing message field" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should return valid response data" name="PerplexitySecure Service - Comprehensive Coverage _handleApiResponse method should return valid response data" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should handle error response with text body" name="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should handle error response with text body" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should handle error response without body" name="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should handle error response without body" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should handle body text error" name="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should handle body text error" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should truncate long error messages" name="PerplexitySecure Service - Comprehensive Coverage _handleErrorResponse method should truncate long error messages" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should extract content from message.content" name="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should extract content from message.content" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should extract content from choice.content" name="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should extract content from choice.content" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should handle empty response" name="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should handle empty response" time="0.032">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should handle empty choices" name="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should handle empty choices" time="0.01">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should return default message for invalid structure" name="PerplexitySecure Service - Comprehensive Coverage _extractResponseContent method should return default message for invalid structure" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return rate limit message for 429 status" name="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return rate limit message for 429 status" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return service unavailable message for 5xx status" name="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return service unavailable message for 5xx status" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return network error message for network errors" name="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return network error message for network errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return empty response message for empty response errors" name="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return empty response message for empty response errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return unexpected format message for invalid errors" name="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return unexpected format message for invalid errors" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return original error message for unknown errors" name="PerplexitySecure Service - Comprehensive Coverage _generateErrorMessage method should return original error message for unknown errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for null error" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for null error" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for error without message" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for error without message" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return true for temporary errors" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return true for temporary errors" time="0.003">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return true for network errors" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return true for network errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return true for 429 errors" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return true for 429 errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for permanent errors" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for permanent errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for invalid errors" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for invalid errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for unauthorized errors" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for unauthorized errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for forbidden errors" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for forbidden errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for unknown errors by default" name="PerplexitySecure Service - Comprehensive Coverage _isRetryableError method should return false for unknown errors by default" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _getCacheConfiguration method should return default config when PI_OPTIMIZATIONS not configured" name="PerplexitySecure Service - Comprehensive Coverage _getCacheConfiguration method should return default config when PI_OPTIMIZATIONS not configured" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _getCacheConfiguration method should return cache config when PI optimizations enabled" name="PerplexitySecure Service - Comprehensive Coverage _getCacheConfiguration method should return cache config when PI optimizations enabled" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _getCacheConfiguration method should handle config access errors" name="PerplexitySecure Service - Comprehensive Coverage _getCacheConfiguration method should handle config access errors" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should format string entry with timestamp" name="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should format string entry with timestamp" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should preserve existing object entry with timestamp" name="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should preserve existing object entry with timestamp" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should add timestamp to object entry without one" name="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should add timestamp to object entry without one" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should handle null entry" name="PerplexitySecure Service - Comprehensive Coverage _formatCacheEntry method should handle null entry" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateCacheKey method should generate consistent cache key for same history" name="PerplexitySecure Service - Comprehensive Coverage _generateCacheKey method should generate consistent cache key for same history" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage _generateCacheKey method should generate different keys for different history" name="PerplexitySecure Service - Comprehensive Coverage _generateCacheKey method should generate different keys for different history" time="0">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage generateTextSummary method should generate text summary with correct options" name="PerplexitySecure Service - Comprehensive Coverage generateTextSummary method should generate text summary with correct options" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage generateTextSummary method should handle text summary errors" name="PerplexitySecure Service - Comprehensive Coverage generateTextSummary method should handle text summary errors" time="0.013">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage getCacheStats method should return cache stats when available" name="PerplexitySecure Service - Comprehensive Coverage getCacheStats method should return cache stats when available" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage getCacheStats method should return error stats when cache throws" name="PerplexitySecure Service - Comprehensive Coverage getCacheStats method should return error stats when cache throws" time="0.011">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage getCacheStats method should handle missing cache gracefully" name="PerplexitySecure Service - Comprehensive Coverage getCacheStats method should handle missing cache gracefully" time="0.012">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage shutdown method should clear all active intervals" name="PerplexitySecure Service - Comprehensive Coverage shutdown method should clear all active intervals" time="0.014">
    </testcase>
    <testcase classname="PerplexitySecure Service - Comprehensive Coverage shutdown method should handle shutdown when no intervals exist" name="PerplexitySecure Service - Comprehensive Coverage shutdown method should handle shutdown when no intervals exist" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="index.js - Function Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:28" time="0.42" tests="5">
    <testcase classname="index.js - Function Branch Coverage bootWithOptimizations function should handle errors in Pi optimization initialization" name="index.js - Function Branch Coverage bootWithOptimizations function should handle errors in Pi optimization initialization" time="0.043">
    </testcase>
    <testcase classname="index.js - Function Branch Coverage bootWithOptimizations function should not call initialization when PI_OPTIMIZATIONS is disabled" name="index.js - Function Branch Coverage bootWithOptimizations function should not call initialization when PI_OPTIMIZATIONS is disabled" time="0.041">
    </testcase>
    <testcase classname="index.js - Function Branch Coverage registerSlashCommands function should handle client not being ready" name="index.js - Function Branch Coverage registerSlashCommands function should handle client not being ready" time="0.081">
    </testcase>
    <testcase classname="index.js - Function Branch Coverage registerSlashCommands function should handle errors during slash command registration" name="index.js - Function Branch Coverage registerSlashCommands function should handle errors during slash command registration" time="0.04">
    </testcase>
    <testcase classname="index.js - Function Branch Coverage Multiple shutdown attempts should prevent multiple simultaneous shutdown attempts" name="index.js - Function Branch Coverage Multiple shutdown attempts should prevent multiple simultaneous shutdown attempts" time="0.052">
    </testcase>
  </testsuite>
  <testsuite name="Chat Service - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:28" time="0.299" tests="11">
    <testcase classname="Chat Service - Advanced should handle AI response generation errors" name="Chat Service - Advanced should handle AI response generation errors" time="0.024">
    </testcase>
    <testcase classname="Chat Service - Advanced should add emojis to responses when not in low CPU mode" name="Chat Service - Advanced should add emojis to responses when not in low CPU mode" time="0.013">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle long responses with chunking" name="Chat Service - Advanced should handle long responses with chunking" time="0.01">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle special characters in messages" name="Chat Service - Advanced should handle special characters in messages" time="0.007">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle multiline messages" name="Chat Service - Advanced should handle multiline messages" time="0.007">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle messages with URLs" name="Chat Service - Advanced should handle messages with URLs" time="0.005">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle messages with emojis" name="Chat Service - Advanced should handle messages with emojis" time="0.005">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle empty conversation history" name="Chat Service - Advanced should handle empty conversation history" time="0.007">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle conversation history with multiple messages" name="Chat Service - Advanced should handle conversation history with multiple messages" time="0.006">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle network timeouts gracefully" name="Chat Service - Advanced should handle network timeouts gracefully" time="0.008">
    </testcase>
    <testcase classname="Chat Service - Advanced should handle rate limit errors from API" name="Chat Service - Advanced should handle rate limit errors from API" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Commands - Slash Commands Data" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:29" time="0.439" tests="1">
    <testcase classname="Commands - Slash Commands Data getSlashCommandsData should return an array of slash command data" name="Commands - Slash Commands Data getSlashCommandsData should return an array of slash command data" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Analytics Command" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:29" time="0.503" tests="3">
    <testcase classname="Analytics Command should handle analytics command successfully" name="Analytics Command should handle analytics command successfully" time="0.003">
    </testcase>
    <testcase classname="Analytics Command should handle analytics command error" name="Analytics Command should handle analytics command error" time="0.002">
    </testcase>
    <testcase classname="Analytics Command should handle analytics with empty data" name="Analytics Command should handle analytics with empty data" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="ErrorHandler - Retry Logic and Edge Cases" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:30" time="0.312" tests="8">
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases Retry Logic should retry retryable errors" name="ErrorHandler - Retry Logic and Edge Cases Retry Logic should retry retryable errors" time="0.056">
    </testcase>
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases Retry Logic should not retry non-retryable errors" name="ErrorHandler - Retry Logic and Edge Cases Retry Logic should not retry non-retryable errors" time="0.007">
    </testcase>
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases Retry Logic should exhaust retries for persistent errors" name="ErrorHandler - Retry Logic and Edge Cases Retry Logic should exhaust retries for persistent errors" time="0.06">
    </testcase>
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases Special Edge Cases should handle very large error objects" name="ErrorHandler - Retry Logic and Edge Cases Special Edge Cases should handle very large error objects" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases Special Edge Cases should handle circular reference errors" name="ErrorHandler - Retry Logic and Edge Cases Special Edge Cases should handle circular reference errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases File and Validation Error Handling should handle file operation errors" name="ErrorHandler - Retry Logic and Edge Cases File and Validation Error Handling should handle file operation errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases File and Validation Error Handling should handle validation errors with field info" name="ErrorHandler - Retry Logic and Edge Cases File and Validation Error Handling should handle validation errors with field info" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Retry Logic and Edge Cases File and Validation Error Handling should truncate long values" name="ErrorHandler - Retry Logic and Edge Cases File and Validation Error Handling should truncate long values" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="index.js - Critical Coverage Enhancement" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:30" time="0.301" tests="19">
    <testcase classname="index.js - Critical Coverage Enhancement Production Environment with Pi Optimizations should initialize Pi optimizations in production environment" name="index.js - Critical Coverage Enhancement Production Environment with Pi Optimizations should initialize Pi optimizations in production environment" time="0.005">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Production Environment with Pi Optimizations should handle Pi optimization initialization errors gracefully" name="index.js - Critical Coverage Enhancement Production Environment with Pi Optimizations should handle Pi optimization initialization errors gracefully" time="0.006">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Development Environment should not initialize Pi optimizations in development" name="index.js - Critical Coverage Enhancement Development Environment should not initialize Pi optimizations in development" time="0.006">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle ready event and register slash commands" name="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle ready event and register slash commands" time="0.005">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle slash command registration errors" name="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle slash command registration errors" time="0.005">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle client not ready during slash command registration" name="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle client not ready during slash command registration" time="0.025">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle error events" name="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle error events" time="0.004">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle warn events" name="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle warn events" time="0.006">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle interaction events" name="index.js - Critical Coverage Enhancement Discord Client Event Handlers should handle interaction events" time="0.005">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Discord Client Event Handlers should ignore non-slash interactions" name="index.js - Critical Coverage Enhancement Discord Client Event Handlers should ignore non-slash interactions" time="0.004">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should handle conversation manager shutdown errors" name="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should handle conversation manager shutdown errors" time="0.004">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should handle Discord client shutdown errors" name="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should handle Discord client shutdown errors" time="0.005">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should not duplicate shutdown when already in progress" name="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should not duplicate shutdown when already in progress" time="0.004">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should handle multiple shutdown errors and exit with code 1" name="index.js - Critical Coverage Enhancement Shutdown Error Scenarios should handle multiple shutdown errors and exit with code 1" time="0.004">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Login Error Handling should handle Discord login failures in production" name="index.js - Critical Coverage Enhancement Login Error Handling should handle Discord login failures in production" time="0.004">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement Login Error Handling should handle Discord login failures in test mode" name="index.js - Critical Coverage Enhancement Login Error Handling should handle Discord login failures in test mode" time="0.005">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement bootWithOptimizations Error Branches should handle Pi optimization errors in bootWithOptimizations" name="index.js - Critical Coverage Enhancement bootWithOptimizations Error Branches should handle Pi optimization errors in bootWithOptimizations" time="0.003">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement bootWithOptimizations Error Branches should skip Pi optimizations when disabled" name="index.js - Critical Coverage Enhancement bootWithOptimizations Error Branches should skip Pi optimizations when disabled" time="0.003">
    </testcase>
    <testcase classname="index.js - Critical Coverage Enhancement bootWithOptimizations Error Branches should skip Pi optimizations when config is null" name="index.js - Critical Coverage Enhancement bootWithOptimizations Error Branches should skip Pi optimizations when config is null" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Bot Shutdown" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:30" time="0.279" tests="2">
    <testcase classname="Bot Shutdown should handle SIGINT and shut down gracefully" name="Bot Shutdown should handle SIGINT and shut down gracefully" time="0.087">
    </testcase>
    <testcase classname="Bot Shutdown should handle errors during shutdown and exit with code 1" name="Bot Shutdown should handle errors during shutdown and exit with code 1" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Bot Main Entry Point (index.js)" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:30" time="0.234" tests="7">
    <testcase classname="Bot Main Entry Point (index.js) should create a Discord client and log in" name="Bot Main Entry Point (index.js) should create a Discord client and log in" time="0.01">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGINT signal" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGINT signal" time="0.006">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGTERM signal" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGTERM signal" time="0.006">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for uncaughtException" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for uncaughtException" time="0.005">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should call shutdown when uncaught exception occurs" name="Bot Main Entry Point (index.js) Graceful Shutdown should call shutdown when uncaught exception occurs" time="0.005">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should log an error and exit if shutdown fails" name="Bot Main Entry Point (index.js) Graceful Shutdown should log an error and exit if shutdown fails" time="0.018">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for unhandled promise rejections" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for unhandled promise rejections" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Bot Integration - Core" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:31" time="0.332" tests="8">
    <testcase classname="Bot Integration - Core should have attached the messageCreate handler" name="Bot Integration - Core should have attached the messageCreate handler" time="0.087">
    </testcase>
    <testcase classname="Bot Integration - Core handles a normal message and replies" name="Bot Integration - Core handles a normal message and replies" time="0.008">
    </testcase>
    <testcase classname="Bot Integration - Core replies to !help command" name="Bot Integration - Core replies to !help command" time="0.006">
    </testcase>
    <testcase classname="Bot Integration - Core replies to !clearhistory command" name="Bot Integration - Core replies to !clearhistory command" time="0.007">
    </testcase>
    <testcase classname="Bot Integration - Core replies to !summary with history" name="Bot Integration - Core replies to !summary with history" time="0.01">
    </testcase>
    <testcase classname="Bot Integration - Core replies to !summary with no history" name="Bot Integration - Core replies to !summary with no history" time="0.007">
    </testcase>
    <testcase classname="Bot Integration - Core ignores unknown command" name="Bot Integration - Core ignores unknown command" time="0.007">
    </testcase>
    <testcase classname="Bot Integration - Core ignores messages from bots" name="Bot Integration - Core ignores messages from bots" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Discord.js mock" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:31" time="0.179" tests="3">
    <testcase classname="Discord.js mock Client mock exists" name="Discord.js mock Client mock exists" time="0.002">
    </testcase>
    <testcase classname="Discord.js mock Client mock has required methods" name="Discord.js mock Client mock has required methods" time="0.002">
    </testcase>
    <testcase classname="Discord.js mock SlashCommandBuilder mock exists" name="Discord.js mock SlashCommandBuilder mock exists" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Message Chunker - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:31" time="0.199" tests="10">
    <testcase classname="Message Chunker - Advanced should not cut off sentences at chunk boundaries" name="Message Chunker - Advanced should not cut off sentences at chunk boundaries" time="0.003">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle messages with special characters" name="Message Chunker - Advanced should handle messages with special characters" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle messages with unicode characters" name="Message Chunker - Advanced should handle messages with unicode characters" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle messages with URLs" name="Message Chunker - Advanced should handle messages with URLs" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle messages with markdown formatting" name="Message Chunker - Advanced should handle messages with markdown formatting" time="0.001">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle messages with line breaks" name="Message Chunker - Advanced should handle messages with line breaks" time="0.001">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle very long single word" name="Message Chunker - Advanced should handle very long single word" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle mixed content types" name="Message Chunker - Advanced should handle mixed content types" time="0.004">
    </testcase>
    <testcase classname="Message Chunker - Advanced should maintain chunk order" name="Message Chunker - Advanced should maintain chunk order" time="0.001">
    </testcase>
    <testcase classname="Message Chunker - Advanced should handle edge case with exact chunk size" name="Message Chunker - Advanced should handle edge case with exact chunk size" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="index.js - Core Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:31" time="0.361" tests="9">
    <testcase classname="index.js - Core Branch Coverage normal initialization - no PI optimizations" name="index.js - Core Branch Coverage normal initialization - no PI optimizations" time="0.007">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles error events" name="index.js - Core Branch Coverage handles error events" time="0.006">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles warn events" name="index.js - Core Branch Coverage handles warn events" time="0.006">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles interaction events" name="index.js - Core Branch Coverage handles interaction events" time="0.005">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles ready event with slash command registration failure" name="index.js - Core Branch Coverage handles ready event with slash command registration failure" time="0.007">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles PI optimizations" name="index.js - Core Branch Coverage handles PI optimizations" time="0.006">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles PI optimization failures" name="index.js - Core Branch Coverage handles PI optimization failures" time="0.007">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles login failures in production mode" name="index.js - Core Branch Coverage handles login failures in production mode" time="0.122">
    </testcase>
    <testcase classname="index.js - Core Branch Coverage handles shutdown process" name="index.js - Core Branch Coverage handles shutdown process" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="PerplexitySecure Service - Core" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:32" time="0.396" tests="11">
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle rate limiting with 429 status code" name="PerplexitySecure Service - Core generateChatResponse should handle rate limiting with 429 status code" time="0.058">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle API errors gracefully" name="PerplexitySecure Service - Core generateChatResponse should handle API errors gracefully" time="0.023">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle network errors" name="PerplexitySecure Service - Core generateChatResponse should handle network errors" time="0.022">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle invalid response format" name="PerplexitySecure Service - Core generateChatResponse should handle invalid response format" time="0.024">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle empty response" name="PerplexitySecure Service - Core generateChatResponse should handle empty response" time="0.023">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle successful response" name="PerplexitySecure Service - Core generateChatResponse should handle successful response" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle backward compatibility with boolean caching parameter" name="PerplexitySecure Service - Core generateChatResponse should handle backward compatibility with boolean caching parameter" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateChatResponse should handle object options parameter" name="PerplexitySecure Service - Core generateChatResponse should handle object options parameter" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateSummary should generate summary for conversation history" name="PerplexitySecure Service - Core generateSummary should generate summary for conversation history" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateSummary should handle empty conversation history" name="PerplexitySecure Service - Core generateSummary should handle empty conversation history" time="0.019">
    </testcase>
    <testcase classname="PerplexitySecure Service - Core generateSummary should handle summary generation errors" name="PerplexitySecure Service - Core generateSummary should handle summary generation errors" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="Memory Monitor - Checking" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:32" time="0.416" tests="8">
    <testcase classname="Memory Monitor - Checking should trigger garbage collection when memory exceeds limit" name="Memory Monitor - Checking should trigger garbage collection when memory exceeds limit" time="0.063">
    </testcase>
    <testcase classname="Memory Monitor - Checking should clear low memory flag when memory usage drops" name="Memory Monitor - Checking should clear low memory flag when memory usage drops" time="0.003">
    </testcase>
    <testcase classname="Memory Monitor - Checking should handle critical memory threshold" name="Memory Monitor - Checking should handle critical memory threshold" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Checking should handle memory check errors gracefully" name="Memory Monitor - Checking should handle memory check errors gracefully" time="0.003">
    </testcase>
    <testcase classname="Memory Monitor - Checking should force garbage collection when not recently called" name="Memory Monitor - Checking should force garbage collection when not recently called" time="0.063">
    </testcase>
    <testcase classname="Memory Monitor - Checking should not force garbage collection if recently called" name="Memory Monitor - Checking should not force garbage collection if recently called" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Checking should handle garbage collection when gc is not available" name="Memory Monitor - Checking should handle garbage collection when gc is not available" time="0.076">
    </testcase>
    <testcase classname="Memory Monitor - Checking should handle garbage collection errors" name="Memory Monitor - Checking should handle garbage collection errors" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Memory Monitor - Core" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:33" time="0.232" tests="7">
    <testcase classname="Memory Monitor - Core should have correct default values" name="Memory Monitor - Core should have correct default values" time="0.004">
    </testcase>
    <testcase classname="Memory Monitor - Core should initialize successfully" name="Memory Monitor - Core should initialize successfully" time="0.003">
    </testcase>
    <testcase classname="Memory Monitor - Core should not initialize if already initialized" name="Memory Monitor - Core should not initialize if already initialized" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Core should setup memory check interval on initialization" name="Memory Monitor - Core should setup memory check interval on initialization" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Core should shutdown successfully when initialized" name="Memory Monitor - Core should shutdown successfully when initialized" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Core should handle shutdown when not initialized" name="Memory Monitor - Core should handle shutdown when not initialized" time="0.003">
    </testcase>
    <testcase classname="Memory Monitor - Core should clear interval on shutdown" name="Memory Monitor - Core should clear interval on shutdown" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="ErrorHandler - Critical Coverage Enhancement" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:33" time="0.374" tests="36">
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify network timeout errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify network timeout errors" time="0.003">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify ECONNRESET errors as network errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify ECONNRESET errors as network errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify ENOTFOUND errors as network errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify ENOTFOUND errors as network errors" time="0.005">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify 429 status as rate limit error" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify 429 status as rate limit error" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify 401/403 as authentication errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify 401/403 as authentication errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify 403 as authentication error" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify 403 as authentication error" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify validation errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify validation errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify file permission errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify file permission errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify file not found errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify file not found errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify memory errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify memory errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify config errors" name="ErrorHandler - Critical Coverage Enhancement Error Type Classification should classify config errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Context Information Processing should include all context information in result" name="ErrorHandler - Critical Coverage Enhancement Context Information Processing should include all context information in result" time="0.013">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Context Information Processing should handle missing context gracefully" name="ErrorHandler - Critical Coverage Enhancement Context Information Processing should handle missing context gracefully" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Context Information Processing should handle null context" name="ErrorHandler - Critical Coverage Enhancement Context Information Processing should handle null context" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Context Information Processing should handle empty context object" name="ErrorHandler - Critical Coverage Enhancement Context Information Processing should handle empty context object" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Message Processing should extract message from error objects" name="ErrorHandler - Critical Coverage Enhancement Error Message Processing should extract message from error objects" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Message Processing should handle errors without message property" name="ErrorHandler - Critical Coverage Enhancement Error Message Processing should handle errors without message property" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Message Processing should handle string errors" name="ErrorHandler - Critical Coverage Enhancement Error Message Processing should handle string errors" time="0.004">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Message Processing should handle null or undefined errors safely" name="ErrorHandler - Critical Coverage Enhancement Error Message Processing should handle null or undefined errors safely" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should preserve HTTP status codes" name="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should preserve HTTP status codes" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should preserve error codes" name="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should preserve error codes" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should handle errors with both status and statusCode" name="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should handle errors with both status and statusCode" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should handle 5xx errors as network errors" name="ErrorHandler - Critical Coverage Enhancement Status Code and Error Code Processing should handle 5xx errors as network errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement API Error Handling should handle API errors with response data" name="ErrorHandler - Critical Coverage Enhancement API Error Handling should handle API errors with response data" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement API Error Handling should handle API errors without response" name="ErrorHandler - Critical Coverage Enhancement API Error Handling should handle API errors without response" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement File Error Handling should handle file operation errors" name="ErrorHandler - Critical Coverage Enhancement File Error Handling should handle file operation errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Validation Error Handling should handle validation errors with field info" name="ErrorHandler - Critical Coverage Enhancement Validation Error Handling should handle validation errors with field info" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Validation Error Handling should truncate long values" name="ErrorHandler - Critical Coverage Enhancement Validation Error Handling should truncate long values" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Creation should create standardized errors" name="ErrorHandler - Critical Coverage Enhancement Error Creation should create standardized errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Error Creation should create errors with default values" name="ErrorHandler - Critical Coverage Enhancement Error Creation should create errors with default values" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Retry Logic should retry retryable errors" name="ErrorHandler - Critical Coverage Enhancement Retry Logic should retry retryable errors" time="0.057">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Retry Logic should not retry non-retryable errors" name="ErrorHandler - Critical Coverage Enhancement Retry Logic should not retry non-retryable errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Retry Logic should exhaust retries for persistent errors" name="ErrorHandler - Critical Coverage Enhancement Retry Logic should exhaust retries for persistent errors" time="0.047">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Special Edge Cases should handle very large error objects" name="ErrorHandler - Critical Coverage Enhancement Special Edge Cases should handle very large error objects" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Special Edge Cases should handle circular reference errors" name="ErrorHandler - Critical Coverage Enhancement Special Edge Cases should handle circular reference errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Critical Coverage Enhancement Special Edge Cases should handle errors with getters that throw" name="ErrorHandler - Critical Coverage Enhancement Special Edge Cases should handle errors with getters that throw" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Command Handling - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:33" time="0.203" tests="12">
    <testcase classname="Command Handling - Advanced !summarise command with text parameter" name="Command Handling - Advanced !summarise command with text parameter" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Advanced !summerise command with text parameter (alternative spelling)" name="Command Handling - Advanced !summerise command with text parameter (alternative spelling)" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Advanced handles empty summarise command" name="Command Handling - Advanced handles empty summarise command" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Advanced handles summarise command with only whitespace" name="Command Handling - Advanced handles summarise command with only whitespace" time="0.001">
    </testcase>
    <testcase classname="Command Handling - Advanced handles very long text in summarise command" name="Command Handling - Advanced handles very long text in summarise command" time="0.001">
    </testcase>
    <testcase classname="Command Handling - Advanced handles special characters in summarise command" name="Command Handling - Advanced handles special characters in summarise command" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Advanced handles multiline text in summarise command" name="Command Handling - Advanced handles multiline text in summarise command" time="0.001">
    </testcase>
    <testcase classname="Command Handling - Advanced handles command with extra parameters" name="Command Handling - Advanced handles command with extra parameters" time="0.001">
    </testcase>
    <testcase classname="Command Handling - Advanced handles case insensitive commands" name="Command Handling - Advanced handles case insensitive commands" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Advanced handles command with markdown formatting" name="Command Handling - Advanced handles command with markdown formatting" time="0.001">
    </testcase>
    <testcase classname="Command Handling - Advanced handles command with URLs" name="Command Handling - Advanced handles command with URLs" time="0.001">
    </testcase>
    <testcase classname="Command Handling - Advanced handles command with emojis" name="Command Handling - Advanced handles command with emojis" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Logger - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:34" time="0.211" tests="11">
    <testcase classname="Logger - Basic logs debug messages" name="Logger - Basic logs debug messages" time="0.003">
    </testcase>
    <testcase classname="Logger - Basic logs debug messages with data" name="Logger - Basic logs debug messages with data" time="0.003">
    </testcase>
    <testcase classname="Logger - Basic logs info messages" name="Logger - Basic logs info messages" time="0.002">
    </testcase>
    <testcase classname="Logger - Basic logs warning messages" name="Logger - Basic logs warning messages" time="0.002">
    </testcase>
    <testcase classname="Logger - Basic logs error messages" name="Logger - Basic logs error messages" time="0.001">
    </testcase>
    <testcase classname="Logger - Basic logs error messages with data" name="Logger - Basic logs error messages with data" time="0.005">
    </testcase>
    <testcase classname="Logger - Basic handles empty messages" name="Logger - Basic handles empty messages" time="0.002">
    </testcase>
    <testcase classname="Logger - Basic handles null messages" name="Logger - Basic handles null messages" time="0.001">
    </testcase>
    <testcase classname="Logger - Basic handles undefined messages" name="Logger - Basic handles undefined messages" time="0.002">
    </testcase>
    <testcase classname="Logger - Basic handles messages with special characters" name="Logger - Basic handles messages with special characters" time="0.002">
    </testcase>
    <testcase classname="Logger - Basic handles messages with unicode characters" name="Logger - Basic handles messages with unicode characters" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Chat Service - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:34" time="0.216" tests="5">
    <testcase classname="Chat Service - Basic should ignore bot messages" name="Chat Service - Basic should ignore bot messages" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Basic should ignore empty messages" name="Chat Service - Basic should ignore empty messages" time="0.001">
    </testcase>
    <testcase classname="Chat Service - Basic should handle regular chat messages" name="Chat Service - Basic should handle regular chat messages" time="0.014">
    </testcase>
    <testcase classname="Chat Service - Basic should handle command messages" name="Chat Service - Basic should handle command messages" time="0.002">
    </testcase>
    <testcase classname="Chat Service - Basic should handle rate limited users" name="Chat Service - Basic should handle rate limited users" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Source Reference Processor - Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:34" time="0.22" tests="13">
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle empty text" name="Source Reference Processor - Branch Coverage processSourceReferences should handle empty text" time="0.002">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle null/undefined text" name="Source Reference Processor - Branch Coverage processSourceReferences should handle null/undefined text" time="0.001">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle text without source references" name="Source Reference Processor - Branch Coverage processSourceReferences should handle text without source references" time="0.001">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle different source reference formats" name="Source Reference Processor - Branch Coverage processSourceReferences should handle different source reference formats" time="0.005">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle source references with different numbers" name="Source Reference Processor - Branch Coverage processSourceReferences should handle source references with different numbers" time="0.003">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle malformed source references" name="Source Reference Processor - Branch Coverage processSourceReferences should handle malformed source references" time="0.002">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle source references in different positions" name="Source Reference Processor - Branch Coverage processSourceReferences should handle source references in different positions" time="0.002">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle source references with special characters" name="Source Reference Processor - Branch Coverage processSourceReferences should handle source references with special characters" time="0.001">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle source references with markdown" name="Source Reference Processor - Branch Coverage processSourceReferences should handle source references with markdown" time="0.001">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle edge cases" name="Source Reference Processor - Branch Coverage processSourceReferences should handle edge cases" time="0.002">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle very long text" name="Source Reference Processor - Branch Coverage processSourceReferences should handle very long text" time="0.001">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle text with many source references" name="Source Reference Processor - Branch Coverage processSourceReferences should handle text with many source references" time="0.002">
    </testcase>
    <testcase classname="Source Reference Processor - Branch Coverage processSourceReferences should handle mixed valid and invalid source references" name="Source Reference Processor - Branch Coverage processSourceReferences should handle mixed valid and invalid source references" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Perplexity Service - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:34" time="0.348" tests="12">
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles rate limiting errors" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles rate limiting errors" time="0.044">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles server errors" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles server errors" time="0.014">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles unauthorized errors" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles unauthorized errors" time="0.014">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles forbidden errors" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles forbidden errors" time="0.015">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles timeout errors" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles timeout errors" time="0.011">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles malformed response" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles malformed response" time="0.011">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles empty response" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles empty response" time="0.015">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles response with no choices" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles response with no choices" time="0.01">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles response with invalid choice structure" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles response with invalid choice structure" time="0.01">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles very long messages" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles very long messages" time="0.002">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles messages with special characters" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles messages with special characters" time="0.001">
    </testcase>
    <testcase classname="Perplexity Service - Advanced sendChatRequest advanced scenarios handles messages with unicode characters" name="Perplexity Service - Advanced sendChatRequest advanced scenarios handles messages with unicode characters" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DataStorage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:35" time="0.218" tests="9">
    <testcase classname="DataStorage init should create data directory if it does not exist" name="DataStorage init should create data directory if it does not exist" time="0.003">
    </testcase>
    <testcase classname="DataStorage init should not create directory if already initialized" name="DataStorage init should not create directory if already initialized" time="0.002">
    </testcase>
    <testcase classname="DataStorage init should throw and log error if mkdir fails" name="DataStorage init should throw and log error if mkdir fails" time="0.007">
    </testcase>
    <testcase classname="DataStorage saveUserStats should save user stats to file" name="DataStorage saveUserStats should save user stats to file" time="0.002">
    </testcase>
    <testcase classname="DataStorage saveUserStats should log error if writeFile fails" name="DataStorage saveUserStats should log error if writeFile fails" time="0.001">
    </testcase>
    <testcase classname="DataStorage loadUserStats should load user stats from file" name="DataStorage loadUserStats should load user stats from file" time="0.005">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object if file does not exist" name="DataStorage loadUserStats should return empty object if file does not exist" time="0.002">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object and log error if readFile fails for other reasons" name="DataStorage loadUserStats should return empty object and log error if readFile fails for other reasons" time="0.001">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object and log error if JSON parsing fails" name="DataStorage loadUserStats should return empty object and log error if JSON parsing fails" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Logger - Data Logging and Error Handling" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:35" time="0.231" tests="10">
    <testcase classname="Logger - Data Logging and Error Handling Data Logging should log data object when provided to info" name="Logger - Data Logging and Error Handling Data Logging should log data object when provided to info" time="0.004">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Data Logging should log data object when provided to warn" name="Logger - Data Logging and Error Handling Data Logging should log data object when provided to warn" time="0.003">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Data Logging should log data object when provided to debug" name="Logger - Data Logging and Error Handling Data Logging should log data object when provided to debug" time="0.002">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Data Logging should handle null data gracefully" name="Logger - Data Logging and Error Handling Data Logging should handle null data gracefully" time="0.003">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Data Logging should handle undefined data gracefully" name="Logger - Data Logging and Error Handling Data Logging should handle undefined data gracefully" time="0.002">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Error Method Context should handle error method with request details" name="Logger - Data Logging and Error Handling Error Method Context should handle error method with request details" time="0.003">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Error Method Context should handle errors without response" name="Logger - Data Logging and Error Handling Error Method Context should handle errors without response" time="0.002">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Error Method Context should handle errors without stack trace" name="Logger - Data Logging and Error Handling Error Method Context should handle errors without stack trace" time="0.003">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Test Environment Handling should not write to file in test environment" name="Logger - Data Logging and Error Handling Test Environment Handling should not write to file in test environment" time="0.002">
    </testcase>
    <testcase classname="Logger - Data Logging and Error Handling Test Environment Handling should not create directory in test environment" name="Logger - Data Logging and Error Handling Test Environment Handling should not create directory in test environment" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="EnhancedCache - TTL" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:35" time="0.216" tests="4">
    <testcase classname="EnhancedCache - TTL TTL (Time To Live) should respect default TTL" name="EnhancedCache - TTL TTL (Time To Live) should respect default TTL" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - TTL TTL (Time To Live) should respect custom TTL" name="EnhancedCache - TTL TTL (Time To Live) should respect custom TTL" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - TTL TTL (Time To Live) should not expire before TTL" name="EnhancedCache - TTL TTL (Time To Live) should not expire before TTL" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - TTL TTL (Time To Live) should handle zero TTL (immediate expiration)" name="EnhancedCache - TTL TTL (Time To Live) should handle zero TTL (immediate expiration)" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Config - Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:35" time="0.254" tests="10">
    <testcase classname="Config - Branch Coverage Environment variable handling should handle missing DISCORD_BOT_TOKEN" name="Config - Branch Coverage Environment variable handling should handle missing DISCORD_BOT_TOKEN" time="0.018">
    </testcase>
    <testcase classname="Config - Branch Coverage Environment variable handling should handle missing PERPLEXITY_API_KEY" name="Config - Branch Coverage Environment variable handling should handle missing PERPLEXITY_API_KEY" time="0.004">
    </testcase>
    <testcase classname="Config - Branch Coverage Environment variable handling should handle different NODE_ENV values" name="Config - Branch Coverage Environment variable handling should handle different NODE_ENV values" time="0.004">
    </testcase>
    <testcase classname="Config - Branch Coverage Environment variable handling should handle different LOG_LEVEL values" name="Config - Branch Coverage Environment variable handling should handle different LOG_LEVEL values" time="0.004">
    </testcase>
    <testcase classname="Config - Branch Coverage Environment variable handling should handle PI_OPTIMIZATIONS_ENABLED environment variable" name="Config - Branch Coverage Environment variable handling should handle PI_OPTIMIZATIONS_ENABLED environment variable" time="0.003">
    </testcase>
    <testcase classname="Config - Branch Coverage Configuration object structure should have all required configuration sections" name="Config - Branch Coverage Configuration object structure should have all required configuration sections" time="0.003">
    </testcase>
    <testcase classname="Config - Branch Coverage Configuration object structure should handle nested configuration objects" name="Config - Branch Coverage Configuration object structure should handle nested configuration objects" time="0.003">
    </testcase>
    <testcase classname="Config - Branch Coverage Edge cases should handle empty string environment variables" name="Config - Branch Coverage Edge cases should handle empty string environment variables" time="0.003">
    </testcase>
    <testcase classname="Config - Branch Coverage Edge cases should handle undefined environment variables" name="Config - Branch Coverage Edge cases should handle undefined environment variables" time="0.003">
    </testcase>
    <testcase classname="Config - Branch Coverage Edge cases should handle null environment variables" name="Config - Branch Coverage Edge cases should handle null environment variables" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ResourceOptimizer - optimizeForServerCount" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:36" time="0.26" tests="26">
    <testcase classname="ResourceOptimizer - optimizeForServerCount should optimize for small server count" name="ResourceOptimizer - optimizeForServerCount should optimize for small server count" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - optimizeForServerCount should optimize for medium server count" name="ResourceOptimizer - optimizeForServerCount should optimize for medium server count" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - optimizeForServerCount should optimize for large server count" name="ResourceOptimizer - optimizeForServerCount should optimize for large server count" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - optimizeForServerCount should optimize for enterprise server count" name="ResourceOptimizer - optimizeForServerCount should optimize for enterprise server count" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - optimizeForServerCount should apply performance adjustments" name="ResourceOptimizer - optimizeForServerCount should apply performance adjustments" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - optimizeForServerCount should handle zero servers gracefully" name="ResourceOptimizer - optimizeForServerCount should handle zero servers gracefully" time="0.004">
    </testcase>
    <testcase classname="ResourceOptimizer - monitorResources should monitor resource status correctly" name="ResourceOptimizer - monitorResources should monitor resource status correctly" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - monitorResources should detect good performance status" name="ResourceOptimizer - monitorResources should detect good performance status" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - monitorResources should detect poor performance status" name="ResourceOptimizer - monitorResources should detect poor performance status" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - monitorResources should calculate memory usage correctly" name="ResourceOptimizer - monitorResources should calculate memory usage correctly" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - monitorResources should provide appropriate recommendations" name="ResourceOptimizer - monitorResources should provide appropriate recommendations" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - applyDynamicScaling should apply scaling for increasing load" name="ResourceOptimizer - applyDynamicScaling should apply scaling for increasing load" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - applyDynamicScaling should not scale when performance is good" name="ResourceOptimizer - applyDynamicScaling should not scale when performance is good" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - applyDynamicScaling should handle missing metrics gracefully" name="ResourceOptimizer - applyDynamicScaling should handle missing metrics gracefully" time="0.002">
    </testcase>
    <testcase classname="ResourceOptimizer - generateOptimizationRecommendations should generate recommendations based on analytics and performance" name="ResourceOptimizer - generateOptimizationRecommendations should generate recommendations based on analytics and performance" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - generateOptimizationRecommendations should recommend scaling for high server count" name="ResourceOptimizer - generateOptimizationRecommendations should recommend scaling for high server count" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - generateOptimizationRecommendations should recommend performance improvements for slow response times" name="ResourceOptimizer - generateOptimizationRecommendations should recommend performance improvements for slow response times" time="0">
    </testcase>
    <testcase classname="ResourceOptimizer - generateOptimizationRecommendations should recommend error investigation for high error rates" name="ResourceOptimizer - generateOptimizationRecommendations should recommend error investigation for high error rates" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - generateOptimizationRecommendations should handle empty or null inputs gracefully" name="ResourceOptimizer - generateOptimizationRecommendations should handle empty or null inputs gracefully" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - Pi Optimizations should apply Pi-specific optimizations when enabled" name="ResourceOptimizer - Pi Optimizations should apply Pi-specific optimizations when enabled" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - Pi Optimizations should monitor resources with Pi constraints" name="ResourceOptimizer - Pi Optimizations should monitor resources with Pi constraints" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - Error Handling should handle invalid server counts gracefully" name="ResourceOptimizer - Error Handling should handle invalid server counts gracefully" time="0.003">
    </testcase>
    <testcase classname="ResourceOptimizer - Error Handling should handle invalid metrics gracefully" name="ResourceOptimizer - Error Handling should handle invalid metrics gracefully" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - Error Handling should provide fallback values for missing data" name="ResourceOptimizer - Error Handling should provide fallback values for missing data" time="0.001">
    </testcase>
    <testcase classname="ResourceOptimizer - Performance should optimize quickly for large datasets" name="ResourceOptimizer - Performance should optimize quickly for large datasets" time="0.008">
    </testcase>
    <testcase classname="ResourceOptimizer - Performance should not consume excessive memory during optimization" name="ResourceOptimizer - Performance should not consume excessive memory during optimization" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="PerformanceTracker - Advanced Analysis" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:36" time="0.239" tests="14">
    <testcase classname="PerformanceTracker - Advanced Analysis analyzePerformanceTrends - Memory Analysis should detect decreasing memory trend" name="PerformanceTracker - Advanced Analysis analyzePerformanceTrends - Memory Analysis should detect decreasing memory trend" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis analyzePerformanceTrends - Memory Analysis should detect stable memory trend" name="PerformanceTracker - Advanced Analysis analyzePerformanceTrends - Memory Analysis should detect stable memory trend" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis analyzePerformanceTrends - Memory Analysis should return insufficient_data for small datasets" name="PerformanceTracker - Advanced Analysis analyzePerformanceTrends - Memory Analysis should return insufficient_data for small datasets" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis generatePerformanceReport should generate comprehensive performance report" name="PerformanceTracker - Advanced Analysis generatePerformanceReport should generate comprehensive performance report" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis generatePerformanceReport should generate recommendations for poor performance" name="PerformanceTracker - Advanced Analysis generatePerformanceReport should generate recommendations for poor performance" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis generatePerformanceReport should generate positive recommendations for good performance" name="PerformanceTracker - Advanced Analysis generatePerformanceReport should generate positive recommendations for good performance" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis generatePerformanceReport should detect slow operations issue" name="PerformanceTracker - Advanced Analysis generatePerformanceReport should detect slow operations issue" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis generatePerformanceReport should detect memory leak warning" name="PerformanceTracker - Advanced Analysis generatePerformanceReport should detect memory leak warning" time="0">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis _calculateBasicMetrics should calculate metrics correctly" name="PerformanceTracker - Advanced Analysis _calculateBasicMetrics should calculate metrics correctly" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis _calculateBasicMetrics should count slow operations correctly" name="PerformanceTracker - Advanced Analysis _calculateBasicMetrics should count slow operations correctly" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis _analyzeMemoryTrend should return insufficient_data for small datasets" name="PerformanceTracker - Advanced Analysis _analyzeMemoryTrend should return insufficient_data for small datasets" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis _generateRecommendations should recommend optimization for slow responses" name="PerformanceTracker - Advanced Analysis _generateRecommendations should recommend optimization for slow responses" time="0.003">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis _generateRecommendations should recommend error investigation for low success rate" name="PerformanceTracker - Advanced Analysis _generateRecommendations should recommend error investigation for low success rate" time="0.009">
    </testcase>
    <testcase classname="PerformanceTracker - Advanced Analysis _generateRecommendations should recommend memory leak investigation" name="PerformanceTracker - Advanced Analysis _generateRecommendations should recommend memory leak investigation" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Chat Service - Error Handling Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:36" time="0.267" tests="10">
    <testcase classname="Chat Service - Error Handling Branch Coverage Input Validation Error Branches should handle invalid input validation" name="Chat Service - Error Handling Branch Coverage Input Validation Error Branches should handle invalid input validation" time="0.017">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage Input Validation Error Branches should handle input validation exceptions" name="Chat Service - Error Handling Branch Coverage Input Validation Error Branches should handle input validation exceptions" time="0.017">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage AI Service Error Branches should handle timeout errors" name="Chat Service - Error Handling Branch Coverage AI Service Error Branches should handle timeout errors" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage AI Service Error Branches should handle rate limit errors" name="Chat Service - Error Handling Branch Coverage AI Service Error Branches should handle rate limit errors" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage AI Service Error Branches should handle generic API errors" name="Chat Service - Error Handling Branch Coverage AI Service Error Branches should handle generic API errors" time="0.002">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage Pi Optimization Branch Coverage should skip emoji processing in low CPU mode" name="Chat Service - Error Handling Branch Coverage Pi Optimization Branch Coverage should skip emoji processing in low CPU mode" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage Pi Optimization Branch Coverage should process emojis when not in low CPU mode" name="Chat Service - Error Handling Branch Coverage Pi Optimization Branch Coverage should process emojis when not in low CPU mode" time="0.002">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage Pi Optimization Branch Coverage should handle emoji processing errors gracefully" name="Chat Service - Error Handling Branch Coverage Pi Optimization Branch Coverage should handle emoji processing errors gracefully" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage Message Formatting Error Branches should handle message formatting errors" name="Chat Service - Error Handling Branch Coverage Message Formatting Error Branches should handle message formatting errors" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Error Handling Branch Coverage Message Formatting Error Branches should handle chunking errors" name="Chat Service - Error Handling Branch Coverage Message Formatting Error Branches should handle chunking errors" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Bot Edge Cases - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:36" time="0.242" tests="14">
    <testcase classname="Bot Edge Cases - Advanced should handle messages with mixed content types" name="Bot Edge Cases - Advanced should handle messages with mixed content types" time="0.003">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with URLs" name="Bot Edge Cases - Advanced should handle messages with URLs" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with email addresses" name="Bot Edge Cases - Advanced should handle messages with email addresses" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with mentions" name="Bot Edge Cases - Advanced should handle messages with mentions" time="0.005">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with channel mentions" name="Bot Edge Cases - Advanced should handle messages with channel mentions" time="0.003">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with role mentions" name="Bot Edge Cases - Advanced should handle messages with role mentions" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with custom emojis" name="Bot Edge Cases - Advanced should handle messages with custom emojis" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with animated emojis" name="Bot Edge Cases - Advanced should handle messages with animated emojis" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with timestamps" name="Bot Edge Cases - Advanced should handle messages with timestamps" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with spoilers" name="Bot Edge Cases - Advanced should handle messages with spoilers" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with strikethrough" name="Bot Edge Cases - Advanced should handle messages with strikethrough" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with underlines" name="Bot Edge Cases - Advanced should handle messages with underlines" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with quotes" name="Bot Edge Cases - Advanced should handle messages with quotes" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Advanced should handle messages with code blocks" name="Bot Edge Cases - Advanced should handle messages with code blocks" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Undici mock helpers" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:37" time="0.214" tests="3">
    <testcase classname="Undici mock helpers should create a success response with expected structure" name="Undici mock helpers should create a success response with expected structure" time="0.003">
    </testcase>
    <testcase classname="Undici mock helpers should create an error response with expected structure" name="Undici mock helpers should create an error response with expected structure" time="0.002">
    </testcase>
    <testcase classname="Undici mock helpers should use default status code for error responses" name="Undici mock helpers should use default status code for error responses" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Message Chunker - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:37" time="0.244" tests="7">
    <testcase classname="Message Chunker - Basic should not chunk message that fits within max length" name="Message Chunker - Basic should not chunk message that fits within max length" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Basic should chunk a message that exceeds max length" name="Message Chunker - Basic should chunk a message that exceeds max length" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Basic should preserve paragraph breaks when possible" name="Message Chunker - Basic should preserve paragraph breaks when possible" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Basic should add correct chunk numbering" name="Message Chunker - Basic should add correct chunk numbering" time="0.002">
    </testcase>
    <testcase classname="Message Chunker - Basic should handle empty message" name="Message Chunker - Basic should handle empty message" time="0.001">
    </testcase>
    <testcase classname="Message Chunker - Basic should handle null or undefined input" name="Message Chunker - Basic should handle null or undefined input" time="0.001">
    </testcase>
    <testcase classname="Message Chunker - Basic should handle very small chunk size" name="Message Chunker - Basic should handle very small chunk size" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="ErrorHandler - Error Classification" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:37" time="0.249" tests="12">
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify network timeout errors" name="ErrorHandler - Error Classification Error Type Classification should classify network timeout errors" time="0.003">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify ECONNRESET errors as network errors" name="ErrorHandler - Error Classification Error Type Classification should classify ECONNRESET errors as network errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify 429 status as rate limit error" name="ErrorHandler - Error Classification Error Type Classification should classify 429 status as rate limit error" time="0.006">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify 401/403 as authentication errors" name="ErrorHandler - Error Classification Error Type Classification should classify 401/403 as authentication errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify file permission errors" name="ErrorHandler - Error Classification Error Type Classification should classify file permission errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify file not found errors" name="ErrorHandler - Error Classification Error Type Classification should classify file not found errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify memory errors" name="ErrorHandler - Error Classification Error Type Classification should classify memory errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Type Classification should classify config errors" name="ErrorHandler - Error Classification Error Type Classification should classify config errors" time="0.002">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification API Error Handling should handle API errors with response data" name="ErrorHandler - Error Classification API Error Handling should handle API errors with response data" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification API Error Handling should handle API errors without response" name="ErrorHandler - Error Classification API Error Handling should handle API errors without response" time="0">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Creation should create standardized errors" name="ErrorHandler - Error Classification Error Creation should create standardized errors" time="0.001">
    </testcase>
    <testcase classname="ErrorHandler - Error Classification Error Creation should create errors with default values" name="ErrorHandler - Error Classification Error Creation should create errors with default values" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="appendEmoji" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:37" time="0.231" tests="8">
    <testcase classname="appendEmoji adds the correct emoji for known keywords" name="appendEmoji adds the correct emoji for known keywords" time="0.003">
    </testcase>
    <testcase classname="appendEmoji does not modify the text if no keyword is present" name="appendEmoji does not modify the text if no keyword is present" time="0.002">
    </testcase>
    <testcase classname="appendEmoji is case-insensitive" name="appendEmoji is case-insensitive" time="0.002">
    </testcase>
    <testcase classname="appendEmoji can add multiple emojis" name="appendEmoji can add multiple emojis" time="0.001">
    </testcase>
    <testcase classname="appendEmoji does not add emoji for keywords inside other words" name="appendEmoji does not add emoji for keywords inside other words" time="0.002">
    </testcase>
    <testcase classname="appendEmoji adds all matching emojis in correct order" name="appendEmoji adds all matching emojis in correct order" time="0.001">
    </testcase>
    <testcase classname="appendEmoji handles empty string" name="appendEmoji handles empty string" time="0.002">
    </testcase>
    <testcase classname="appendEmoji handles string with only emojis as keywords" name="appendEmoji handles string with only emojis as keywords" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Undici Mock" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:38" time="0.232" tests="1">
    <testcase classname="Undici Mock should exist" name="Undici Mock should exist" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Logger - Log Level Filtering" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:38" time="0.235" tests="5">
    <testcase classname="Logger - Log Level Filtering should skip debug logs when log level is INFO" name="Logger - Log Level Filtering should skip debug logs when log level is INFO" time="0.004">
    </testcase>
    <testcase classname="Logger - Log Level Filtering should skip info logs when log level is WARN" name="Logger - Log Level Filtering should skip info logs when log level is WARN" time="0.003">
    </testcase>
    <testcase classname="Logger - Log Level Filtering should skip warn logs when log level is ERROR" name="Logger - Log Level Filtering should skip warn logs when log level is ERROR" time="0.002">
    </testcase>
    <testcase classname="Logger - Log Level Filtering should process all log levels when set to DEBUG" name="Logger - Log Level Filtering should process all log levels when set to DEBUG" time="0.003">
    </testcase>
    <testcase classname="Logger - Log Level Filtering should handle invalid log level gracefully" name="Logger - Log Level Filtering should handle invalid log level gracefully" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="PerformanceTracker - Reporting" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:38" time="0.244" tests="11">
    <testcase classname="PerformanceTracker - Reporting generatePerformanceReport should generate comprehensive performance report" name="PerformanceTracker - Reporting generatePerformanceReport should generate comprehensive performance report" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting generatePerformanceReport should generate recommendations for poor performance" name="PerformanceTracker - Reporting generatePerformanceReport should generate recommendations for poor performance" time="0.003">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting generatePerformanceReport should generate positive recommendations for good performance" name="PerformanceTracker - Reporting generatePerformanceReport should generate positive recommendations for good performance" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting generatePerformanceReport should detect slow operations issue" name="PerformanceTracker - Reporting generatePerformanceReport should detect slow operations issue" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting generatePerformanceReport should detect memory leak warning" name="PerformanceTracker - Reporting generatePerformanceReport should detect memory leak warning" time="0.008">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting _calculateBasicMetrics should calculate metrics correctly" name="PerformanceTracker - Reporting _calculateBasicMetrics should calculate metrics correctly" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting _calculateBasicMetrics should count slow operations correctly" name="PerformanceTracker - Reporting _calculateBasicMetrics should count slow operations correctly" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting _analyzeMemoryTrend should return insufficient_data for small datasets" name="PerformanceTracker - Reporting _analyzeMemoryTrend should return insufficient_data for small datasets" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting _generateRecommendations should recommend optimization for slow responses" name="PerformanceTracker - Reporting _generateRecommendations should recommend optimization for slow responses" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting _generateRecommendations should recommend error investigation for low success rate" name="PerformanceTracker - Reporting _generateRecommendations should recommend error investigation for low success rate" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - Reporting _generateRecommendations should recommend memory leak investigation" name="PerformanceTracker - Reporting _generateRecommendations should recommend memory leak investigation" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Main Index - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:38" time="0.288" tests="6">
    <testcase classname="Main Index - Basic should export required functions" name="Main Index - Basic should export required functions" time="0.012">
    </testcase>
    <testcase classname="Main Index - Basic should initialize client properly" name="Main Index - Basic should initialize client properly" time="0.012">
    </testcase>
    <testcase classname="Main Index - Basic should have handleChatMessage function" name="Main Index - Basic should have handleChatMessage function" time="0.01">
    </testcase>
    <testcase classname="Main Index - Basic should have shutdown function" name="Main Index - Basic should have shutdown function" time="0.012">
    </testcase>
    <testcase classname="Main Index - Basic should have error handler functions" name="Main Index - Basic should have error handler functions" time="0.01">
    </testcase>
    <testcase classname="Main Index - Basic should handle module loading without errors" name="Main Index - Basic should handle module loading without errors" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="ConversationManager - Critical Coverage Enhancement" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:39" time="0.284" tests="27">
    <testcase classname="ConversationManager - Critical Coverage Enhancement Memory and Performance Edge Cases should handle many concurrent users efficiently" name="ConversationManager - Critical Coverage Enhancement Memory and Performance Edge Cases should handle many concurrent users efficiently" time="0.008">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Memory and Performance Edge Cases should handle rapid successive messages from same user" name="ConversationManager - Critical Coverage Enhancement Memory and Performance Edge Cases should handle rapid successive messages from same user" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Memory and Performance Edge Cases should handle alternating user and assistant messages" name="ConversationManager - Critical Coverage Enhancement Memory and Performance Edge Cases should handle alternating user and assistant messages" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Rate Limiting Advanced Scenarios should handle rate limiting with custom windows" name="ConversationManager - Critical Coverage Enhancement Rate Limiting Advanced Scenarios should handle rate limiting with custom windows" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Rate Limiting Advanced Scenarios should handle multiple users with different rate limit states" name="ConversationManager - Critical Coverage Enhancement Rate Limiting Advanced Scenarios should handle multiple users with different rate limit states" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should initialize user stats for new users" name="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should initialize user stats for new users" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should update message count correctly" name="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should update message count correctly" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should update summary count correctly" name="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should update summary count correctly" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should handle invalid stat types gracefully" name="ConversationManager - Critical Coverage Enhancement User Statistics Edge Cases should handle invalid stat types gracefully" time="0.003">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Storage Error Handling should handle loadUserStats errors gracefully" name="ConversationManager - Critical Coverage Enhancement Storage Error Handling should handle loadUserStats errors gracefully" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Storage Error Handling should handle saveUserStats errors gracefully" name="ConversationManager - Critical Coverage Enhancement Storage Error Handling should handle saveUserStats errors gracefully" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Storage Error Handling should handle saveUserStats errors during destroy" name="ConversationManager - Critical Coverage Enhancement Storage Error Handling should handle saveUserStats errors during destroy" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Conversation History Management should handle conversation history limits correctly" name="ConversationManager - Critical Coverage Enhancement Conversation History Management should handle conversation history limits correctly" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Conversation History Management should clear specific user history" name="ConversationManager - Critical Coverage Enhancement Conversation History Management should clear specific user history" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Conversation History Management should clear all conversations when no userId provided" name="ConversationManager - Critical Coverage Enhancement Conversation History Management should clear all conversations when no userId provided" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid user ID in getHistory" name="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid user ID in getHistory" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid user ID in addMessage" name="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid user ID in addMessage" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid message content" name="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid message content" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid role in addMessage" name="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should handle invalid role in addMessage" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should accept valid roles" name="ConversationManager - Critical Coverage Enhancement Input Validation Edge Cases should accept valid roles" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Interval Management should initialize intervals properly" name="ConversationManager - Critical Coverage Enhancement Interval Management should initialize intervals properly" time="0.015">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Interval Management should start cleanup interval separately" name="ConversationManager - Critical Coverage Enhancement Interval Management should start cleanup interval separately" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Interval Management should start save stats interval separately" name="ConversationManager - Critical Coverage Enhancement Interval Management should start save stats interval separately" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Cleanup Operations should cleanup old conversations" name="ConversationManager - Critical Coverage Enhancement Cleanup Operations should cleanup old conversations" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Cleanup Operations should preserve user stats during cleanup" name="ConversationManager - Critical Coverage Enhancement Cleanup Operations should preserve user stats during cleanup" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Test Environment Handling should not load stats in test environment" name="ConversationManager - Critical Coverage Enhancement Test Environment Handling should not load stats in test environment" time="0.001">
    </testcase>
    <testcase classname="ConversationManager - Critical Coverage Enhancement Test Environment Handling should not initialize intervals in test environment" name="ConversationManager - Critical Coverage Enhancement Test Environment Handling should not initialize intervals in test environment" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Memory Monitor - Utils" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:39" time="0.318" tests="6">
    <testcase classname="Memory Monitor - Utils should return memory usage information" name="Memory Monitor - Utils should return memory usage information" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Utils should calculate memory usage percentage correctly" name="Memory Monitor - Utils should calculate memory usage percentage correctly" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Utils should handle memory usage errors" name="Memory Monitor - Utils should handle memory usage errors" time="0.003">
    </testcase>
    <testcase classname="Memory Monitor - Utils should return status information" name="Memory Monitor - Utils should return status information" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor - Utils should handle configuration-based initialization" name="Memory Monitor - Utils should handle configuration-based initialization" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor - Utils should handle memory threshold detection" name="Memory Monitor - Utils should handle memory threshold detection" time="0.049">
    </testcase>
  </testsuite>
  <testsuite name="Bot Edge Cases - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:39" time="0.249" tests="8">
    <testcase classname="Bot Edge Cases - Basic should handle empty messages" name="Bot Edge Cases - Basic should handle empty messages" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Basic should handle messages with only whitespace" name="Bot Edge Cases - Basic should handle messages with only whitespace" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Basic should handle very long messages" name="Bot Edge Cases - Basic should handle very long messages" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Basic should handle messages with special characters" name="Bot Edge Cases - Basic should handle messages with special characters" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Basic should handle messages with unicode characters" name="Bot Edge Cases - Basic should handle messages with unicode characters" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Basic should handle messages with newlines" name="Bot Edge Cases - Basic should handle messages with newlines" time="0.002">
    </testcase>
    <testcase classname="Bot Edge Cases - Basic should handle messages with tabs" name="Bot Edge Cases - Basic should handle messages with tabs" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases - Basic should handle messages with carriage returns" name="Bot Edge Cases - Basic should handle messages with carriage returns" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Pi Detector - Config Generation" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:40" time="0.267" tests="8">
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 4 with 2GB" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 4 with 2GB" time="0.003">
    </testcase>
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 4 with 1GB" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 4 with 1GB" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 4 with 4GB" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 4 with 4GB" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 3" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 3" time="0.01">
    </testcase>
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 5 with 4GB" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 5 with 4GB" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 5 with 8GB" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for Pi 5 with 8GB" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for unknown Pi model" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for unknown Pi model" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Config Generation generateOptimizedConfig should generate config for non-Pi systems" name="Pi Detector - Config Generation generateOptimizedConfig should generate config for non-Pi systems" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Main Index - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:40" time="0.315" tests="9">
    <testcase classname="Main Index - Advanced should handle bootWithOptimizations function" name="Main Index - Advanced should handle bootWithOptimizations function" time="0.012">
    </testcase>
    <testcase classname="Main Index - Advanced should handle registerSlashCommands function" name="Main Index - Advanced should handle registerSlashCommands function" time="0.01">
    </testcase>
    <testcase classname="Main Index - Advanced should handle Pi optimization detection" name="Main Index - Advanced should handle Pi optimization detection" time="0.001">
    </testcase>
    <testcase classname="Main Index - Advanced should handle enhanced cache initialization" name="Main Index - Advanced should handle enhanced cache initialization" time="0.003">
    </testcase>
    <testcase classname="Main Index - Advanced should handle perplexity service initialization" name="Main Index - Advanced should handle perplexity service initialization" time="0.001">
    </testcase>
    <testcase classname="Main Index - Advanced should handle error scenarios gracefully" name="Main Index - Advanced should handle error scenarios gracefully" time="0.013">
    </testcase>
    <testcase classname="Main Index - Advanced should handle multiple imports without conflicts" name="Main Index - Advanced should handle multiple imports without conflicts" time="0.011">
    </testcase>
    <testcase classname="Main Index - Advanced should handle environment variable changes" name="Main Index - Advanced should handle environment variable changes" time="0.011">
    </testcase>
    <testcase classname="Main Index - Advanced should handle missing dependencies gracefully" name="Main Index - Advanced should handle missing dependencies gracefully" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="PerformanceDashboard - generateDashboardReport" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:40" time="0.291" tests="28">
    <testcase classname="PerformanceDashboard - generateDashboardReport should generate comprehensive dashboard report" name="PerformanceDashboard - generateDashboardReport should generate comprehensive dashboard report" time="0.003">
    </testcase>
    <testcase classname="PerformanceDashboard - generateDashboardReport should include correct overview information" name="PerformanceDashboard - generateDashboardReport should include correct overview information" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - generateDashboardReport should call all required service methods" name="PerformanceDashboard - generateDashboardReport should call all required service methods" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - generateDashboardReport should handle empty input gracefully" name="PerformanceDashboard - generateDashboardReport should handle empty input gracefully" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - getRealTimeStatus should return real-time status information" name="PerformanceDashboard - getRealTimeStatus should return real-time status information" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - getRealTimeStatus should include uptime in seconds and formatted" name="PerformanceDashboard - getRealTimeStatus should include uptime in seconds and formatted" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - getRealTimeStatus should include memory usage information" name="PerformanceDashboard - getRealTimeStatus should include memory usage information" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - getRealTimeStatus should have online status" name="PerformanceDashboard - getRealTimeStatus should have online status" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - generateAlerts should generate memory alerts for high usage" name="PerformanceDashboard - generateAlerts should generate memory alerts for high usage" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - generateAlerts should generate performance alerts for slow response times" name="PerformanceDashboard - generateAlerts should generate performance alerts for slow response times" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - generateAlerts should generate reliability alerts for high error rates" name="PerformanceDashboard - generateAlerts should generate reliability alerts for high error rates" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - generateAlerts should not generate alerts for good metrics" name="PerformanceDashboard - generateAlerts should not generate alerts for good metrics" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - generateAlerts should generate warning alerts for elevated metrics" name="PerformanceDashboard - generateAlerts should generate warning alerts for elevated metrics" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - generateAlerts should include timestamp in alerts" name="PerformanceDashboard - generateAlerts should include timestamp in alerts" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - exportDashboardData should export as JSON by default" name="PerformanceDashboard - exportDashboardData should export as JSON by default" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - exportDashboardData should export as JSON when explicitly specified" name="PerformanceDashboard - exportDashboardData should export as JSON when explicitly specified" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - exportDashboardData should export as CSV format" name="PerformanceDashboard - exportDashboardData should export as CSV format" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - exportDashboardData should export as text format" name="PerformanceDashboard - exportDashboardData should export as text format" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - exportDashboardData should fallback to JSON for unknown formats" name="PerformanceDashboard - exportDashboardData should fallback to JSON for unknown formats" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - Private Methods should calculate overall status correctly for healthy system" name="PerformanceDashboard - Private Methods should calculate overall status correctly for healthy system" time="0.002">
    </testcase>
    <testcase classname="PerformanceDashboard - Private Methods should calculate overall status correctly for critical system" name="PerformanceDashboard - Private Methods should calculate overall status correctly for critical system" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - Private Methods should format uptime correctly" name="PerformanceDashboard - Private Methods should format uptime correctly" time="0">
    </testcase>
    <testcase classname="PerformanceDashboard - Private Methods should generate insights from analytics patterns" name="PerformanceDashboard - Private Methods should generate insights from analytics patterns" time="0">
    </testcase>
    <testcase classname="PerformanceDashboard - Error Handling should handle missing dependencies gracefully" name="PerformanceDashboard - Error Handling should handle missing dependencies gracefully" time="0">
    </testcase>
    <testcase classname="PerformanceDashboard - Error Handling should handle null inputs gracefully" name="PerformanceDashboard - Error Handling should handle null inputs gracefully" time="0.003">
    </testcase>
    <testcase classname="PerformanceDashboard - Error Handling should provide fallback values when services fail" name="PerformanceDashboard - Error Handling should provide fallback values when services fail" time="0.001">
    </testcase>
    <testcase classname="PerformanceDashboard - Performance should generate dashboard quickly" name="PerformanceDashboard - Performance should generate dashboard quickly" time="0.004">
    </testcase>
    <testcase classname="PerformanceDashboard - Performance should handle large alert datasets efficiently" name="PerformanceDashboard - Performance should handle large alert datasets efficiently" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="ConversationManager - Rate Limiting and Validation" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:41" time="0.271" tests="10">
    <testcase classname="ConversationManager - Rate Limiting and Validation Rate Limiting Advanced Scenarios should handle rate limiting with custom windows" name="ConversationManager - Rate Limiting and Validation Rate Limiting Advanced Scenarios should handle rate limiting with custom windows" time="0.004">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation Rate Limiting Advanced Scenarios should handle multiple users with different rate limit states" name="ConversationManager - Rate Limiting and Validation Rate Limiting Advanced Scenarios should handle multiple users with different rate limit states" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid user ID in getHistory" name="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid user ID in getHistory" time="0.003">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid user ID in addMessage" name="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid user ID in addMessage" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid message content" name="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid message content" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid role in addMessage" name="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should handle invalid role in addMessage" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should accept valid roles" name="ConversationManager - Rate Limiting and Validation Input Validation Edge Cases should accept valid roles" time="0.003">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation User Statistics Edge Cases should initialize user stats for new users" name="ConversationManager - Rate Limiting and Validation User Statistics Edge Cases should initialize user stats for new users" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation User Statistics Edge Cases should update message count correctly" name="ConversationManager - Rate Limiting and Validation User Statistics Edge Cases should update message count correctly" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Rate Limiting and Validation User Statistics Edge Cases should handle invalid stat types gracefully" name="ConversationManager - Rate Limiting and Validation User Statistics Edge Cases should handle invalid stat types gracefully" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Bot Error Handling" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:41" time="0.283" tests="2">
    <testcase classname="Bot Error Handling should log uncaught exceptions" name="Bot Error Handling should log uncaught exceptions" time="0.003">
    </testcase>
    <testcase classname="Bot Error Handling should log unhandled promise rejections" name="Bot Error Handling should log unhandled promise rejections" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Chunk Boundary Handler - Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:41" time="0.297" tests="9">
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle empty chunks array" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle empty chunks array" time="0.002">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle single chunk" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle single chunk" time="0.001">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with different content types" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with different content types" time="0.008">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with incomplete markdown" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with incomplete markdown" time="0.019">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with special characters" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with special characters" time="0.002">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with different lengths" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with different lengths" time="0.001">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle edge cases" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle edge cases" time="0.002">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with complex markdown" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with complex markdown" time="0.001">
    </testcase>
    <testcase classname="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with mixed content" name="Chunk Boundary Handler - Branch Coverage validateChunkBoundaries should handle chunks with mixed content" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Error handling" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:42" time="0.305" tests="2">
    <testcase classname="Error handling handles failed Perplexity API response during chat" name="Error handling handles failed Perplexity API response during chat" time="0.032">
    </testcase>
    <testcase classname="Error handling handles failed summary API response" name="Error handling handles failed summary API response" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Pi Detector - Initialization" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:42" time="0.271" tests="5">
    <testcase classname="Pi Detector - Initialization initPiOptimizations should initialize and return optimized config" name="Pi Detector - Initialization initPiOptimizations should initialize and return optimized config" time="0.004">
    </testcase>
    <testcase classname="Pi Detector - Initialization initPiOptimizations should respect environment variable overrides" name="Pi Detector - Initialization initPiOptimizations should respect environment variable overrides" time="0.005">
    </testcase>
    <testcase classname="Pi Detector - Initialization initPiOptimizations should handle errors and return safe defaults" name="Pi Detector - Initialization initPiOptimizations should handle errors and return safe defaults" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Initialization initPiOptimizations should not initialize Pi optimizations when disabled by environment variable" name="Pi Detector - Initialization initPiOptimizations should not initialize Pi optimizations when disabled by environment variable" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Initialization initPiOptimizations should use environment-provided values when initialization fails" name="Pi Detector - Initialization initPiOptimizations should use environment-provided values when initialization fails" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Connection Throttler" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:42" time="0.277" tests="5">
    <testcase classname="Connection Throttler executeRequest should execute requests immediately when under max connections" name="Connection Throttler executeRequest should execute requests immediately when under max connections" time="0.002">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should queue requests when at max connections" name="Connection Throttler executeRequest should queue requests when at max connections" time="0.002">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should handle errors in requests" name="Connection Throttler executeRequest should handle errors in requests" time="0.009">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should process next queue item after completion" name="Connection Throttler executeRequest should process next queue item after completion" time="0.002">
    </testcase>
    <testcase classname="Connection Throttler clearQueue should clear all queued requests" name="Connection Throttler clearQueue should clear all queued requests" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Test Utilities" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:42" time="0.285" tests="5">
    <testcase classname="Test Utilities createMockMessage creates a default mock message with expected properties" name="Test Utilities createMockMessage creates a default mock message with expected properties" time="0.002">
    </testcase>
    <testcase classname="Test Utilities createMockMessage allows custom options" name="Test Utilities createMockMessage allows custom options" time="0.002">
    </testcase>
    <testcase classname="Test Utilities createMockInteraction creates a default mock interaction with expected properties" name="Test Utilities createMockInteraction creates a default mock interaction with expected properties" time="0.002">
    </testcase>
    <testcase classname="Test Utilities createMockInteraction allows custom options" name="Test Utilities createMockInteraction allows custom options" time="0.002">
    </testcase>
    <testcase classname="Test Utilities resetMocks resets all mocks" name="Test Utilities resetMocks resets all mocks" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Discord.js mock" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:43" time="0.267" tests="3">
    <testcase classname="Discord.js mock Client mock exists" name="Discord.js mock Client mock exists" time="0.002">
    </testcase>
    <testcase classname="Discord.js mock Client mock has required methods" name="Discord.js mock Client mock has required methods" time="0.001">
    </testcase>
    <testcase classname="Discord.js mock SlashCommandBuilder mock exists" name="Discord.js mock SlashCommandBuilder mock exists" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Bot Integration - Features" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:43" time="0.305" tests="8">
    <testcase classname="Bot Integration - Features adds emoji reactions for keywords" name="Bot Integration - Features adds emoji reactions for keywords" time="0.006">
    </testcase>
    <testcase classname="Bot Integration - Features adds multiple emoji reactions for multiple keywords" name="Bot Integration - Features adds multiple emoji reactions for multiple keywords" time="0.006">
    </testcase>
    <testcase classname="Bot Integration - Features rate limits user messages" name="Bot Integration - Features rate limits user messages" time="0.005">
    </testcase>
    <testcase classname="Bot Integration - Features handles API error when replying" name="Bot Integration - Features handles API error when replying" time="0.004">
    </testcase>
    <testcase classname="Bot Integration - Features handles API error when summarising" name="Bot Integration - Features handles API error when summarising" time="0.007">
    </testcase>
    <testcase classname="Bot Integration - Features handles empty message gracefully" name="Bot Integration - Features handles empty message gracefully" time="0.004">
    </testcase>
    <testcase classname="Bot Integration - Features truncates very long conversation history" name="Bot Integration - Features truncates very long conversation history" time="0.004">
    </testcase>
    <testcase classname="Bot Integration - Features handles missing environment variables gracefully" name="Bot Integration - Features handles missing environment variables gracefully" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="InputValidator - User ID" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:43" time="0.291" tests="4">
    <testcase classname="InputValidator - User ID validateUserId should validate correct Discord user IDs" name="InputValidator - User ID validateUserId should validate correct Discord user IDs" time="0.003">
    </testcase>
    <testcase classname="InputValidator - User ID validateUserId should reject invalid user IDs" name="InputValidator - User ID validateUserId should reject invalid user IDs" time="0.003">
    </testcase>
    <testcase classname="InputValidator - User ID validateUserId should accept valid user IDs" name="InputValidator - User ID validateUserId should accept valid user IDs" time="0.001">
    </testcase>
    <testcase classname="InputValidator - User ID validateUserId should handle edge cases" name="InputValidator - User ID validateUserId should handle edge cases" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="URL Formatter - Social Media" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:44" time="0.309" tests="16">
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should format Reddit URLs" name="URL Formatter - Social Media formatSocialMediaLinks should format Reddit URLs" time="0.003">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should format Reddit subreddit references" name="URL Formatter - Social Media formatSocialMediaLinks should format Reddit subreddit references" time="0.002">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should format Imgur URLs" name="URL Formatter - Social Media formatSocialMediaLinks should format Imgur URLs" time="0.002">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should format GitHub URLs" name="URL Formatter - Social Media formatSocialMediaLinks should format GitHub URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should format Twitter URLs" name="URL Formatter - Social Media formatSocialMediaLinks should format Twitter URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should format X.com URLs" name="URL Formatter - Social Media formatSocialMediaLinks should format X.com URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle text without URLs" name="URL Formatter - Social Media formatSocialMediaLinks should handle text without URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle multiple URLs in one text" name="URL Formatter - Social Media formatSocialMediaLinks should handle multiple URLs in one text" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with query parameters" name="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with query parameters" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with fragments" name="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with fragments" time="0.002">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with www prefix" name="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with www prefix" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with https prefix" name="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with https prefix" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with http prefix" name="URL Formatter - Social Media formatSocialMediaLinks should handle URLs with http prefix" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle mixed case URLs" name="URL Formatter - Social Media formatSocialMediaLinks should handle mixed case URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle URLs at end of sentence" name="URL Formatter - Social Media formatSocialMediaLinks should handle URLs at end of sentence" time="0.005">
    </testcase>
    <testcase classname="URL Formatter - Social Media formatSocialMediaLinks should handle URLs at beginning of sentence" name="URL Formatter - Social Media formatSocialMediaLinks should handle URLs at beginning of sentence" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="InputValidator - General Validation" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:44" time="0.313" tests="8">
    <testcase classname="InputValidator - General Validation validateInput should validate text input correctly" name="InputValidator - General Validation validateInput should validate text input correctly" time="0.005">
    </testcase>
    <testcase classname="InputValidator - General Validation validateInput should reject inputs that exceed length limits" name="InputValidator - General Validation validateInput should reject inputs that exceed length limits" time="0.002">
    </testcase>
    <testcase classname="InputValidator - General Validation validateInput should reject inputs with dangerous patterns" name="InputValidator - General Validation validateInput should reject inputs with dangerous patterns" time="0.003">
    </testcase>
    <testcase classname="InputValidator - General Validation validateInput should validate email format" name="InputValidator - General Validation validateInput should validate email format" time="0.001">
    </testcase>
    <testcase classname="InputValidator - General Validation validateInput should validate URL format" name="InputValidator - General Validation validateInput should validate URL format" time="0.002">
    </testcase>
    <testcase classname="InputValidator - General Validation sanitizeInput should sanitize HTML content" name="InputValidator - General Validation sanitizeInput should sanitize HTML content" time="0.002">
    </testcase>
    <testcase classname="InputValidator - General Validation sanitizeInput should remove dangerous scripts" name="InputValidator - General Validation sanitizeInput should remove dangerous scripts" time="0.001">
    </testcase>
    <testcase classname="InputValidator - General Validation sanitizeInput should preserve safe content" name="InputValidator - General Validation sanitizeInput should preserve safe content" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Config - Environment Variable Validation" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:44" time="0.346" tests="13">
    <testcase classname="Config - Environment Variable Validation Required Environment Variables should throw error when PERPLEXITY_API_KEY is missing" name="Config - Environment Variable Validation Required Environment Variables should throw error when PERPLEXITY_API_KEY is missing" time="0.015">
    </testcase>
    <testcase classname="Config - Environment Variable Validation Required Environment Variables should throw error when DISCORD_BOT_TOKEN is missing" name="Config - Environment Variable Validation Required Environment Variables should throw error when DISCORD_BOT_TOKEN is missing" time="0.003">
    </testcase>
    <testcase classname="Config - Environment Variable Validation Required Environment Variables should throw error when both required env vars are missing" name="Config - Environment Variable Validation Required Environment Variables should throw error when both required env vars are missing" time="0.003">
    </testcase>
    <testcase classname="Config - Environment Variable Validation Required Environment Variables should handle empty string environment variables" name="Config - Environment Variable Validation Required Environment Variables should handle empty string environment variables" time="0.002">
    </testcase>
    <testcase classname="Config - Environment Variable Validation getIntEnvVar Function Error Branches should return default value for invalid integer strings" name="Config - Environment Variable Validation getIntEnvVar Function Error Branches should return default value for invalid integer strings" time="0.004">
    </testcase>
    <testcase classname="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle valid integer environment variables" name="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle valid integer environment variables" time="0.003">
    </testcase>
    <testcase classname="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle zero values correctly" name="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle zero values correctly" time="0.003">
    </testcase>
    <testcase classname="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle negative integer values" name="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle negative integer values" time="0.006">
    </testcase>
    <testcase classname="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle large integer values" name="Config - Environment Variable Validation getIntEnvVar Function Error Branches should handle large integer values" time="0.002">
    </testcase>
    <testcase classname="Config - Environment Variable Validation Boolean Environment Variables should handle ENABLE_PI_OPTIMIZATIONS=true" name="Config - Environment Variable Validation Boolean Environment Variables should handle ENABLE_PI_OPTIMIZATIONS=true" time="0.002">
    </testcase>
    <testcase classname="Config - Environment Variable Validation Boolean Environment Variables should handle ENABLE_PI_OPTIMIZATIONS=false" name="Config - Environment Variable Validation Boolean Environment Variables should handle ENABLE_PI_OPTIMIZATIONS=false" time="0.002">
    </testcase>
    <testcase classname="Config - Environment Variable Validation Boolean Environment Variables should default to false when ENABLE_PI_OPTIMIZATIONS is undefined" name="Config - Environment Variable Validation Boolean Environment Variables should default to false when ENABLE_PI_OPTIMIZATIONS is undefined" time="0.002">
    </testcase>
    <testcase classname="Config - Environment Variable Validation Boolean Environment Variables should handle malformed boolean environment variables" name="Config - Environment Variable Validation Boolean Environment Variables should handle malformed boolean environment variables" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Conversation Manager - Advanced Features" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:45" time="0.313" tests="11">
    <testcase classname="Conversation Manager - Advanced Features isRateLimited returns false for new users" name="Conversation Manager - Advanced Features isRateLimited returns false for new users" time="0.003">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features isRateLimited returns true for users within rate limit window" name="Conversation Manager - Advanced Features isRateLimited returns true for users within rate limit window" time="0.003">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features isRateLimited returns false for users outside rate limit window" name="Conversation Manager - Advanced Features isRateLimited returns false for users outside rate limit window" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features getUserStats returns default stats for new users" name="Conversation Manager - Advanced Features getUserStats returns default stats for new users" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features getUserStats returns existing stats for users with history" name="Conversation Manager - Advanced Features getUserStats returns existing stats for users with history" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features updateUserStats updates message count" name="Conversation Manager - Advanced Features updateUserStats updates message count" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features updateUserStats updates summary count" name="Conversation Manager - Advanced Features updateUserStats updates summary count" time="0.003">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features updateUserStats increments existing counts" name="Conversation Manager - Advanced Features updateUserStats increments existing counts" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features updateUserStats updates last active timestamp" name="Conversation Manager - Advanced Features updateUserStats updates last active timestamp" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features destroy clears all intervals" name="Conversation Manager - Advanced Features destroy clears all intervals" time="0.008">
    </testcase>
    <testcase classname="Conversation Manager - Advanced Features destroy clears all conversation data" name="Conversation Manager - Advanced Features destroy clears all conversation data" time="0.005">
    </testcase>
  </testsuite>
  <testsuite name="Config - Pi Optimization Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:45" time="0.355" tests="14">
    <testcase classname="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should handle various debounce values" name="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should handle various debounce values" time="0.004">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should handle various memory limit values" name="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should handle various memory limit values" time="0.003">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should handle max connections setting" name="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should handle max connections setting" time="0.003">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should use default values when Pi env vars are not set" name="Config - Pi Optimization Branch Coverage Pi Optimization Environment Variables should use default values when Pi env vars are not set" time="0.003">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should return config when pi-detector succeeds" name="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should return config when pi-detector succeeds" time="0.004">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle pi-detector errors gracefully" name="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle pi-detector errors gracefully" time="0.021">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle missing pi-detector module gracefully" name="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle missing pi-detector module gracefully" time="0.01">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle pi-detector returning null" name="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle pi-detector returning null" time="0.01">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle pi-detector returning undefined" name="Config - Pi Optimization Branch Coverage initializePiOptimizations Function Branches should handle pi-detector returning undefined" time="0.007">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle different PI_LOG_LEVEL values" name="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle different PI_LOG_LEVEL values" time="0.002">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle boolean environment variables correctly" name="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle boolean environment variables correctly" time="0.002">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle reaction limit values" name="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle reaction limit values" time="0.002">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle stream responses setting" name="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should handle stream responses setting" time="0.002">
    </testcase>
    <testcase classname="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should have all required configuration sections" name="Config - Pi Optimization Branch Coverage Configuration Structure Edge Cases should have all required configuration sections" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Logger - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:45" time="0.305" tests="13">
    <testcase classname="Logger - Advanced respects log level filtering" name="Logger - Advanced respects log level filtering" time="0.003">
    </testcase>
    <testcase classname="Logger - Advanced handles log level ERROR only" name="Logger - Advanced handles log level ERROR only" time="0.002">
    </testcase>
    <testcase classname="Logger - Advanced handles log level WARN and above" name="Logger - Advanced handles log level WARN and above" time="0.003">
    </testcase>
    <testcase classname="Logger - Advanced handles log level INFO and above" name="Logger - Advanced handles log level INFO and above" time="0.002">
    </testcase>
    <testcase classname="Logger - Advanced handles log level DEBUG (all messages)" name="Logger - Advanced handles log level DEBUG (all messages)" time="0.002">
    </testcase>
    <testcase classname="Logger - Advanced handles invalid log level gracefully" name="Logger - Advanced handles invalid log level gracefully" time="0.002">
    </testcase>
    <testcase classname="Logger - Advanced handles complex data objects" name="Logger - Advanced handles complex data objects" time="0.002">
    </testcase>
    <testcase classname="Logger - Advanced handles circular references in data" name="Logger - Advanced handles circular references in data" time="0.004">
    </testcase>
    <testcase classname="Logger - Advanced handles very long messages" name="Logger - Advanced handles very long messages" time="0.001">
    </testcase>
    <testcase classname="Logger - Advanced handles messages with newlines" name="Logger - Advanced handles messages with newlines" time="0.002">
    </testcase>
    <testcase classname="Logger - Advanced handles messages with tabs" name="Logger - Advanced handles messages with tabs" time="0.002">
    </testcase>
    <testcase classname="Logger - Advanced handles messages with carriage returns" name="Logger - Advanced handles messages with carriage returns" time="0.001">
    </testcase>
    <testcase classname="Logger - Advanced handles multiple data arguments" name="Logger - Advanced handles multiple data arguments" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Logger Mock" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:46" time="0.308" tests="4">
    <testcase classname="Logger Mock logger mock exists" name="Logger Mock logger mock exists" time="0.002">
    </testcase>
    <testcase classname="Logger Mock logger mock has required methods" name="Logger Mock logger mock has required methods" time="0.002">
    </testcase>
    <testcase classname="Logger Mock handleError returns a value" name="Logger Mock handleError returns a value" time="0.002">
    </testcase>
    <testcase classname="Logger Mock _formatMessage returns a formatted message" name="Logger Mock _formatMessage returns a formatted message" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Command Handling - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:46" time="0.337" tests="6">
    <testcase classname="Command Handling - Basic responds to !clearhistory and clears the conversation history" name="Command Handling - Basic responds to !clearhistory and clears the conversation history" time="0.003">
    </testcase>
    <testcase classname="Command Handling - Basic !help command replies with help message" name="Command Handling - Basic !help command replies with help message" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Basic !summary command replies with summary message" name="Command Handling - Basic !summary command replies with summary message" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Basic !stats command replies with stats message" name="Command Handling - Basic !stats command replies with stats message" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Basic handles unknown commands gracefully" name="Command Handling - Basic handles unknown commands gracefully" time="0.002">
    </testcase>
    <testcase classname="Command Handling - Basic ignores messages that do not start with !" name="Command Handling - Basic ignores messages that do not start with !" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Config" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:46" time="0.326" tests="7">
    <testcase classname="Config basic configuration exports required configuration settings" name="Config basic configuration exports required configuration settings" time="0.005">
    </testcase>
    <testcase classname="Config basic configuration should have required environment variables available" name="Config basic configuration should have required environment variables available" time="0.004">
    </testcase>
    <testcase classname="Config nested configuration should have API configuration" name="Config nested configuration should have API configuration" time="0.003">
    </testcase>
    <testcase classname="Config nested configuration should have system messages defined" name="Config nested configuration should have system messages defined" time="0.002">
    </testcase>
    <testcase classname="Config nested configuration should have emoji reactions defined" name="Config nested configuration should have emoji reactions defined" time="0.005">
    </testcase>
    <testcase classname="Config initializePiOptimizations should have initializePiOptimizations function available" name="Config initializePiOptimizations should have initializePiOptimizations function available" time="0.003">
    </testcase>
    <testcase classname="Config initializePiOptimizations should return a promise when initializePiOptimizations is called" name="Config initializePiOptimizations should return a promise when initializePiOptimizations is called" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Message flow" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:47" time="0.319" tests="1">
    <testcase classname="Message flow adds user and assistant messages to conversationHistory" name="Message flow adds user and assistant messages to conversationHistory" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Logger - Branch Coverage Tests" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:47" time="0.351" tests="12">
    <testcase classname="Logger - Branch Coverage Tests skips debug logs when log level is higher" name="Logger - Branch Coverage Tests skips debug logs when log level is higher" time="0.005">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests skips info logs when log level is higher" name="Logger - Branch Coverage Tests skips info logs when log level is higher" time="0.005">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests skips warning logs when log level is higher" name="Logger - Branch Coverage Tests skips warning logs when log level is higher" time="0.004">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles directory creation failure" name="Logger - Branch Coverage Tests handles directory creation failure" time="0.007">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests tests log file rotation" name="Logger - Branch Coverage Tests tests log file rotation" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles custom log size limit" name="Logger - Branch Coverage Tests handles custom log size limit" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles file stat errors during log rotation" name="Logger - Branch Coverage Tests handles file stat errors during log rotation" time="0.002">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles request errors in error method" name="Logger - Branch Coverage Tests handles request errors in error method" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles invalid log levels" name="Logger - Branch Coverage Tests handles invalid log levels" time="0.004">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles file write errors" name="Logger - Branch Coverage Tests handles file write errors" time="0.002">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles errors during log rotation" name="Logger - Branch Coverage Tests handles errors during log rotation" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles unlink errors during log cleanup" name="Logger - Branch Coverage Tests handles unlink errors during log cleanup" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="PerplexitySecure Service - Private Methods" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:47" time="0.4" tests="34">
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should return empty string for null headers" name="PerplexitySecure Service - Private Methods _safeGetHeader method should return empty string for null headers" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should return empty string for undefined headers" name="PerplexitySecure Service - Private Methods _safeGetHeader method should return empty string for undefined headers" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should return empty string for null key" name="PerplexitySecure Service - Private Methods _safeGetHeader method should return empty string for null key" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should get header using Headers.get() method" name="PerplexitySecure Service - Private Methods _safeGetHeader method should get header using Headers.get() method" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should fall back to object property access" name="PerplexitySecure Service - Private Methods _safeGetHeader method should fall back to object property access" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should check lowercase header names" name="PerplexitySecure Service - Private Methods _safeGetHeader method should check lowercase header names" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should check uppercase header names" name="PerplexitySecure Service - Private Methods _safeGetHeader method should check uppercase header names" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should handle Headers.get() throwing error" name="PerplexitySecure Service - Private Methods _safeGetHeader method should handle Headers.get() throwing error" time="0.013">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should handle non-object headers" name="PerplexitySecure Service - Private Methods _safeGetHeader method should handle non-object headers" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _safeGetHeader method should handle function headers" name="PerplexitySecure Service - Private Methods _safeGetHeader method should handle function headers" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _shouldUseCache method should return false when caching is explicitly disabled" name="PerplexitySecure Service - Private Methods _shouldUseCache method should return false when caching is explicitly disabled" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _shouldUseCache method should return true when in test environment" name="PerplexitySecure Service - Private Methods _shouldUseCache method should return true when in test environment" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _shouldUseCache method should return true when cache is enabled and caching not disabled" name="PerplexitySecure Service - Private Methods _shouldUseCache method should return true when cache is enabled and caching not disabled" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _buildRequestPayload method should build basic request payload with defaults" name="PerplexitySecure Service - Private Methods _buildRequestPayload method should build basic request payload with defaults" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _buildRequestPayload method should use custom options when provided" name="PerplexitySecure Service - Private Methods _buildRequestPayload method should use custom options when provided" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _getPiOptimizationSettings method should return default settings when PI_OPTIMIZATIONS is not configured" name="PerplexitySecure Service - Private Methods _getPiOptimizationSettings method should return default settings when PI_OPTIMIZATIONS is not configured" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _getPiOptimizationSettings method should return settings from config when available" name="PerplexitySecure Service - Private Methods _getPiOptimizationSettings method should return settings from config when available" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _getPiOptimizationSettings method should handle config access errors gracefully" name="PerplexitySecure Service - Private Methods _getPiOptimizationSettings method should handle config access errors gracefully" time="0.003">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _generateCacheKey method should generate consistent cache key for same history" name="PerplexitySecure Service - Private Methods _generateCacheKey method should generate consistent cache key for same history" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _generateCacheKey method should generate different keys for different history" name="PerplexitySecure Service - Private Methods _generateCacheKey method should generate different keys for different history" time="0.002">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _formatCacheEntry method should format string entry with timestamp" name="PerplexitySecure Service - Private Methods _formatCacheEntry method should format string entry with timestamp" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _formatCacheEntry method should preserve existing object entry with timestamp" name="PerplexitySecure Service - Private Methods _formatCacheEntry method should preserve existing object entry with timestamp" time="0.004">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _formatCacheEntry method should add timestamp to object entry without one" name="PerplexitySecure Service - Private Methods _formatCacheEntry method should add timestamp to object entry without one" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _formatCacheEntry method should handle null entry" name="PerplexitySecure Service - Private Methods _formatCacheEntry method should handle null entry" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return false for null error" name="PerplexitySecure Service - Private Methods _isRetryableError method should return false for null error" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return false for error without message" name="PerplexitySecure Service - Private Methods _isRetryableError method should return false for error without message" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return true for temporary errors" name="PerplexitySecure Service - Private Methods _isRetryableError method should return true for temporary errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return true for network errors" name="PerplexitySecure Service - Private Methods _isRetryableError method should return true for network errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return true for 429 errors" name="PerplexitySecure Service - Private Methods _isRetryableError method should return true for 429 errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return false for permanent errors" name="PerplexitySecure Service - Private Methods _isRetryableError method should return false for permanent errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return false for invalid errors" name="PerplexitySecure Service - Private Methods _isRetryableError method should return false for invalid errors" time="0">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return false for unauthorized errors" name="PerplexitySecure Service - Private Methods _isRetryableError method should return false for unauthorized errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return false for forbidden errors" name="PerplexitySecure Service - Private Methods _isRetryableError method should return false for forbidden errors" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service - Private Methods _isRetryableError method should return false for unknown errors by default" name="PerplexitySecure Service - Private Methods _isRetryableError method should return false for unknown errors by default" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="URL Formatter - YouTube" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:48" time="0.333" tests="15">
    <testcase classname="URL Formatter - YouTube formatYouTubeLinks should format YouTube URLs" name="URL Formatter - YouTube formatYouTubeLinks should format YouTube URLs" time="0.003">
    </testcase>
    <testcase classname="URL Formatter - YouTube formatYouTubeLinks should format YouTube short URLs" name="URL Formatter - YouTube formatYouTubeLinks should format YouTube short URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - YouTube formatYouTubeLinks should handle text without YouTube URLs" name="URL Formatter - YouTube formatYouTubeLinks should handle text without YouTube URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - YouTube formatYouTubeLinks should handle multiple YouTube URLs" name="URL Formatter - YouTube formatYouTubeLinks should handle multiple YouTube URLs" time="0.002">
    </testcase>
    <testcase classname="URL Formatter - YouTube fixLinkFormatting should fix malformed markdown links" name="URL Formatter - YouTube fixLinkFormatting should fix malformed markdown links" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - YouTube fixLinkFormatting should handle properly formatted links" name="URL Formatter - YouTube fixLinkFormatting should handle properly formatted links" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - YouTube fixLinkFormatting should handle text without links" name="URL Formatter - YouTube fixLinkFormatting should handle text without links" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - YouTube fixLinkFormatting should fix multiple malformed links" name="URL Formatter - YouTube fixLinkFormatting should fix multiple malformed links" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - YouTube formatAllUrls should format all types of URLs" name="URL Formatter - YouTube formatAllUrls should format all types of URLs" time="0.003">
    </testcase>
    <testcase classname="URL Formatter - YouTube formatAllUrls should handle text without URLs" name="URL Formatter - YouTube formatAllUrls should handle text without URLs" time="0.002">
    </testcase>
    <testcase classname="URL Formatter - YouTube formatAllUrls should handle mixed content" name="URL Formatter - YouTube formatAllUrls should handle mixed content" time="0.002">
    </testcase>
    <testcase classname="URL Formatter - YouTube Error handling should handle null input" name="URL Formatter - YouTube Error handling should handle null input" time="0.005">
    </testcase>
    <testcase classname="URL Formatter - YouTube Error handling should handle undefined input" name="URL Formatter - YouTube Error handling should handle undefined input" time="0.002">
    </testcase>
    <testcase classname="URL Formatter - YouTube Error handling should handle empty string input" name="URL Formatter - YouTube Error handling should handle empty string input" time="0.001">
    </testcase>
    <testcase classname="URL Formatter - YouTube Error handling should handle non-string input" name="URL Formatter - YouTube Error handling should handle non-string input" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="EmojiManager" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:48" time="0.325" tests="7">
    <testcase classname="EmojiManager adds emojis to response based on keywords" name="EmojiManager adds emojis to response based on keywords" time="0.002">
    </testcase>
    <testcase classname="EmojiManager adds multiple emojis when multiple keywords are found" name="EmojiManager adds multiple emojis when multiple keywords are found" time="0.001">
    </testcase>
    <testcase classname="EmojiManager does not add emojis when no keywords are found" name="EmojiManager does not add emojis when no keywords are found" time="0.001">
    </testcase>
    <testcase classname="EmojiManager gets reactions for a message based on keywords" name="EmojiManager gets reactions for a message based on keywords" time="0.002">
    </testcase>
    <testcase classname="EmojiManager returns empty array when no reaction keywords are found" name="EmojiManager returns empty array when no reaction keywords are found" time="0.001">
    </testcase>
    <testcase classname="EmojiManager adds reactions to a message" name="EmojiManager adds reactions to a message" time="0.001">
    </testcase>
    <testcase classname="EmojiManager handles errors when adding reactions" name="EmojiManager handles errors when adding reactions" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Performance Monitor - Core" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:48" time="0.322" tests="5">
    <testcase classname="Performance Monitor - Core initialize should start monitoring in production environment" name="Performance Monitor - Core initialize should start monitoring in production environment" time="0.003">
    </testcase>
    <testcase classname="Performance Monitor - Core initialize should not start monitoring in test environment" name="Performance Monitor - Core initialize should not start monitoring in test environment" time="0.002">
    </testcase>
    <testcase classname="Performance Monitor - Core initialize should not start monitoring if already initialized" name="Performance Monitor - Core initialize should not start monitoring if already initialized" time="0.003">
    </testcase>
    <testcase classname="Performance Monitor - Core shutdown should clear interval and reset state" name="Performance Monitor - Core shutdown should clear interval and reset state" time="0.003">
    </testcase>
    <testcase classname="Performance Monitor - Core shutdown should handle shutdown when not initialized" name="Performance Monitor - Core shutdown should handle shutdown when not initialized" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Conversation Manager - Basic Operations" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:49" time="0.317" tests="7">
    <testcase classname="Conversation Manager - Basic Operations getHistory returns empty array for new users" name="Conversation Manager - Basic Operations getHistory returns empty array for new users" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Basic Operations getHistory returns conversation history for existing users" name="Conversation Manager - Basic Operations getHistory returns conversation history for existing users" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Basic Operations addMessage adds message to new conversation" name="Conversation Manager - Basic Operations addMessage adds message to new conversation" time="0.003">
    </testcase>
    <testcase classname="Conversation Manager - Basic Operations addMessage adds message to existing conversation" name="Conversation Manager - Basic Operations addMessage adds message to existing conversation" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Basic Operations addMessage maintains conversation history limit" name="Conversation Manager - Basic Operations addMessage maintains conversation history limit" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Basic Operations clearHistory clears conversation history for user" name="Conversation Manager - Basic Operations clearHistory clears conversation history for user" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager - Basic Operations clearHistory clears all conversation data when no userId provided" name="Conversation Manager - Basic Operations clearHistory clears all conversation data when no userId provided" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Perplexity Service - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:49" time="0.383" tests="6">
    <testcase classname="Perplexity Service - Basic sendChatRequest sends a request to the API with correct parameters" name="Perplexity Service - Basic sendChatRequest sends a request to the API with correct parameters" time="0.006">
    </testcase>
    <testcase classname="Perplexity Service - Basic sendChatRequest throws an error when API request fails" name="Perplexity Service - Basic sendChatRequest throws an error when API request fails" time="0.045">
    </testcase>
    <testcase classname="Perplexity Service - Basic sendChatRequest handles network errors gracefully" name="Perplexity Service - Basic sendChatRequest handles network errors gracefully" time="0.011">
    </testcase>
    <testcase classname="Perplexity Service - Basic sendChatRequest handles empty messages array" name="Perplexity Service - Basic sendChatRequest handles empty messages array" time="0.002">
    </testcase>
    <testcase classname="Perplexity Service - Basic sendChatRequest handles single message" name="Perplexity Service - Basic sendChatRequest handles single message" time="0.002">
    </testcase>
    <testcase classname="Perplexity Service - Basic sendChatRequest handles multiple messages" name="Perplexity Service - Basic sendChatRequest handles multiple messages" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="EnhancedCache - Eviction" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:50" time="0.324" tests="6">
    <testcase classname="EnhancedCache - Eviction Size Management should enforce max entries limit" name="EnhancedCache - Eviction Size Management should enforce max entries limit" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - Eviction Size Management should enforce max size limit" name="EnhancedCache - Eviction Size Management should enforce max size limit" time="0.004">
    </testcase>
    <testcase classname="EnhancedCache - Eviction Size Management should calculate entry size correctly" name="EnhancedCache - Eviction Size Management should calculate entry size correctly" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Eviction Eviction Strategies should use LRU eviction strategy" name="EnhancedCache - Eviction Eviction Strategies should use LRU eviction strategy" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Eviction Eviction Strategies should use LFU eviction strategy" name="EnhancedCache - Eviction Eviction Strategies should use LFU eviction strategy" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Eviction Eviction Strategies should use TTL eviction strategy" name="EnhancedCache - Eviction Eviction Strategies should use TTL eviction strategy" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="SecurityMonitor - Input Validation" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:50" time="0.373" tests="21">
    <testcase classname="SecurityMonitor - Input Validation validateInput should return valid for safe input" name="SecurityMonitor - Input Validation validateInput should return valid for safe input" time="0.003">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation validateInput should detect XSS attempts" name="SecurityMonitor - Input Validation validateInput should detect XSS attempts" time="0.003">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation validateInput should detect SQL injection attempts" name="SecurityMonitor - Input Validation validateInput should detect SQL injection attempts" time="0.002">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation validateInput should detect command injection attempts" name="SecurityMonitor - Input Validation validateInput should detect command injection attempts" time="0.002">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation validateInput should detect multiple security issues" name="SecurityMonitor - Input Validation validateInput should detect multiple security issues" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation validateInput should handle empty input" name="SecurityMonitor - Input Validation validateInput should handle empty input" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation validateInput should handle null input" name="SecurityMonitor - Input Validation validateInput should handle null input" time="0.002">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation validateInput should handle undefined input" name="SecurityMonitor - Input Validation validateInput should handle undefined input" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectXSSPatterns should detect script tags" name="SecurityMonitor - Input Validation _detectXSSPatterns should detect script tags" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectXSSPatterns should detect javascript protocol" name="SecurityMonitor - Input Validation _detectXSSPatterns should detect javascript protocol" time="0">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectXSSPatterns should detect onload attribute" name="SecurityMonitor - Input Validation _detectXSSPatterns should detect onload attribute" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectXSSPatterns should not detect safe content" name="SecurityMonitor - Input Validation _detectXSSPatterns should not detect safe content" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectSQLInjection should detect DROP TABLE" name="SecurityMonitor - Input Validation _detectSQLInjection should detect DROP TABLE" time="0.004">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectSQLInjection should detect UNION SELECT" name="SecurityMonitor - Input Validation _detectSQLInjection should detect UNION SELECT" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectSQLInjection should detect SQL comments" name="SecurityMonitor - Input Validation _detectSQLInjection should detect SQL comments" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectSQLInjection should not detect safe SQL-like content" name="SecurityMonitor - Input Validation _detectSQLInjection should not detect safe SQL-like content" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectCommandInjection should detect dangerous commands" name="SecurityMonitor - Input Validation _detectCommandInjection should detect dangerous commands" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectCommandInjection should detect command chaining" name="SecurityMonitor - Input Validation _detectCommandInjection should detect command chaining" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation _detectCommandInjection should not detect safe content" name="SecurityMonitor - Input Validation _detectCommandInjection should not detect safe content" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation error handling should handle errors in validateInput gracefully" name="SecurityMonitor - Input Validation error handling should handle errors in validateInput gracefully" time="0.012">
    </testcase>
    <testcase classname="SecurityMonitor - Input Validation error handling should handle errors in analyzeSecurityThreats gracefully" name="SecurityMonitor - Input Validation error handling should handle errors in analyzeSecurityThreats gracefully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Pi Detector - Detection" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:50" time="0.335" tests="8">
    <testcase classname="Pi Detector - Detection detectPiModel should detect Raspberry Pi 4" name="Pi Detector - Detection detectPiModel should detect Raspberry Pi 4" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Detection detectPiModel should detect Raspberry Pi 3" name="Pi Detector - Detection detectPiModel should detect Raspberry Pi 3" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Detection detectPiModel should detect Raspberry Pi 5" name="Pi Detector - Detection detectPiModel should detect Raspberry Pi 5" time="0.001">
    </testcase>
    <testcase classname="Pi Detector - Detection detectPiModel should handle CPU frequency detection" name="Pi Detector - Detection detectPiModel should handle CPU frequency detection" time="0.001">
    </testcase>
    <testcase classname="Pi Detector - Detection detectPiModel should handle temperature reading failure" name="Pi Detector - Detection detectPiModel should handle temperature reading failure" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Detection detectPiModel should handle non-Pi systems" name="Pi Detector - Detection detectPiModel should handle non-Pi systems" time="0.001">
    </testcase>
    <testcase classname="Pi Detector - Detection detectPiModel should handle non-Linux systems" name="Pi Detector - Detection detectPiModel should handle non-Linux systems" time="0.002">
    </testcase>
    <testcase classname="Pi Detector - Detection detectPiModel should handle errors gracefully" name="Pi Detector - Detection detectPiModel should handle errors gracefully" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Message Formatter - Advanced" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:51" time="0.342" tests="15">
    <testcase classname="Message Formatter - Advanced createCompactEmbed should return original embed when not in compact mode" name="Message Formatter - Advanced createCompactEmbed should return original embed when not in compact mode" time="0.002">
    </testcase>
    <testcase classname="Message Formatter - Advanced createCompactEmbed should create compact embed when in compact mode" name="Message Formatter - Advanced createCompactEmbed should create compact embed when in compact mode" time="0.003">
    </testcase>
    <testcase classname="Message Formatter - Advanced createCompactEmbed should handle embeds without fields" name="Message Formatter - Advanced createCompactEmbed should handle embeds without fields" time="0.002">
    </testcase>
    <testcase classname="Message Formatter - Advanced createCompactEmbed should handle embeds without description" name="Message Formatter - Advanced createCompactEmbed should handle embeds without description" time="0.002">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with markdown formatting" name="Message Formatter - Advanced formatResponse with special content should handle messages with markdown formatting" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with URLs" name="Message Formatter - Advanced formatResponse with special content should handle messages with URLs" time="0.002">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with emojis" name="Message Formatter - Advanced formatResponse with special content should handle messages with emojis" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with unicode characters" name="Message Formatter - Advanced formatResponse with special content should handle messages with unicode characters" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with special characters" name="Message Formatter - Advanced formatResponse with special content should handle messages with special characters" time="0.002">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with code blocks" name="Message Formatter - Advanced formatResponse with special content should handle messages with code blocks" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with quotes" name="Message Formatter - Advanced formatResponse with special content should handle messages with quotes" time="0">
    </testcase>
    <testcase classname="Message Formatter - Advanced formatResponse with special content should handle messages with spoilers" name="Message Formatter - Advanced formatResponse with special content should handle messages with spoilers" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Advanced edge cases should handle very long single word" name="Message Formatter - Advanced edge cases should handle very long single word" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Advanced edge cases should handle messages with mixed content types" name="Message Formatter - Advanced edge cases should handle messages with mixed content types" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Advanced edge cases should handle messages with carriage returns" name="Message Formatter - Advanced edge cases should handle messages with carriage returns" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Lazy Loader" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:51" time="0.337" tests="4">
    <testcase classname="Lazy Loader basic functionality should return a function that loads a module when called" name="Lazy Loader basic functionality should return a function that loads a module when called" time="0.002">
    </testcase>
    <testcase classname="Lazy Loader basic functionality should handle modules with methods" name="Lazy Loader basic functionality should handle modules with methods" time="0.002">
    </testcase>
    <testcase classname="Lazy Loader memoization should memoize the loaded module" name="Lazy Loader memoization should memoize the loaded module" time="0.001">
    </testcase>
    <testcase classname="Lazy Loader error handling should handle errors in the loader function" name="Lazy Loader error handling should handle errors in the loader function" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Chat Service - Message Validation Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:51" time="0.354" tests="9">
    <testcase classname="Chat Service - Message Validation Branch Coverage Bot Message Filtering should ignore messages from bots" name="Chat Service - Message Validation Branch Coverage Bot Message Filtering should ignore messages from bots" time="0.004">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Bot Message Filtering should process messages from real users" name="Chat Service - Message Validation Branch Coverage Bot Message Filtering should process messages from real users" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore empty string messages" name="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore empty string messages" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore whitespace-only messages" name="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore whitespace-only messages" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore null content" name="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore null content" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore undefined content" name="Chat Service - Message Validation Branch Coverage Empty Message Filtering should ignore undefined content" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Empty Message Filtering should process valid non-empty messages" name="Chat Service - Message Validation Branch Coverage Empty Message Filtering should process valid non-empty messages" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Rate Limiting Branch Coverage should show rate limit message when user is rate limited" name="Chat Service - Message Validation Branch Coverage Rate Limiting Branch Coverage should show rate limit message when user is rate limited" time="0.003">
    </testcase>
    <testcase classname="Chat Service - Message Validation Branch Coverage Rate Limiting Branch Coverage should proceed normally when user is not rate limited" name="Chat Service - Message Validation Branch Coverage Rate Limiting Branch Coverage should proceed normally when user is not rate limited" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Enhanced Message Chunker" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:52" time="0.353" tests="5">
    <testcase classname="Enhanced Message Chunker processes source references correctly" name="Enhanced Message Chunker processes source references correctly" time="0.002">
    </testcase>
    <testcase classname="Enhanced Message Chunker handles YouTube links in sources correctly" name="Enhanced Message Chunker handles YouTube links in sources correctly" time="0.001">
    </testcase>
    <testcase classname="Enhanced Message Chunker preserves formatting for multiple source references" name="Enhanced Message Chunker preserves formatting for multiple source references" time="0.001">
    </testcase>
    <testcase classname="Enhanced Message Chunker chunking preserves source references across chunks" name="Enhanced Message Chunker chunking preserves source references across chunks" time="0.012">
    </testcase>
    <testcase classname="Enhanced Message Chunker handles URLs split between chunks" name="Enhanced Message Chunker handles URLs split between chunks" time="0.007">
    </testcase>
  </testsuite>
  <testsuite name="Debouncer" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:52" time="0.351" tests="4">
    <testcase classname="Debouncer debounce should delay function execution" name="Debouncer debounce should delay function execution" time="0.004">
    </testcase>
    <testcase classname="Debouncer debounce should only execute once for multiple rapid calls" name="Debouncer debounce should only execute once for multiple rapid calls" time="0.004">
    </testcase>
    <testcase classname="Debouncer debounce should reset the timer when called again during wait time" name="Debouncer debounce should reset the timer when called again during wait time" time="0.003">
    </testcase>
    <testcase classname="Debouncer debounce should pass arguments to the debounced function" name="Debouncer debounce should pass arguments to the debounced function" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="InputValidator - Sanitization" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:52" time="0.354" tests="9">
    <testcase classname="InputValidator - Sanitization validateAndSanitize should validate and sanitize clean input" name="InputValidator - Sanitization validateAndSanitize should validate and sanitize clean input" time="0.002">
    </testcase>
    <testcase classname="InputValidator - Sanitization validateAndSanitize should sanitize HTML content" name="InputValidator - Sanitization validateAndSanitize should sanitize HTML content" time="0.002">
    </testcase>
    <testcase classname="InputValidator - Sanitization validateAndSanitize should reject dangerous content" name="InputValidator - Sanitization validateAndSanitize should reject dangerous content" time="0.001">
    </testcase>
    <testcase classname="InputValidator - Sanitization validateAndSanitize should handle empty input" name="InputValidator - Sanitization validateAndSanitize should handle empty input" time="0.002">
    </testcase>
    <testcase classname="InputValidator - Sanitization validateAndSanitize should handle null input" name="InputValidator - Sanitization validateAndSanitize should handle null input" time="0.002">
    </testcase>
    <testcase classname="InputValidator - Sanitization validateAndSanitize should validate different input types" name="InputValidator - Sanitization validateAndSanitize should validate different input types" time="0.001">
    </testcase>
    <testcase classname="InputValidator - Sanitization validation patterns should have correct validation patterns" name="InputValidator - Sanitization validation patterns should have correct validation patterns" time="0.001">
    </testcase>
    <testcase classname="InputValidator - Sanitization validation patterns should have correct validation limits" name="InputValidator - Sanitization validation patterns should have correct validation limits" time="0.004">
    </testcase>
    <testcase classname="InputValidator - Sanitization validation patterns should have dangerous patterns defined" name="InputValidator - Sanitization validation patterns should have dangerous patterns defined" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="ConversationManager - Memory and Performance" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:53" time="0.344" tests="5">
    <testcase classname="ConversationManager - Memory and Performance Memory and Performance Edge Cases should handle many concurrent users efficiently" name="ConversationManager - Memory and Performance Memory and Performance Edge Cases should handle many concurrent users efficiently" time="0.013">
    </testcase>
    <testcase classname="ConversationManager - Memory and Performance Memory and Performance Edge Cases should handle rapid successive messages from same user" name="ConversationManager - Memory and Performance Memory and Performance Edge Cases should handle rapid successive messages from same user" time="0.003">
    </testcase>
    <testcase classname="ConversationManager - Memory and Performance Memory and Performance Edge Cases should handle alternating user and assistant messages" name="ConversationManager - Memory and Performance Memory and Performance Edge Cases should handle alternating user and assistant messages" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Memory and Performance Cleanup Operations should cleanup old conversations" name="ConversationManager - Memory and Performance Cleanup Operations should cleanup old conversations" time="0.002">
    </testcase>
    <testcase classname="ConversationManager - Memory and Performance Cleanup Operations should preserve user stats during cleanup" name="ConversationManager - Memory and Performance Cleanup Operations should preserve user stats during cleanup" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="PerformanceTracker - API Call Tracking" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:53" time="0.356" tests="8">
    <testcase classname="PerformanceTracker - API Call Tracking trackApiCall should track successful API call" name="PerformanceTracker - API Call Tracking trackApiCall should track successful API call" time="0.003">
    </testcase>
    <testcase classname="PerformanceTracker - API Call Tracking trackApiCall should log slow operations" name="PerformanceTracker - API Call Tracking trackApiCall should log slow operations" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - API Call Tracking trackApiCall should log very slow operations" name="PerformanceTracker - API Call Tracking trackApiCall should log very slow operations" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - API Call Tracking trackApiCall should track failed API call" name="PerformanceTracker - API Call Tracking trackApiCall should track failed API call" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - API Call Tracking trackApiCall should include metadata in tracking" name="PerformanceTracker - API Call Tracking trackApiCall should include metadata in tracking" time="0.001">
    </testcase>
    <testcase classname="PerformanceTracker - API Call Tracking analyzePerformanceTrends - Basic Cases should return default values for empty metrics" name="PerformanceTracker - API Call Tracking analyzePerformanceTrends - Basic Cases should return default values for empty metrics" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - API Call Tracking analyzePerformanceTrends - Basic Cases should return default values for null metrics" name="PerformanceTracker - API Call Tracking analyzePerformanceTrends - Basic Cases should return default values for null metrics" time="0.002">
    </testcase>
    <testcase classname="PerformanceTracker - API Call Tracking analyzePerformanceTrends - Basic Cases should analyze performance trends correctly" name="PerformanceTracker - API Call Tracking analyzePerformanceTrends - Basic Cases should analyze performance trends correctly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="SecurityMonitor - Threat Analysis" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:54" time="0.381" tests="11">
    <testcase classname="SecurityMonitor - Threat Analysis analyzeSecurityThreats should analyze low-risk message" name="SecurityMonitor - Threat Analysis analyzeSecurityThreats should analyze low-risk message" time="0.003">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis analyzeSecurityThreats should analyze high-risk message with XSS" name="SecurityMonitor - Threat Analysis analyzeSecurityThreats should analyze high-risk message with XSS" time="0.002">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis analyzeSecurityThreats should analyze medium-risk message with suspicious patterns" name="SecurityMonitor - Threat Analysis analyzeSecurityThreats should analyze medium-risk message with suspicious patterns" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis analyzeSecurityThreats should handle message without content" name="SecurityMonitor - Threat Analysis analyzeSecurityThreats should handle message without content" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis analyzeSecurityThreats should handle malformed message object" name="SecurityMonitor - Threat Analysis analyzeSecurityThreats should handle malformed message object" time="0.012">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis logSecurityEvent should log low-level security event" name="SecurityMonitor - Threat Analysis logSecurityEvent should log low-level security event" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis logSecurityEvent should log high-level security event" name="SecurityMonitor - Threat Analysis logSecurityEvent should log high-level security event" time="0.002">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis logSecurityEvent should handle missing event details" name="SecurityMonitor - Threat Analysis logSecurityEvent should handle missing event details" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis logSecurityEvent should throw error for invalid event" name="SecurityMonitor - Threat Analysis logSecurityEvent should throw error for invalid event" time="0.001">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis logSecurityEvent should throw error for event without type" name="SecurityMonitor - Threat Analysis logSecurityEvent should throw error for event without type" time="0.005">
    </testcase>
    <testcase classname="SecurityMonitor - Threat Analysis logSecurityEvent should throw error for event without level" name="SecurityMonitor - Threat Analysis logSecurityEvent should throw error for event without level" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Message Formatter - Basic" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:54" time="0.263" tests="8">
    <testcase classname="Message Formatter - Basic formatResponse should format a response message with default options" name="Message Formatter - Basic formatResponse should format a response message with default options" time="0.002">
    </testcase>
    <testcase classname="Message Formatter - Basic formatResponse should remove excessive whitespace" name="Message Formatter - Basic formatResponse should remove excessive whitespace" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Basic formatResponse should truncate long messages" name="Message Formatter - Basic formatResponse should truncate long messages" time="0.005">
    </testcase>
    <testcase classname="Message Formatter - Basic formatResponse should handle empty messages" name="Message Formatter - Basic formatResponse should handle empty messages" time="0.002">
    </testcase>
    <testcase classname="Message Formatter - Basic formatResponse should handle null or undefined messages" name="Message Formatter - Basic formatResponse should handle null or undefined messages" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Basic formatResponse should handle messages with only whitespace" name="Message Formatter - Basic formatResponse should handle messages with only whitespace" time="0.001">
    </testcase>
    <testcase classname="Message Formatter - Basic formatResponse should preserve single line breaks" name="Message Formatter - Basic formatResponse should preserve single line breaks" time="0">
    </testcase>
    <testcase classname="Message Formatter - Basic formatResponse should handle messages with tabs" name="Message Formatter - Basic formatResponse should handle messages with tabs" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Logger - Critical Coverage Enhancement" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:54" time="0.357" tests="33">
    <testcase classname="Logger - Critical Coverage Enhancement Log Level Filtering should skip debug logs when log level is INFO" name="Logger - Critical Coverage Enhancement Log Level Filtering should skip debug logs when log level is INFO" time="0.004">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Level Filtering should skip info logs when log level is WARN" name="Logger - Critical Coverage Enhancement Log Level Filtering should skip info logs when log level is WARN" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Level Filtering should skip warn logs when log level is ERROR" name="Logger - Critical Coverage Enhancement Log Level Filtering should skip warn logs when log level is ERROR" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Level Filtering should process all log levels when set to DEBUG" name="Logger - Critical Coverage Enhancement Log Level Filtering should process all log levels when set to DEBUG" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Level Filtering should handle invalid log level gracefully" name="Logger - Critical Coverage Enhancement Log Level Filtering should handle invalid log level gracefully" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement File Write Error Handling should handle file write errors gracefully" name="Logger - Critical Coverage Enhancement File Write Error Handling should handle file write errors gracefully" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement File Write Error Handling should continue logging to console when file write fails" name="Logger - Critical Coverage Enhancement File Write Error Handling should continue logging to console when file write fails" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement File Write Error Handling should handle directory creation failure" name="Logger - Critical Coverage Enhancement File Write Error Handling should handle directory creation failure" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should rotate logs when file size exceeds limit" name="Logger - Critical Coverage Enhancement Log Rotation should rotate logs when file size exceeds limit" time="0.005">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should handle stat errors during rotation check" name="Logger - Critical Coverage Enhancement Log Rotation should handle stat errors during rotation check" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should handle readdir errors during cleanup" name="Logger - Critical Coverage Enhancement Log Rotation should handle readdir errors during cleanup" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should handle unlink errors during log cleanup" name="Logger - Critical Coverage Enhancement Log Rotation should handle unlink errors during log cleanup" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should not rotate when file size is under limit" name="Logger - Critical Coverage Enhancement Log Rotation should not rotate when file size is under limit" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should handle non-existent log file during rotation check" name="Logger - Critical Coverage Enhancement Log Rotation should handle non-existent log file during rotation check" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should use custom log size from environment variable" name="Logger - Critical Coverage Enhancement Log Rotation should use custom log size from environment variable" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Log Rotation should use default size when custom size is invalid" name="Logger - Critical Coverage Enhancement Log Rotation should use default size when custom size is invalid" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Data Logging should log data object when provided to info" name="Logger - Critical Coverage Enhancement Data Logging should log data object when provided to info" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Data Logging should log data object when provided to warn" name="Logger - Critical Coverage Enhancement Data Logging should log data object when provided to warn" time="0.003">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Data Logging should log data object when provided to debug" name="Logger - Critical Coverage Enhancement Data Logging should log data object when provided to debug" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Data Logging should handle null data gracefully" name="Logger - Critical Coverage Enhancement Data Logging should handle null data gracefully" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Data Logging should handle undefined data gracefully" name="Logger - Critical Coverage Enhancement Data Logging should handle undefined data gracefully" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Data Logging should handle circular reference data gracefully" name="Logger - Critical Coverage Enhancement Data Logging should handle circular reference data gracefully" time="0.005">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Error Method Context should handle error method with request details" name="Logger - Critical Coverage Enhancement Error Method Context should handle error method with request details" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Error Method Context should handle errors without response" name="Logger - Critical Coverage Enhancement Error Method Context should handle errors without response" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Error Method Context should handle errors without stack trace" name="Logger - Critical Coverage Enhancement Error Method Context should handle errors without stack trace" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Error Method Context should handle simple data objects as errors" name="Logger - Critical Coverage Enhancement Error Method Context should handle simple data objects as errors" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Error Method Context should handle general errors with stack traces" name="Logger - Critical Coverage Enhancement Error Method Context should handle general errors with stack traces" time="0.018">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle very long messages" name="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle very long messages" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle messages with special characters" name="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle messages with special characters" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle empty string messages" name="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle empty string messages" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle numeric messages" name="Logger - Critical Coverage Enhancement Message Formatting Edge Cases should handle numeric messages" time="0.001">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Test Environment Handling should not write to file in test environment" name="Logger - Critical Coverage Enhancement Test Environment Handling should not write to file in test environment" time="0.002">
    </testcase>
    <testcase classname="Logger - Critical Coverage Enhancement Test Environment Handling should not create directory in test environment" name="Logger - Critical Coverage Enhancement Test Environment Handling should not create directory in test environment" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="EnhancedCache - Statistics" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:55" time="0.308" tests="13">
    <testcase classname="EnhancedCache - Statistics Statistics and Metrics should track hit and miss statistics" name="EnhancedCache - Statistics Statistics and Metrics should track hit and miss statistics" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Statistics and Metrics should track memory usage" name="EnhancedCache - Statistics Statistics and Metrics should track memory usage" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Statistics and Metrics should track eviction count" name="EnhancedCache - Statistics Statistics and Metrics should track eviction count" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Statistics and Metrics should provide detailed cache information" name="EnhancedCache - Statistics Statistics and Metrics should provide detailed cache information" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Error Handling should handle invalid keys gracefully" name="EnhancedCache - Statistics Error Handling should handle invalid keys gracefully" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Error Handling should handle invalid values gracefully" name="EnhancedCache - Statistics Error Handling should handle invalid values gracefully" time="0.007">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Error Handling should handle cache operations during shutdown" name="EnhancedCache - Statistics Error Handling should handle cache operations during shutdown" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Cache Entry should create cache entries with correct properties" name="EnhancedCache - Statistics Cache Entry should create cache entries with correct properties" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Cache Entry should track access count correctly" name="EnhancedCache - Statistics Cache Entry should track access count correctly" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Cache Entry should update last accessed time on get" name="EnhancedCache - Statistics Cache Entry should update last accessed time on get" time="0.023">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Configuration should accept custom configuration" name="EnhancedCache - Statistics Configuration should accept custom configuration" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Configuration should use default configuration when none provided" name="EnhancedCache - Statistics Configuration should use default configuration when none provided" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache - Statistics Configuration should handle invalid configuration gracefully" name="EnhancedCache - Statistics Configuration should handle invalid configuration gracefully" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="EnhancedCache - Basic Operations" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:55" time="0.279" tests="7">
    <testcase classname="EnhancedCache - Basic Operations Basic Operations should set and get values" name="EnhancedCache - Basic Operations Basic Operations should set and get values" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Basic Operations Basic Operations should return null for non-existent keys" name="EnhancedCache - Basic Operations Basic Operations should return null for non-existent keys" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Basic Operations Basic Operations should check if key exists by getting it" name="EnhancedCache - Basic Operations Basic Operations should check if key exists by getting it" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - Basic Operations Basic Operations should delete keys" name="EnhancedCache - Basic Operations Basic Operations should delete keys" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache - Basic Operations Basic Operations should clear all entries" name="EnhancedCache - Basic Operations Basic Operations should clear all entries" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache - Basic Operations Basic Operations should handle different value types" name="EnhancedCache - Basic Operations Basic Operations should handle different value types" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache - Basic Operations Basic Operations should update existing keys" name="EnhancedCache - Basic Operations Basic Operations should update existing keys" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Cache Pruner" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:55" time="0.309" tests="8">
    <testcase classname="Cache Pruner _initializePruningSchedule should set up interval based on config" name="Cache Pruner _initializePruningSchedule should set up interval based on config" time="0.007">
    </testcase>
    <testcase classname="Cache Pruner _initializePruningSchedule should execute pruneCache on interval" name="Cache Pruner _initializePruningSchedule should execute pruneCache on interval" time="0.002">
    </testcase>
    <testcase classname="Cache Pruner pruneCache should call both pruning methods" name="Cache Pruner pruneCache should call both pruning methods" time="0.003">
    </testcase>
    <testcase classname="Cache Pruner pruneCache should handle errors" name="Cache Pruner pruneCache should handle errors" time="0.01">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should prune when over max entries" name="Cache Pruner _pruneQuestionCache should prune when over max entries" time="0.002">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should not prune when under max entries" name="Cache Pruner _pruneQuestionCache should not prune when under max entries" time="0.002">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should handle missing file gracefully" name="Cache Pruner _pruneQuestionCache should handle missing file gracefully" time="0.002">
    </testcase>
    <testcase classname="Cache Pruner getStatus should return correct status information" name="Cache Pruner getStatus should return correct status information" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Discord mock" errors="0" failures="0" skipped="0" timestamp="2025-10-01T20:59:56" time="0.271" tests="1">
    <testcase classname="Discord mock Mock is valid" name="Discord mock Mock is valid" time="0.002">
    </testcase>
  </testsuite>
</testsuites>