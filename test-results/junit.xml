<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="223" failures="15" errors="0" time="37.736">
  <testsuite name="Logger" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="15.043" tests="9">
    <testcase classname="Logger logs debug messages" name="Logger logs debug messages" time="0.204">
    </testcase>
    <testcase classname="Logger logs debug messages with data" name="Logger logs debug messages with data" time="0.079">
    </testcase>
    <testcase classname="Logger logs info messages" name="Logger logs info messages" time="0.004">
    </testcase>
    <testcase classname="Logger logs warning messages" name="Logger logs warning messages" time="0.01">
    </testcase>
    <testcase classname="Logger logs error messages" name="Logger logs error messages" time="0.004">
    </testcase>
    <testcase classname="Logger logs error messages with error object" name="Logger logs error messages with error object" time="0.131">
    </testcase>
    <testcase classname="Logger handles API errors" name="Logger handles API errors" time="0.003">
    </testcase>
    <testcase classname="Logger provides user-friendly error messages" name="Logger provides user-friendly error messages" time="0.005">
    </testcase>
    <testcase classname="Logger handles different error types properly" name="Logger handles different error types properly" time="0.016">
    </testcase>
  </testsuite>
  <testsuite name="EmojiManager" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="15.936" tests="7">
    <testcase classname="EmojiManager adds emojis to response based on keywords" name="EmojiManager adds emojis to response based on keywords" time="0.17">
    </testcase>
    <testcase classname="EmojiManager adds multiple emojis when multiple keywords are found" name="EmojiManager adds multiple emojis when multiple keywords are found" time="0.052">
    </testcase>
    <testcase classname="EmojiManager does not add emojis when no keywords are found" name="EmojiManager does not add emojis when no keywords are found" time="0.007">
    </testcase>
    <testcase classname="EmojiManager gets reactions for a message based on keywords" name="EmojiManager gets reactions for a message based on keywords" time="0.004">
    </testcase>
    <testcase classname="EmojiManager returns empty array when no reaction keywords are found" name="EmojiManager returns empty array when no reaction keywords are found" time="0.002">
    </testcase>
    <testcase classname="EmojiManager adds reactions to a message" name="EmojiManager adds reactions to a message" time="0.028">
    </testcase>
    <testcase classname="EmojiManager handles errors when adding reactions" name="EmojiManager handles errors when adding reactions" time="0.02">
    </testcase>
  </testsuite>
  <testsuite name="Conversation Manager" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="15.843" tests="15">
    <testcase classname="Conversation Manager getHistory returns empty array for new users" name="Conversation Manager getHistory returns empty array for new users" time="0.189">
    </testcase>
    <testcase classname="Conversation Manager getHistory returns conversation history for existing users" name="Conversation Manager getHistory returns conversation history for existing users" time="0.011">
    </testcase>
    <testcase classname="Conversation Manager addMessage adds a message to conversation history" name="Conversation Manager addMessage adds a message to conversation history" time="0.016">
    </testcase>
    <testcase classname="Conversation Manager addMessage updates user stats when adding a user message" name="Conversation Manager addMessage updates user stats when adding a user message" time="0.002">
    </testcase>
    <testcase classname="Conversation Manager addMessage trims conversation history when it exceeds the maximum length" name="Conversation Manager addMessage trims conversation history when it exceeds the maximum length" time="0.032">
    </testcase>
    <testcase classname="Conversation Manager clearHistory clears conversation history for a user" name="Conversation Manager clearHistory clears conversation history for a user" time="0.005">
    </testcase>
    <testcase classname="Conversation Manager isRateLimited returns false for users with no recent messages" name="Conversation Manager isRateLimited returns false for users with no recent messages" time="0.009">
    </testcase>
    <testcase classname="Conversation Manager isRateLimited returns true for users with recent messages" name="Conversation Manager isRateLimited returns true for users with recent messages" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager isRateLimited returns false after the rate limit window passes" name="Conversation Manager isRateLimited returns false after the rate limit window passes" time="0">
    </testcase>
    <testcase classname="Conversation Manager getUserStats returns default stats for new users" name="Conversation Manager getUserStats returns default stats for new users" time="0.015">
    </testcase>
    <testcase classname="Conversation Manager getUserStats returns user stats for existing users" name="Conversation Manager getUserStats returns user stats for existing users" time="0.015">
    </testcase>
    <testcase classname="Conversation Manager updateUserStats increments message count" name="Conversation Manager updateUserStats increments message count" time="0.011">
    </testcase>
    <testcase classname="Conversation Manager updateUserStats increments summary count" name="Conversation Manager updateUserStats increments summary count" time="0.038">
    </testcase>
    <testcase classname="Conversation Manager destroy clears intervals and saves user stats" name="Conversation Manager destroy clears intervals and saves user stats" time="0.062">
    </testcase>
    <testcase classname="Conversation Manager destroy handles errors when saving user stats during shutdown" name="Conversation Manager destroy handles errors when saving user stats during shutdown" time="0.133">
    </testcase>
  </testsuite>
  <testsuite name="Cache Pruner" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="16.464" tests="8">
    <testcase classname="Cache Pruner _initializePruningSchedule should set up interval based on config" name="Cache Pruner _initializePruningSchedule should set up interval based on config" time="0.321">
    </testcase>
    <testcase classname="Cache Pruner _initializePruningSchedule should execute pruneCache on interval" name="Cache Pruner _initializePruningSchedule should execute pruneCache on interval" time="0.006">
    </testcase>
    <testcase classname="Cache Pruner pruneCache should call both pruning methods" name="Cache Pruner pruneCache should call both pruning methods" time="0.018">
    </testcase>
    <testcase classname="Cache Pruner pruneCache should handle errors" name="Cache Pruner pruneCache should handle errors" time="0.25">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should prune when over max entries" name="Cache Pruner _pruneQuestionCache should prune when over max entries" time="0.015">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should not prune when under max entries" name="Cache Pruner _pruneQuestionCache should not prune when under max entries" time="0.039">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should handle missing file gracefully" name="Cache Pruner _pruneQuestionCache should handle missing file gracefully" time="0.007">
    </testcase>
    <testcase classname="Cache Pruner getStatus should return correct status information" name="Cache Pruner getStatus should return correct status information" time="0.062">
    </testcase>
  </testsuite>
  <testsuite name="Logger - Branch Coverage Tests" errors="0" failures="3" skipped="0" timestamp="2025-09-22T13:10:51" time="16.74" tests="12">
    <testcase classname="Logger - Branch Coverage Tests skips debug logs when log level is higher" name="Logger - Branch Coverage Tests skips debug logs when log level is higher" time="0.321">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests skips info logs when log level is higher" name="Logger - Branch Coverage Tests skips info logs when log level is higher" time="0.07">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests skips warning logs when log level is higher" name="Logger - Branch Coverage Tests skips warning logs when log level is higher" time="0.016">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles directory creation failure" name="Logger - Branch Coverage Tests handles directory creation failure" time="0.033">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests tests log file rotation" name="Logger - Branch Coverage Tests tests log file rotation" time="0.076">
      <failure>Error: expect(jest.fn()).toHaveBeenCalled()

Expected number of calls: &gt;= 1
Received number of calls:    0
    at Object.toHaveBeenCalled (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\logger-branch-coverage.test.js:141:31)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles custom log size limit" name="Logger - Branch Coverage Tests handles custom log size limit" time="0.039">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles file stat errors during log rotation" name="Logger - Branch Coverage Tests handles file stat errors during log rotation" time="0.014">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles request errors in error method" name="Logger - Branch Coverage Tests handles request errors in error method" time="0.007">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles invalid log levels" name="Logger - Branch Coverage Tests handles invalid log levels" time="0.013">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles file write errors" name="Logger - Branch Coverage Tests handles file write errors" time="0.04">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles errors during log rotation" name="Logger - Branch Coverage Tests handles errors during log rotation" time="0.022">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: &quot;Log rotation failed:&quot;, ObjectContaining {&quot;message&quot;: &quot;Rename failed&quot;}
Received: &quot;Log rotation failed:&quot;, [ReferenceError: config is not defined]

Number of calls: 1
    at Object.toHaveBeenCalledWith (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\logger-branch-coverage.test.js:252:31)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles unlink errors during log cleanup" name="Logger - Branch Coverage Tests handles unlink errors during log cleanup" time="0.033">
      <failure>Error: expect(jest.fn()).toHaveBeenCalled()

Expected number of calls: &gt;= 1
Received number of calls:    0
    at Object.toHaveBeenCalled (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\logger-branch-coverage.test.js:283:31)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Perplexity Service" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="17.18" tests="4">
    <testcase classname="Perplexity Service sendChatRequest sends a request to the API with correct parameters" name="Perplexity Service sendChatRequest sends a request to the API with correct parameters" time="0.252">
    </testcase>
    <testcase classname="Perplexity Service sendChatRequest throws an error when API request fails" name="Perplexity Service sendChatRequest throws an error when API request fails" time="0.282">
    </testcase>
    <testcase classname="Perplexity Service generateSummary generates a summary with correct system prompt" name="Perplexity Service generateSummary generates a summary with correct system prompt" time="0.04">
    </testcase>
    <testcase classname="Perplexity Service generateTextSummary generates a text summary with correct system prompt" name="Perplexity Service generateTextSummary generates a text summary with correct system prompt" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Bot Error Handling" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:06" time="2.333" tests="2">
    <testcase classname="Bot Error Handling should log uncaught exceptions" name="Bot Error Handling should log uncaught exceptions" time="0.004">
    </testcase>
    <testcase classname="Bot Error Handling should log unhandled promise rejections" name="Bot Error Handling should log unhandled promise rejections" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="index.js - Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="17.269" tests="19">
    <testcase classname="index.js - Branch Coverage normal initialization - no PI optimizations" name="index.js - Branch Coverage normal initialization - no PI optimizations" time="0.484">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles error events" name="index.js - Branch Coverage handles error events" time="0.124">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles warn events" name="index.js - Branch Coverage handles warn events" time="0.053">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles interaction events" name="index.js - Branch Coverage handles interaction events" time="0.041">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles ready event with slash command registration failure" name="index.js - Branch Coverage handles ready event with slash command registration failure" time="0.075">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles PI optimizations" name="index.js - Branch Coverage handles PI optimizations" time="0.04">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles PI optimization failures" name="index.js - Branch Coverage handles PI optimization failures" time="0.029">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles login failures in production mode" name="index.js - Branch Coverage handles login failures in production mode" time="0.033">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles shutdown process" name="index.js - Branch Coverage handles shutdown process" time="0.041">
    </testcase>
    <testcase classname="index.js - Branch Coverage bootWithOptimizations function should handle errors in Pi optimization initialization" name="index.js - Branch Coverage bootWithOptimizations function should handle errors in Pi optimization initialization" time="0.366">
    </testcase>
    <testcase classname="index.js - Branch Coverage bootWithOptimizations function should not call initialization when PI_OPTIMIZATIONS is disabled" name="index.js - Branch Coverage bootWithOptimizations function should not call initialization when PI_OPTIMIZATIONS is disabled" time="0.08">
    </testcase>
    <testcase classname="index.js - Branch Coverage registerSlashCommands function should handle client not being ready" name="index.js - Branch Coverage registerSlashCommands function should handle client not being ready" time="0.067">
    </testcase>
    <testcase classname="index.js - Branch Coverage registerSlashCommands function should handle errors during slash command registration" name="index.js - Branch Coverage registerSlashCommands function should handle errors during slash command registration" time="0.099">
    </testcase>
    <testcase classname="index.js - Branch Coverage Multiple shutdown attempts should prevent multiple simultaneous shutdown attempts" name="index.js - Branch Coverage Multiple shutdown attempts should prevent multiple simultaneous shutdown attempts" time="0.072">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle error events" name="index.js - Branch Coverage Discord client event handlers should handle error events" time="0.015">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle warning events" name="index.js - Branch Coverage Discord client event handlers should handle warning events" time="0.054">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle non-command interactions" name="index.js - Branch Coverage Discord client event handlers should handle non-command interactions" time="0.046">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle command interactions" name="index.js - Branch Coverage Discord client event handlers should handle command interactions" time="0.038">
    </testcase>
    <testcase classname="index.js - Branch Coverage Login process should handle login failure in production mode" name="index.js - Branch Coverage Login process should handle login failure in production mode" time="0.061">
    </testcase>
  </testsuite>
  <testsuite name="PerplexitySecure Service" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="18.254" tests="14">
    <testcase classname="PerplexitySecure Service generateChatResponse should handle rate limiting with 429 status code" name="PerplexitySecure Service generateChatResponse should handle rate limiting with 429 status code" time="0.518">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should handle server errors with 500+ status code" name="PerplexitySecure Service generateChatResponse should handle server errors with 500+ status code" time="0.074">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should handle network errors" name="PerplexitySecure Service generateChatResponse should handle network errors" time="0.123">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should handle parsing errors in response" name="PerplexitySecure Service generateChatResponse should handle parsing errors in response" time="0.056">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should successfully generate a chat response" name="PerplexitySecure Service generateChatResponse should successfully generate a chat response" time="0.036">
    </testcase>
    <testcase classname="PerplexitySecure Service generateSummary should generate a summary of conversation history" name="PerplexitySecure Service generateSummary should generate a summary of conversation history" time="0.003">
    </testcase>
    <testcase classname="PerplexitySecure Service generateSummary should handle errors in summary generation" name="PerplexitySecure Service generateSummary should handle errors in summary generation" time="0.014">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should return cached response if available" name="PerplexitySecure Service question caching should return cached response if available" time="0.032">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should save response to cache on successful API call" name="PerplexitySecure Service question caching should save response to cache on successful API call" time="0.008">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should handle cache directory creation when it doesnt exist" name="PerplexitySecure Service question caching should handle cache directory creation when it doesnt exist" time="0.077">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should skip caching when disabled" name="PerplexitySecure Service question caching should skip caching when disabled" time="0.003">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should handle expired cache entries" name="PerplexitySecure Service question caching should handle expired cache entries" time="0.039">
    </testcase>
    <testcase classname="PerplexitySecure Service file permission security should set secure file permissions when writing to cache" name="PerplexitySecure Service file permission security should set secure file permissions when writing to cache" time="0.023">
    </testcase>
    <testcase classname="PerplexitySecure Service retry mechanism should retry API calls on transient errors" name="PerplexitySecure Service retry mechanism should retry API calls on transient errors" time="1.073">
    </testcase>
  </testsuite>
  <testsuite name="Chat Service" errors="0" failures="4" skipped="0" timestamp="2025-09-22T13:10:51" time="18.268" tests="6">
    <testcase classname="Chat Service handles a normal message and sends a reply" name="Chat Service handles a normal message and sends a reply" time="0.233">
      <failure>Error: expect(jest.fn()).toHaveBeenCalled()

Expected number of calls: &gt;= 1
Received number of calls:    0
    at Object.toHaveBeenCalled (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\chat-service.test.js:57:52)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Chat Service calls command handler for messages starting with &quot;!&quot;" name="Chat Service calls command handler for messages starting with &quot;!&quot;" time="0.039">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: {&quot;author&quot;: {&quot;bot&quot;: false, &quot;id&quot;: &quot;123&quot;}, &quot;channel&quot;: {&quot;sendTyping&quot;: [Function mockConstructor]}, &quot;content&quot;: &quot;!help&quot;, &quot;react&quot;: [Function mockConstructor], &quot;reply&quot;: [Function mockConstructor]}

Number of calls: 0
    at Object.toHaveBeenCalledWith (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\chat-service.test.js:68:46)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Chat Service ignores messages from bots" name="Chat Service ignores messages from bots" time="0.024">
    </testcase>
    <testcase classname="Chat Service applies rate limiting" name="Chat Service applies rate limiting" time="0.006">
      <failure>Error: expect(jest.fn()).toHaveBeenCalled()

Expected number of calls: &gt;= 1
Received number of calls:    0
    at Object.toHaveBeenCalled (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\chat-service.test.js:88:27)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Chat Service handles API errors gracefully" name="Chat Service handles API errors gracefully" time="0.04">
      <failure>Error: expect(jest.fn()).toHaveBeenCalledWith(...expected)

Expected: StringContaining &quot;error&quot;

Number of calls: 0
    at Object.toHaveBeenCalledWith (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\chat-service.test.js:98:27)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Chat Service adds the bot response to conversation history" name="Chat Service adds the bot response to conversation history" time="0.008">
    </testcase>
  </testsuite>
  <testsuite name="Lazy Loader" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:08" time="3.083" tests="4">
    <testcase classname="Lazy Loader should return a function that loads a module when called" name="Lazy Loader should return a function that loads a module when called" time="0.021">
    </testcase>
    <testcase classname="Lazy Loader should handle modules with methods" name="Lazy Loader should handle modules with methods" time="0.091">
    </testcase>
    <testcase classname="Lazy Loader should memoize the loaded module" name="Lazy Loader should memoize the loaded module" time="0.083">
    </testcase>
    <testcase classname="Lazy Loader should handle errors in the loader function" name="Lazy Loader should handle errors in the loader function" time="0.187">
    </testcase>
  </testsuite>
  <testsuite name="Pi Detector" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:08" time="3.122" tests="21">
    <testcase classname="Pi Detector detectPiModel should detect Raspberry Pi 4" name="Pi Detector detectPiModel should detect Raspberry Pi 4" time="0.055">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should detect Raspberry Pi 3" name="Pi Detector detectPiModel should detect Raspberry Pi 3" time="0.01">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should detect Raspberry Pi 5" name="Pi Detector detectPiModel should detect Raspberry Pi 5" time="0.005">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle CPU frequency detection" name="Pi Detector detectPiModel should handle CPU frequency detection" time="0.037">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle temperature reading failure" name="Pi Detector detectPiModel should handle temperature reading failure" time="0.005">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle non-Pi systems" name="Pi Detector detectPiModel should handle non-Pi systems" time="0.005">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle non-Linux systems" name="Pi Detector detectPiModel should handle non-Linux systems" time="0.002">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle errors gracefully" name="Pi Detector detectPiModel should handle errors gracefully" time="0.025">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 2GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 2GB" time="0.029">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 1GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 1GB" time="0.003">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 4GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 4GB" time="0.005">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 3" name="Pi Detector generateOptimizedConfig should generate config for Pi 3" time="0.006">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 4GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 4GB" time="0.015">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 8GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 8GB" time="0.003">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for unknown Pi model" name="Pi Detector generateOptimizedConfig should generate config for unknown Pi model" time="0.006">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for non-Pi systems" name="Pi Detector generateOptimizedConfig should generate config for non-Pi systems" time="0.013">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should initialize and return optimized config" name="Pi Detector initPiOptimizations should initialize and return optimized config" time="0.012">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should respect environment variable overrides" name="Pi Detector initPiOptimizations should respect environment variable overrides" time="0.015">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should handle errors and return safe defaults" name="Pi Detector initPiOptimizations should handle errors and return safe defaults" time="0.007">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should not initialize Pi optimizations when disabled by environment variable" name="Pi Detector initPiOptimizations should not initialize Pi optimizations when disabled by environment variable" time="0.033">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should use environment-provided values when initialization fails" name="Pi Detector initPiOptimizations should use environment-provided values when initialization fails" time="0.006">
    </testcase>
  </testsuite>
  <testsuite name="Enhanced Message Chunker" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:08" time="3.645" tests="5">
    <testcase classname="Enhanced Message Chunker processes source references correctly" name="Enhanced Message Chunker processes source references correctly" time="0.023">
    </testcase>
    <testcase classname="Enhanced Message Chunker handles YouTube links in sources correctly" name="Enhanced Message Chunker handles YouTube links in sources correctly" time="0.004">
    </testcase>
    <testcase classname="Enhanced Message Chunker preserves formatting for multiple source references" name="Enhanced Message Chunker preserves formatting for multiple source references" time="0.011">
    </testcase>
    <testcase classname="Enhanced Message Chunker chunking preserves source references across chunks" name="Enhanced Message Chunker chunking preserves source references across chunks" time="0.015">
    </testcase>
    <testcase classname="Enhanced Message Chunker handles URLs split between chunks" name="Enhanced Message Chunker handles URLs split between chunks" time="0.023">
    </testcase>
  </testsuite>
  <testsuite name="Message Formatter" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:09" time="2.804" tests="7">
    <testcase classname="Message Formatter formatResponse should format a response message with default options" name="Message Formatter formatResponse should format a response message with default options" time="0.033">
    </testcase>
    <testcase classname="Message Formatter formatResponse should remove excessive whitespace" name="Message Formatter formatResponse should remove excessive whitespace" time="0.006">
    </testcase>
    <testcase classname="Message Formatter formatResponse should truncate long messages" name="Message Formatter formatResponse should truncate long messages" time="0.041">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should return original embed when not in compact mode" name="Message Formatter createCompactEmbed should return original embed when not in compact mode" time="0.004">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should simplify description in compact mode" name="Message Formatter createCompactEmbed should simplify description in compact mode" time="0.046">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should limit fields in compact mode" name="Message Formatter createCompactEmbed should limit fields in compact mode" time="0.003">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should remove footer in low CPU mode" name="Message Formatter createCompactEmbed should remove footer in low CPU mode" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Performance Monitor" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:09" time="3.452" tests="13">
    <testcase classname="Performance Monitor initialize should start monitoring in production environment" name="Performance Monitor initialize should start monitoring in production environment" time="0.011">
    </testcase>
    <testcase classname="Performance Monitor initialize should not start monitoring when disabled" name="Performance Monitor initialize should not start monitoring when disabled" time="0.005">
    </testcase>
    <testcase classname="Performance Monitor initialize should not start monitoring in non-production environment" name="Performance Monitor initialize should not start monitoring in non-production environment" time="0.017">
    </testcase>
    <testcase classname="Performance Monitor shutdown should clear the interval when shutdown is called" name="Performance Monitor shutdown should clear the interval when shutdown is called" time="0.004">
    </testcase>
    <testcase classname="Performance Monitor shutdown should do nothing if already stopped" name="Performance Monitor shutdown should do nothing if already stopped" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor throttle functions getThrottleFactor should return current factor when enabled" name="Performance Monitor throttle functions getThrottleFactor should return current factor when enabled" time="0.002">
    </testcase>
    <testcase classname="Performance Monitor throttle functions getThrottleFactor should return 1 when disabled" name="Performance Monitor throttle functions getThrottleFactor should return 1 when disabled" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor throttle functions throttleTime should multiply by throttle factor when enabled" name="Performance Monitor throttle functions throttleTime should multiply by throttle factor when enabled" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor throttle functions throttleTime should not throttle below minimum valid interval" name="Performance Monitor throttle functions throttleTime should not throttle below minimum valid interval" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor throttle functions throttleTask should apply delay based on throttle factor" name="Performance Monitor throttle functions throttleTask should apply delay based on throttle factor" time="0.008">
    </testcase>
    <testcase classname="Performance Monitor _getCpuInfo should calculate idle and total CPU time" name="Performance Monitor _getCpuInfo should calculate idle and total CPU time" time="0.004">
    </testcase>
    <testcase classname="Performance Monitor _checkPerformance should calculate CPU usage and update state" name="Performance Monitor _checkPerformance should calculate CPU usage and update state" time="0.009">
    </testcase>
    <testcase classname="Performance Monitor _checkPerformance should handle errors gracefully" name="Performance Monitor _checkPerformance should handle errors gracefully" time="0.149">
    </testcase>
  </testsuite>
  <testsuite name="DataStorage" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:09" time="2.812" tests="9">
    <testcase classname="DataStorage init should create data directory if it does not exist" name="DataStorage init should create data directory if it does not exist" time="0.048">
    </testcase>
    <testcase classname="DataStorage init should not create directory if already initialized" name="DataStorage init should not create directory if already initialized" time="0.003">
    </testcase>
    <testcase classname="DataStorage init should throw and log error if mkdir fails" name="DataStorage init should throw and log error if mkdir fails" time="0.191">
    </testcase>
    <testcase classname="DataStorage saveUserStats should save user stats to file" name="DataStorage saveUserStats should save user stats to file" time="0.008">
    </testcase>
    <testcase classname="DataStorage saveUserStats should log error if writeFile fails" name="DataStorage saveUserStats should log error if writeFile fails" time="0.007">
    </testcase>
    <testcase classname="DataStorage loadUserStats should load user stats from file" name="DataStorage loadUserStats should load user stats from file" time="0.012">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object if file does not exist" name="DataStorage loadUserStats should return empty object if file does not exist" time="0.003">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object and log error if readFile fails for other reasons" name="DataStorage loadUserStats should return empty object and log error if readFile fails for other reasons" time="0.002">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object and log error if JSON parsing fails" name="DataStorage loadUserStats should return empty object and log error if JSON parsing fails" time="0.012">
    </testcase>
  </testsuite>
  <testsuite name="Connection Throttler" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:08" time="3.28" tests="5">
    <testcase classname="Connection Throttler executeRequest should execute requests immediately when under max connections" name="Connection Throttler executeRequest should execute requests immediately when under max connections" time="0.007">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should queue requests when at max connections" name="Connection Throttler executeRequest should queue requests when at max connections" time="0.007">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should handle errors in requests" name="Connection Throttler executeRequest should handle errors in requests" time="0.111">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should process next queue item after completion" name="Connection Throttler executeRequest should process next queue item after completion" time="0.005">
    </testcase>
    <testcase classname="Connection Throttler clearQueue should clear all queued requests" name="Connection Throttler clearQueue should clear all queued requests" time="0.028">
    </testcase>
  </testsuite>
  <testsuite name="appendEmoji" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:10" time="2.33" tests="8">
    <testcase classname="appendEmoji adds the correct emoji for known keywords" name="appendEmoji adds the correct emoji for known keywords" time="0.053">
    </testcase>
    <testcase classname="appendEmoji does not modify the text if no keyword is present" name="appendEmoji does not modify the text if no keyword is present" time="0.001">
    </testcase>
    <testcase classname="appendEmoji is case-insensitive" name="appendEmoji is case-insensitive" time="0.01">
    </testcase>
    <testcase classname="appendEmoji can add multiple emojis" name="appendEmoji can add multiple emojis" time="0.001">
    </testcase>
    <testcase classname="appendEmoji does not add emoji for keywords inside other words" name="appendEmoji does not add emoji for keywords inside other words" time="0.002">
    </testcase>
    <testcase classname="appendEmoji adds all matching emojis in correct order" name="appendEmoji adds all matching emojis in correct order" time="0.003">
    </testcase>
    <testcase classname="appendEmoji handles empty string" name="appendEmoji handles empty string" time="0.002">
    </testcase>
    <testcase classname="appendEmoji handles string with only emojis as keywords" name="appendEmoji handles string with only emojis as keywords" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Bot Initialization" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="21.436" tests="2">
    <testcase classname="Bot Initialization should create a Discord client and log in" name="Bot Initialization should create a Discord client and log in" time="5.738">
    </testcase>
    <testcase classname="Bot Initialization should register event handlers" name="Bot Initialization should register event handlers" time="0.16">
    </testcase>
  </testsuite>
  <testsuite name="Test Utilities" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:10" time="2.595" tests="5">
    <testcase classname="Test Utilities createMockMessage creates a default mock message with expected properties" name="Test Utilities createMockMessage creates a default mock message with expected properties" time="0.035">
    </testcase>
    <testcase classname="Test Utilities createMockMessage allows custom options" name="Test Utilities createMockMessage allows custom options" time="0.003">
    </testcase>
    <testcase classname="Test Utilities createMockInteraction creates a default mock interaction with expected properties" name="Test Utilities createMockInteraction creates a default mock interaction with expected properties" time="0.015">
    </testcase>
    <testcase classname="Test Utilities createMockInteraction allows custom options" name="Test Utilities createMockInteraction allows custom options" time="0.005">
    </testcase>
    <testcase classname="Test Utilities resetMocks resets all mocks" name="Test Utilities resetMocks resets all mocks" time="0.014">
    </testcase>
  </testsuite>
  <testsuite name="Config" errors="0" failures="5" skipped="0" timestamp="2025-09-22T13:10:51" time="21.343" tests="7">
    <testcase classname="Config exports required configuration settings" name="Config exports required configuration settings" time="0.337">
      <failure>Error: expect(received).toHaveProperty(path)

Expected path: &quot;REACTIONS&quot;
Received path: []

Received value: {&quot;API&quot;: {&quot;PERPLEXITY&quot;: {&quot;BASE_URL&quot;: &quot;https://api.perplexity.ai&quot;, &quot;DEFAULT_MODEL&quot;: &quot;llama-3.1-sonar-small-128k-online&quot;, &quot;DEFAULT_TEMPERATURE&quot;: 0.7, &quot;ENDPOINTS&quot;: {&quot;CHAT_COMPLETIONS&quot;: &quot;/chat/completions&quot;}, &quot;MAX_TOKENS&quot;: {&quot;CHAT&quot;: 2000, &quot;SUMMARY&quot;: 1000}}}, &quot;CACHE&quot;: {&quot;CLEANUP_INTERVAL_MS&quot;: 60000, &quot;CLEANUP_PERCENTAGE&quot;: 0.2, &quot;DEFAULT_MAX_ENTRIES&quot;: 1000, &quot;DEFAULT_TTL_MS&quot;: 300000, &quot;MAX_AGE_MS&quot;: 86400000, &quot;MAX_MEMORY_MB&quot;: 50}, &quot;COLORS&quot;: {&quot;ERROR&quot;: &quot;#ED4245&quot;, &quot;PRIMARY&quot;: &quot;#5865F2&quot;, &quot;SUCCESS&quot;: &quot;#57F287&quot;, &quot;WARNING&quot;: &quot;#FEE75C&quot;}, &quot;DISCORD_BOT_TOKEN&quot;: &quot;test-token&quot;, &quot;EMOJI_REACTIONS&quot;: {&quot;happy&quot;: &quot;😊&quot;, &quot;hello&quot;: &quot;👋&quot;, &quot;love&quot;: &quot;❤️&quot;, &quot;sad&quot;: &quot;😢&quot;, &quot;thanks&quot;: &quot;🙏&quot;, &quot;welcome&quot;: &quot;👋&quot;}, &quot;FILE_PERMISSIONS&quot;: {&quot;DIRECTORY&quot;: 493, &quot;READ&quot;: 420, &quot;WRITE&quot;: 420}, &quot;LOGGING&quot;: {&quot;DEFAULT_MAX_SIZE_MB&quot;: 10, &quot;FILE_ENABLED&quot;: false, &quot;LEVEL&quot;: &quot;info&quot;, &quot;MAX_LOG_FILES&quot;: 5}, &quot;MAX_HISTORY&quot;: 20, &quot;MEMORY&quot;: {&quot;CHECK_INTERVAL_MS&quot;: 30000, &quot;DEFAULT_CRITICAL_MB&quot;: 150, &quot;DEFAULT_LIMIT_MB&quot;: 100, &quot;GC_COOLDOWN_MS&quot;: 5000, &quot;PRESSURE_TEST_SIZE&quot;: 1024}, &quot;MESSAGE_LIMITS&quot;: {&quot;CHUNK_DELAY_MS&quot;: 1000, &quot;DISCORD_MAX_LENGTH&quot;: 2000, &quot;EMBED_DESCRIPTION_MAX_LENGTH&quot;: 2048, &quot;EMBED_MAX_LENGTH&quot;: 4096, &quot;ERROR_MESSAGE_MAX_LENGTH&quot;: 500, &quot;MAX_PARAGRAPH_LENGTH&quot;: 1000, &quot;SAFE_CHUNK_OVERHEAD&quot;: 100}, &quot;PERFORMANCE&quot;: {&quot;BACKOFF_MAX_MS&quot;: 30000, &quot;BACKOFF_MIN_MS&quot;: 1000, &quot;CHECK_INTERVAL_MS&quot;: 5000, &quot;MIN_VALID_INTERVAL_MS&quot;: 100}, &quot;PERPLEXITY_API_KEY&quot;: &quot;test-perplexity-key&quot;, &quot;PI_OPTIMIZATIONS&quot;: {&quot;COMPACT_MODE&quot;: false, &quot;ENABLED&quot;: false, &quot;LOW_CPU_MODE&quot;: false}, &quot;RATE_LIMITS&quot;: {&quot;BACKOFF_MULTIPLIER&quot;: 2, &quot;MAX_RETRIES&quot;: 3, &quot;RETRY_DELAY_MS&quot;: 1000}, &quot;RATE_LIMIT_WINDOW&quot;: 5000, &quot;SYSTEM_MESSAGES&quot;: {&quot;CHAT&quot;: &quot;You are a helpful AI assistant.&quot;, &quot;SUMMARY&quot;: &quot;Please provide a summary of the following conversation.&quot;}, &quot;initializePiOptimizations&quot;: [Function mockConstructor]}
    at Object.toHaveProperty (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\config.test.js:58:20)
    at Promise.then.completed (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at _runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:252:3)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:444:34)
    at Object.worker (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\testWorker.js:106:12)</failure>
    </testcase>
    <testcase classname="Config should throw error when missing required environment variables" name="Config should throw error when missing required environment variables" time="0.047">
      <failure>Error: expect(received).toThrow(expected)

Expected substring: &quot;Missing PERPLEXITY_API_KEY in environment variables.&quot;

Received function did not throw
    at Object.toThrow (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\config.test.js:72:8)
    at Promise.then.completed (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at _runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:252:3)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:444:34)
    at Object.worker (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\testWorker.js:106:12)</failure>
    </testcase>
    <testcase classname="Config should have default API configuration" name="Config should have default API configuration" time="0.019">
    </testcase>
    <testcase classname="Config should have system messages defined" name="Config should have system messages defined" time="0.047">
    </testcase>
    <testcase classname="Config initializePiOptimizations should initialize Pi optimizations when environment variable is set" name="Config initializePiOptimizations should initialize Pi optimizations when environment variable is set" time="0.048">
      <failure>Error: expect(jest.fn()).toHaveBeenCalled()

Expected number of calls: &gt;= 1
Received number of calls:    0
    at Object.toHaveBeenCalled (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\config.test.js:109:46)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Config initializePiOptimizations should handle errors during Pi optimization initialization" name="Config initializePiOptimizations should handle errors during Pi optimization initialization" time="0.052">
      <failure>Error: expect(jest.fn()).toHaveBeenCalled()

Expected number of calls: &gt;= 1
Received number of calls:    0
    at Object.toHaveBeenCalled (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\config.test.js:128:46)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
    <testcase classname="Config initializePiOptimizations should not initialize Pi optimizations when disabled by environment variable" name="Config initializePiOptimizations should not initialize Pi optimizations when disabled by environment variable" time="0.085">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

- Expected  - 88
+ Received  +  1

- Object {
-   &quot;API&quot;: Object {
-     &quot;PERPLEXITY&quot;: Object {
-       &quot;BASE_URL&quot;: &quot;https://api.perplexity.ai&quot;,
-       &quot;DEFAULT_MODEL&quot;: &quot;llama-3.1-sonar-small-128k-online&quot;,
-       &quot;DEFAULT_TEMPERATURE&quot;: 0.7,
-       &quot;ENDPOINTS&quot;: Object {
-         &quot;CHAT_COMPLETIONS&quot;: &quot;/chat/completions&quot;,
-       },
-       &quot;MAX_TOKENS&quot;: Object {
-         &quot;CHAT&quot;: 2000,
-         &quot;SUMMARY&quot;: 1000,
-       },
-     },
-   },
-   &quot;CACHE&quot;: Object {
-     &quot;CLEANUP_INTERVAL_MS&quot;: 60000,
-     &quot;CLEANUP_PERCENTAGE&quot;: 0.2,
-     &quot;DEFAULT_MAX_ENTRIES&quot;: 1000,
-     &quot;DEFAULT_TTL_MS&quot;: 300000,
-     &quot;MAX_AGE_MS&quot;: 86400000,
-     &quot;MAX_MEMORY_MB&quot;: 50,
-   },
-   &quot;COLORS&quot;: Object {
-     &quot;ERROR&quot;: &quot;#ED4245&quot;,
-     &quot;PRIMARY&quot;: &quot;#5865F2&quot;,
-     &quot;SUCCESS&quot;: &quot;#57F287&quot;,
-     &quot;WARNING&quot;: &quot;#FEE75C&quot;,
-   },
-   &quot;DISCORD_BOT_TOKEN&quot;: &quot;test-token&quot;,
-   &quot;EMOJI_REACTIONS&quot;: Object {
-     &quot;happy&quot;: &quot;😊&quot;,
-     &quot;hello&quot;: &quot;👋&quot;,
-     &quot;love&quot;: &quot;❤️&quot;,
-     &quot;sad&quot;: &quot;😢&quot;,
-     &quot;thanks&quot;: &quot;🙏&quot;,
-     &quot;welcome&quot;: &quot;👋&quot;,
-   },
-   &quot;FILE_PERMISSIONS&quot;: Object {
-     &quot;DIRECTORY&quot;: 493,
-     &quot;READ&quot;: 420,
-     &quot;WRITE&quot;: 420,
-   },
-   &quot;LOGGING&quot;: Object {
-     &quot;DEFAULT_MAX_SIZE_MB&quot;: 10,
-     &quot;FILE_ENABLED&quot;: false,
-     &quot;LEVEL&quot;: &quot;info&quot;,
-     &quot;MAX_LOG_FILES&quot;: 5,
-   },
-   &quot;MAX_HISTORY&quot;: 20,
-   &quot;MEMORY&quot;: Object {
-     &quot;CHECK_INTERVAL_MS&quot;: 30000,
-     &quot;DEFAULT_CRITICAL_MB&quot;: 150,
-     &quot;DEFAULT_LIMIT_MB&quot;: 100,
-     &quot;GC_COOLDOWN_MS&quot;: 5000,
-     &quot;PRESSURE_TEST_SIZE&quot;: 1024,
-   },
-   &quot;MESSAGE_LIMITS&quot;: Object {
-     &quot;CHUNK_DELAY_MS&quot;: 1000,
-     &quot;DISCORD_MAX_LENGTH&quot;: 2000,
-     &quot;EMBED_DESCRIPTION_MAX_LENGTH&quot;: 2048,
-     &quot;EMBED_MAX_LENGTH&quot;: 4096,
-     &quot;ERROR_MESSAGE_MAX_LENGTH&quot;: 500,
-     &quot;MAX_PARAGRAPH_LENGTH&quot;: 1000,
-     &quot;SAFE_CHUNK_OVERHEAD&quot;: 100,
-   },
-   &quot;PERFORMANCE&quot;: Object {
-     &quot;BACKOFF_MAX_MS&quot;: 30000,
-     &quot;BACKOFF_MIN_MS&quot;: 1000,
-     &quot;CHECK_INTERVAL_MS&quot;: 5000,
-     &quot;MIN_VALID_INTERVAL_MS&quot;: 100,
-   },
-   &quot;PERPLEXITY_API_KEY&quot;: &quot;test-perplexity-key&quot;,
-   &quot;PI_OPTIMIZATIONS&quot;: Object {
-     &quot;ENABLED&quot;: false,
-   },
-   &quot;RATE_LIMITS&quot;: Object {
-     &quot;BACKOFF_MULTIPLIER&quot;: 2,
-     &quot;MAX_RETRIES&quot;: 3,
-     &quot;RETRY_DELAY_MS&quot;: 1000,
-   },
-   &quot;RATE_LIMIT_WINDOW&quot;: 5000,
-   &quot;SYSTEM_MESSAGES&quot;: Object {
-     &quot;CHAT&quot;: &quot;You are a helpful AI assistant.&quot;,
-     &quot;SUMMARY&quot;: &quot;Please provide a summary of the following conversation.&quot;,
-   },
-   &quot;initializePiOptimizations&quot;: [Function mockConstructor],
- }
+ Object {}
    at Object.toBe (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\config.test.js:148:22)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Debouncer" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:11" time="2.398" tests="4">
    <testcase classname="Debouncer debounce should delay function execution" name="Debouncer debounce should delay function execution" time="0.034">
    </testcase>
    <testcase classname="Debouncer debounce should only execute once for multiple rapid calls" name="Debouncer debounce should only execute once for multiple rapid calls" time="0.007">
    </testcase>
    <testcase classname="Debouncer debounce should reset the timer when called again during wait time" name="Debouncer debounce should reset the timer when called again during wait time" time="0.007">
    </testcase>
    <testcase classname="Debouncer debounce should pass arguments to the debounced function" name="Debouncer debounce should pass arguments to the debounced function" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Bot Main Entry Point (index.js)" errors="0" failures="1" skipped="0" timestamp="2025-09-22T13:10:51" time="22.063" tests="7">
    <testcase classname="Bot Main Entry Point (index.js) should create a Discord client and log in" name="Bot Main Entry Point (index.js) should create a Discord client and log in" time="4.721">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;DEFAULT_MAX_ENTRIES&apos;)
    at new DEFAULT_MAX_ENTRIES (C:\Users\ch\aszune\aszune-ai-bot\src\services\perplexity-secure.js:63:29)
    at Object.&lt;anonymous&gt; (C:\Users\ch\aszune\aszune-ai-bot\src\services\perplexity-secure.js:860:18)
    at Runtime._execModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:882:12)
    at Runtime.requireModuleOrMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1048:21)
    at Object.require (C:\Users\ch\aszune\aszune-ai-bot\src\services\chat.js:5:27)
    at Runtime._execModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:882:12)
    at Runtime._generateMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1690:34)
    at Runtime.requireMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:996:39)
    at Runtime.requireModuleOrMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1046:21)
    at Object.require (C:\Users\ch\aszune\aszune-ai-bot\src\index.js:35:27)
    at Runtime._execModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:882:12)
    at Runtime.requireModuleOrMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1048:21)
    at Object.require (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\index.test.js:120:13)
    at Promise.then.completed (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusHook (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:281:40)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at _runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:246:5)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:444:34)
    at Object.worker (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\testWorker.js:106:12)</failure>
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGINT signal" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGINT signal" time="0.174">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGTERM signal" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGTERM signal" time="0.081">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for uncaughtException" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for uncaughtException" time="0.091">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should call shutdown when uncaught exception occurs" name="Bot Main Entry Point (index.js) Graceful Shutdown should call shutdown when uncaught exception occurs" time="0.136">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should log an error and exit if shutdown fails" name="Bot Main Entry Point (index.js) Graceful Shutdown should log an error and exit if shutdown fails" time="0.226">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for unhandled promise rejections" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for unhandled promise rejections" time="0.094">
    </testcase>
  </testsuite>
  <testsuite name="Bot Shutdown" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="22.35" tests="2">
    <testcase classname="Bot Shutdown should handle SIGINT and shut down gracefully" name="Bot Shutdown should handle SIGINT and shut down gracefully" time="6.389">
    </testcase>
    <testcase classname="Bot Shutdown should handle errors during shutdown and exit with code 1" name="Bot Shutdown should handle errors during shutdown and exit with code 1" time="0.127">
    </testcase>
  </testsuite>
  <testsuite name="Message Chunker" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:11:12" time="1.728" tests="5">
    <testcase classname="Message Chunker should not chunk message that fits within max length" name="Message Chunker should not chunk message that fits within max length" time="0.01">
    </testcase>
    <testcase classname="Message Chunker should chunk a message that exceeds max length" name="Message Chunker should chunk a message that exceeds max length" time="0.011">
    </testcase>
    <testcase classname="Message Chunker should preserve paragraph breaks when possible" name="Message Chunker should preserve paragraph breaks when possible" time="0.008">
    </testcase>
    <testcase classname="Message Chunker should add correct chunk numbering" name="Message Chunker should add correct chunk numbering" time="0.004">
    </testcase>
    <testcase classname="Message Chunker should not cut off sentences at chunk boundaries" name="Message Chunker should not cut off sentences at chunk boundaries" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Main entry point" errors="0" failures="2" skipped="0" timestamp="2025-09-22T13:10:51" time="23.94" tests="3">
    <testcase classname="Main entry point should initialize bot with Pi optimizations" name="Main entry point should initialize bot with Pi optimizations" time="5.964">
    </testcase>
    <testcase classname="Main entry point should initialize bot without Pi optimizations" name="Main entry point should initialize bot without Pi optimizations" time="1.115">
      <failure>TypeError: Cannot read properties of undefined (reading &apos;DEFAULT_MAX_ENTRIES&apos;)
    at new DEFAULT_MAX_ENTRIES (C:\Users\ch\aszune\aszune-ai-bot\src\services\perplexity-secure.js:63:29)
    at Object.&lt;anonymous&gt; (C:\Users\ch\aszune\aszune-ai-bot\src\services\perplexity-secure.js:860:18)
    at Runtime._execModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:882:12)
    at Runtime.requireModuleOrMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1048:21)
    at Object.require (C:\Users\ch\aszune\aszune-ai-bot\src\services\chat.js:5:27)
    at Runtime._execModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:882:12)
    at Runtime.requireModuleOrMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1048:21)
    at Object.require (C:\Users\ch\aszune\aszune-ai-bot\src\index.js:35:27)
    at Runtime._execModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1439:24)
    at Runtime._loadModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1022:12)
    at Runtime.requireModule (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:882:12)
    at Runtime.requireModuleOrMock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runtime\build\index.js:1048:21)
    at Object.require (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\main-index.test.js:98:19)
    at Promise.then.completed (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at _runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:252:3)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:444:34)
    at Object.worker (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\testWorker.js:106:12)</failure>
    </testcase>
    <testcase classname="Main entry point should handle errors during initialization" name="Main entry point should handle errors during initialization" time="0.853">
      <failure>Error: expect(received).toBe(expected) // Object.is equality

Expected: &quot;Connection failed&quot;
Received: &quot;Cannot read properties of undefined (reading &apos;DEFAULT_MAX_ENTRIES&apos;)&quot;
    at Object.toBe (C:\Users\ch\aszune\aszune-ai-bot\__tests__\unit\main-index.test.js:121:29)
    at Promise.then.completed (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:298:28)
    at new Promise (&lt;anonymous&gt;)
    at callAsyncCircusFn (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\utils.js:231:10)
    at _callCircusTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:316:40)
    at processTicksAndRejections (node:internal/process/task_queues:95:5)
    at _runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:252:3)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:126:9)
    at _runTestsForDescribeBlock (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:121:9)
    at run (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\run.js:71:3)
    at runAndTransformResultsToJestFormat (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapterInit.js:122:21)
    at jestAdapter (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-circus\build\legacy-code-todo-rewrite\jestAdapter.js:79:19)
    at runTestInternal (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:367:16)
    at runTest (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\runTest.js:444:34)
    at Object.worker (C:\Users\ch\aszune\aszune-ai-bot\node_modules\jest-runner\build\testWorker.js:106:12)</failure>
    </testcase>
  </testsuite>
  <testsuite name="Command Handlers" errors="0" failures="0" skipped="0" timestamp="2025-09-22T13:10:51" time="32.9" tests="20">
    <testcase classname="Command Handlers getSlashCommandsData should return an array of slash command data" name="Command Handlers getSlashCommandsData should return an array of slash command data" time="0.067">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !help command" name="Command Handlers handleTextCommand should handle !help command" time="0.017">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !clearhistory command" name="Command Handlers handleTextCommand should handle !clearhistory command" time="0.003">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command with history" name="Command Handlers handleTextCommand should handle !summary command with history" time="0.004">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command with no history" name="Command Handlers handleTextCommand should handle !summary command with no history" time="0.002">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command with only assistant messages in history" name="Command Handlers handleTextCommand should handle !summary command with only assistant messages in history" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle errors during text command execution" name="Command Handlers handleTextCommand should handle errors during text command execution" time="0.149">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command API error" name="Command Handlers handleTextCommand should handle !summary command API error" time="0.01">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !stats command" name="Command Handlers handleTextCommand should handle !stats command" time="0.01">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should return null for unknown command" name="Command Handlers handleTextCommand should return null for unknown command" time="0.014">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /help command" name="Command Handlers handleSlashCommand should handle /help command" time="0.004">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /clearhistory command" name="Command Handlers handleSlashCommand should handle /clearhistory command" time="0.003">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command with history" name="Command Handlers handleSlashCommand should handle /summary command with history" time="0.01">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command API error" name="Command Handlers handleSlashCommand should handle /summary command API error" time="0.006">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command with only assistant messages in history" name="Command Handlers handleSlashCommand should handle /summary command with only assistant messages in history" time="0.004">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command with no history" name="Command Handlers handleSlashCommand should handle /summary command with no history" time="0.006">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /stats command" name="Command Handlers handleSlashCommand should handle /stats command" time="0.01">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle command execution error when not deferred" name="Command Handlers handleSlashCommand should handle command execution error when not deferred" time="0.016">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle unknown command" name="Command Handlers handleSlashCommand should handle unknown command" time="0.008">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle command execution error" name="Command Handlers handleSlashCommand should handle command execution error" time="0.021">
    </testcase>
  </testsuite>
</testsuites>