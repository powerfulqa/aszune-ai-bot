<?xml version="1.0" encoding="UTF-8"?>
<testsuites name="jest tests" tests="395" failures="0" errors="0" time="6.937">
  <testsuite name="Logger - Branch Coverage Tests" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="1.571" tests="12">
    <testcase classname="Logger - Branch Coverage Tests skips debug logs when log level is higher" name="Logger - Branch Coverage Tests skips debug logs when log level is higher" time="0.033">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests skips info logs when log level is higher" name="Logger - Branch Coverage Tests skips info logs when log level is higher" time="0.002">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests skips warning logs when log level is higher" name="Logger - Branch Coverage Tests skips warning logs when log level is higher" time="0.002">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles directory creation failure" name="Logger - Branch Coverage Tests handles directory creation failure" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests tests log file rotation" name="Logger - Branch Coverage Tests tests log file rotation" time="0.006">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles custom log size limit" name="Logger - Branch Coverage Tests handles custom log size limit" time="0.004">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles file stat errors during log rotation" name="Logger - Branch Coverage Tests handles file stat errors during log rotation" time="0.002">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles request errors in error method" name="Logger - Branch Coverage Tests handles request errors in error method" time="0.012">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles invalid log levels" name="Logger - Branch Coverage Tests handles invalid log levels" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles file write errors" name="Logger - Branch Coverage Tests handles file write errors" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles errors during log rotation" name="Logger - Branch Coverage Tests handles errors during log rotation" time="0.003">
    </testcase>
    <testcase classname="Logger - Branch Coverage Tests handles unlink errors during log cleanup" name="Logger - Branch Coverage Tests handles unlink errors during log cleanup" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Conversation Manager" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="1.732" tests="15">
    <testcase classname="Conversation Manager getHistory returns empty array for new users" name="Conversation Manager getHistory returns empty array for new users" time="0.016">
    </testcase>
    <testcase classname="Conversation Manager getHistory returns conversation history for existing users" name="Conversation Manager getHistory returns conversation history for existing users" time="0">
    </testcase>
    <testcase classname="Conversation Manager addMessage adds a message to conversation history" name="Conversation Manager addMessage adds a message to conversation history" time="0.003">
    </testcase>
    <testcase classname="Conversation Manager addMessage updates user stats when adding a user message" name="Conversation Manager addMessage updates user stats when adding a user message" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager addMessage trims conversation history when it exceeds the maximum length" name="Conversation Manager addMessage trims conversation history when it exceeds the maximum length" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager clearHistory clears conversation history for a user" name="Conversation Manager clearHistory clears conversation history for a user" time="0">
    </testcase>
    <testcase classname="Conversation Manager isRateLimited returns false for users with no recent messages" name="Conversation Manager isRateLimited returns false for users with no recent messages" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager isRateLimited returns true for users with recent messages" name="Conversation Manager isRateLimited returns true for users with recent messages" time="0">
    </testcase>
    <testcase classname="Conversation Manager isRateLimited returns false after the rate limit window passes" name="Conversation Manager isRateLimited returns false after the rate limit window passes" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager getUserStats returns default stats for new users" name="Conversation Manager getUserStats returns default stats for new users" time="0">
    </testcase>
    <testcase classname="Conversation Manager getUserStats returns user stats for existing users" name="Conversation Manager getUserStats returns user stats for existing users" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager updateUserStats increments message count" name="Conversation Manager updateUserStats increments message count" time="0">
    </testcase>
    <testcase classname="Conversation Manager updateUserStats increments summary count" name="Conversation Manager updateUserStats increments summary count" time="0.001">
    </testcase>
    <testcase classname="Conversation Manager destroy clears intervals and saves user stats" name="Conversation Manager destroy clears intervals and saves user stats" time="0.115">
    </testcase>
    <testcase classname="Conversation Manager destroy handles errors when saving user stats during shutdown" name="Conversation Manager destroy handles errors when saving user stats during shutdown" time="0.067">
    </testcase>
  </testsuite>
  <testsuite name="Bot Main Entry Point (index.js)" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="1.698" tests="7">
    <testcase classname="Bot Main Entry Point (index.js) should create a Discord client and log in" name="Bot Main Entry Point (index.js) should create a Discord client and log in" time="0.142">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGINT signal" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGINT signal" time="0.004">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGTERM signal" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for SIGTERM signal" time="0.004">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for uncaughtException" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for uncaughtException" time="0.007">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should call shutdown when uncaught exception occurs" name="Bot Main Entry Point (index.js) Graceful Shutdown should call shutdown when uncaught exception occurs" time="0.005">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should log an error and exit if shutdown fails" name="Bot Main Entry Point (index.js) Graceful Shutdown should log an error and exit if shutdown fails" time="0.009">
    </testcase>
    <testcase classname="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for unhandled promise rejections" name="Bot Main Entry Point (index.js) Graceful Shutdown should register handler for unhandled promise rejections" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="index.js - Branch Coverage" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="1.75" tests="19">
    <testcase classname="index.js - Branch Coverage normal initialization - no PI optimizations" name="index.js - Branch Coverage normal initialization - no PI optimizations" time="0.127">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles error events" name="index.js - Branch Coverage handles error events" time="0.002">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles warn events" name="index.js - Branch Coverage handles warn events" time="0.009">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles interaction events" name="index.js - Branch Coverage handles interaction events" time="0.006">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles ready event with slash command registration failure" name="index.js - Branch Coverage handles ready event with slash command registration failure" time="0.004">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles PI optimizations" name="index.js - Branch Coverage handles PI optimizations" time="0.003">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles PI optimization failures" name="index.js - Branch Coverage handles PI optimization failures" time="0.002">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles login failures in production mode" name="index.js - Branch Coverage handles login failures in production mode" time="0.003">
    </testcase>
    <testcase classname="index.js - Branch Coverage handles shutdown process" name="index.js - Branch Coverage handles shutdown process" time="0.002">
    </testcase>
    <testcase classname="index.js - Branch Coverage bootWithOptimizations function should handle errors in Pi optimization initialization" name="index.js - Branch Coverage bootWithOptimizations function should handle errors in Pi optimization initialization" time="0.024">
    </testcase>
    <testcase classname="index.js - Branch Coverage bootWithOptimizations function should not call initialization when PI_OPTIMIZATIONS is disabled" name="index.js - Branch Coverage bootWithOptimizations function should not call initialization when PI_OPTIMIZATIONS is disabled" time="0.009">
    </testcase>
    <testcase classname="index.js - Branch Coverage registerSlashCommands function should handle client not being ready" name="index.js - Branch Coverage registerSlashCommands function should handle client not being ready" time="0.008">
    </testcase>
    <testcase classname="index.js - Branch Coverage registerSlashCommands function should handle errors during slash command registration" name="index.js - Branch Coverage registerSlashCommands function should handle errors during slash command registration" time="0.008">
    </testcase>
    <testcase classname="index.js - Branch Coverage Multiple shutdown attempts should prevent multiple simultaneous shutdown attempts" name="index.js - Branch Coverage Multiple shutdown attempts should prevent multiple simultaneous shutdown attempts" time="0.003">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle error events" name="index.js - Branch Coverage Discord client event handlers should handle error events" time="0.004">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle warning events" name="index.js - Branch Coverage Discord client event handlers should handle warning events" time="0.003">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle non-command interactions" name="index.js - Branch Coverage Discord client event handlers should handle non-command interactions" time="0.012">
    </testcase>
    <testcase classname="index.js - Branch Coverage Discord client event handlers should handle command interactions" name="index.js - Branch Coverage Discord client event handlers should handle command interactions" time="0.005">
    </testcase>
    <testcase classname="index.js - Branch Coverage Login process should handle login failure in production mode" name="index.js - Branch Coverage Login process should handle login failure in production mode" time="0.009">
    </testcase>
  </testsuite>
  <testsuite name="Error handling" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="1.86" tests="2">
    <testcase classname="Error handling handles failed Perplexity API response during chat" name="Error handling handles failed Perplexity API response during chat" time="0.119">
    </testcase>
    <testcase classname="Error handling handles failed summary API response" name="Error handling handles failed summary API response" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Chat Service" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="1.953" tests="6">
    <testcase classname="Chat Service handles a normal message and sends a reply" name="Chat Service handles a normal message and sends a reply" time="0.1">
    </testcase>
    <testcase classname="Chat Service calls command handler for messages starting with &quot;!&quot;" name="Chat Service calls command handler for messages starting with &quot;!&quot;" time="0.001">
    </testcase>
    <testcase classname="Chat Service ignores messages from bots" name="Chat Service ignores messages from bots" time="0.002">
    </testcase>
    <testcase classname="Chat Service applies rate limiting" name="Chat Service applies rate limiting" time="0.003">
    </testcase>
    <testcase classname="Chat Service handles API errors gracefully" name="Chat Service handles API errors gracefully" time="0.071">
    </testcase>
    <testcase classname="Chat Service adds the bot response to conversation history" name="Chat Service adds the bot response to conversation history" time="0.004">
    </testcase>
  </testsuite>
  <testsuite name="Main entry point" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.354" tests="3">
    <testcase classname="Main entry point should initialize bot with Pi optimizations" name="Main entry point should initialize bot with Pi optimizations" time="0.162">
    </testcase>
    <testcase classname="Main entry point should initialize bot without Pi optimizations" name="Main entry point should initialize bot without Pi optimizations" time="0.019">
    </testcase>
    <testcase classname="Main entry point should handle errors during initialization" name="Main entry point should handle errors during initialization" time="0.011">
    </testcase>
  </testsuite>
  <testsuite name="URL Formatter" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="2.068" tests="24">
    <testcase classname="URL Formatter formatSocialMediaLinks should format Reddit URLs" name="URL Formatter formatSocialMediaLinks should format Reddit URLs" time="0.045">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should format Reddit subreddit references" name="URL Formatter formatSocialMediaLinks should format Reddit subreddit references" time="0.001">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should format Imgur URLs" name="URL Formatter formatSocialMediaLinks should format Imgur URLs" time="0">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should format GitHub URLs" name="URL Formatter formatSocialMediaLinks should format GitHub URLs" time="0.003">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should format Twitter URLs" name="URL Formatter formatSocialMediaLinks should format Twitter URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should format X.com URLs" name="URL Formatter formatSocialMediaLinks should format X.com URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should handle text without URLs" name="URL Formatter formatSocialMediaLinks should handle text without URLs" time="0">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should handle empty input" name="URL Formatter formatSocialMediaLinks should handle empty input" time="0">
    </testcase>
    <testcase classname="URL Formatter formatSocialMediaLinks should handle null input" name="URL Formatter formatSocialMediaLinks should handle null input" time="0.261">
    </testcase>
    <testcase classname="URL Formatter formatYouTubeLinks should format YouTube URLs" name="URL Formatter formatYouTubeLinks should format YouTube URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter formatYouTubeLinks should format YouTube short URLs" name="URL Formatter formatYouTubeLinks should format YouTube short URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter formatYouTubeLinks should handle text without YouTube URLs" name="URL Formatter formatYouTubeLinks should handle text without YouTube URLs" time="0">
    </testcase>
    <testcase classname="URL Formatter fixLinkFormatting should format HTTP URLs" name="URL Formatter fixLinkFormatting should format HTTP URLs" time="0">
    </testcase>
    <testcase classname="URL Formatter fixLinkFormatting should format HTTPS URLs" name="URL Formatter fixLinkFormatting should format HTTPS URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter fixLinkFormatting should handle text without URLs" name="URL Formatter fixLinkFormatting should handle text without URLs" time="0">
    </testcase>
    <testcase classname="URL Formatter formatAllUrls should format all types of URLs" name="URL Formatter formatAllUrls should format all types of URLs" time="0.002">
    </testcase>
    <testcase classname="URL Formatter formatAllUrls should handle complex text with multiple URLs" name="URL Formatter formatAllUrls should handle complex text with multiple URLs" time="0.001">
    </testcase>
    <testcase classname="URL Formatter formatAllUrls should handle text without URLs" name="URL Formatter formatAllUrls should handle text without URLs" time="0">
    </testcase>
    <testcase classname="URL Formatter formatAllUrls should handle empty input" name="URL Formatter formatAllUrls should handle empty input" time="0.002">
    </testcase>
    <testcase classname="URL Formatter formatAllUrls should handle null input" name="URL Formatter formatAllUrls should handle null input" time="0.11">
    </testcase>
    <testcase classname="URL Formatter Error handling should handle errors in formatSocialMediaLinks gracefully" name="URL Formatter Error handling should handle errors in formatSocialMediaLinks gracefully" time="0.005">
    </testcase>
    <testcase classname="URL Formatter Error handling should handle errors in formatYouTubeLinks gracefully" name="URL Formatter Error handling should handle errors in formatYouTubeLinks gracefully" time="0.005">
    </testcase>
    <testcase classname="URL Formatter Error handling should handle errors in fixLinkFormatting gracefully" name="URL Formatter Error handling should handle errors in fixLinkFormatting gracefully" time="0.003">
    </testcase>
    <testcase classname="URL Formatter Error handling should handle errors in formatAllUrls gracefully" name="URL Formatter Error handling should handle errors in formatAllUrls gracefully" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="InputValidator" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.223" tests="34">
    <testcase classname="InputValidator validateUserId should validate correct Discord user IDs" name="InputValidator validateUserId should validate correct Discord user IDs" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateUserId should reject invalid user IDs" name="InputValidator validateUserId should reject invalid user IDs" time="0.002">
    </testcase>
    <testcase classname="InputValidator validateUserId should accept valid user IDs" name="InputValidator validateUserId should accept valid user IDs" time="0.002">
    </testcase>
    <testcase classname="InputValidator validateUserId should handle errors gracefully" name="InputValidator validateUserId should handle errors gracefully" time="0">
    </testcase>
    <testcase classname="InputValidator validateMessageContent should validate normal message content" name="InputValidator validateMessageContent should validate normal message content" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateMessageContent should reject messages that are too long" name="InputValidator validateMessageContent should reject messages that are too long" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateMessageContent should reject empty messages" name="InputValidator validateMessageContent should reject empty messages" time="0">
    </testcase>
    <testcase classname="InputValidator validateMessageContent should reject non-string inputs" name="InputValidator validateMessageContent should reject non-string inputs" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateUrl should validate correct URLs" name="InputValidator validateUrl should validate correct URLs" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateUrl should reject invalid URLs" name="InputValidator validateUrl should reject invalid URLs" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateCommand should validate correct commands" name="InputValidator validateCommand should validate correct commands" time="0.002">
    </testcase>
    <testcase classname="InputValidator validateCommand should reject invalid commands" name="InputValidator validateCommand should reject invalid commands" time="0.003">
    </testcase>
    <testcase classname="InputValidator validateCommand should accept valid commands with underscores and hyphens" name="InputValidator validateCommand should accept valid commands with underscores and hyphens" time="0.001">
    </testcase>
    <testcase classname="InputValidator sanitizeContent should remove dangerous HTML tags" name="InputValidator sanitizeContent should remove dangerous HTML tags" time="0.005">
    </testcase>
    <testcase classname="InputValidator sanitizeContent should remove JavaScript protocols" name="InputValidator sanitizeContent should remove JavaScript protocols" time="0.001">
    </testcase>
    <testcase classname="InputValidator sanitizeContent should detect SQL injection attempts" name="InputValidator sanitizeContent should detect SQL injection attempts" time="0">
    </testcase>
    <testcase classname="InputValidator sanitizeContent should handle normal content without warnings" name="InputValidator sanitizeContent should handle normal content without warnings" time="0.001">
    </testcase>
    <testcase classname="InputValidator escapeHtml should escape HTML characters" name="InputValidator escapeHtml should escape HTML characters" time="0.001">
    </testcase>
    <testcase classname="InputValidator escapeHtml should handle empty input" name="InputValidator escapeHtml should handle empty input" time="0">
    </testcase>
    <testcase classname="InputValidator escapeHtml should handle null input" name="InputValidator escapeHtml should handle null input" time="0">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should validate and sanitize text input" name="InputValidator validateAndSanitize should validate and sanitize text input" time="0">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should validate and sanitize message input" name="InputValidator validateAndSanitize should validate and sanitize message input" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should validate and sanitize user ID input" name="InputValidator validateAndSanitize should validate and sanitize user ID input" time="0">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should validate and sanitize URL input" name="InputValidator validateAndSanitize should validate and sanitize URL input" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should validate and sanitize command input" name="InputValidator validateAndSanitize should validate and sanitize command input" time="0">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should reject input that is too long" name="InputValidator validateAndSanitize should reject input that is too long" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should reject empty input" name="InputValidator validateAndSanitize should reject empty input" time="0">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should reject non-string input" name="InputValidator validateAndSanitize should reject non-string input" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should handle strict mode with warnings" name="InputValidator validateAndSanitize should handle strict mode with warnings" time="0">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should handle custom max length" name="InputValidator validateAndSanitize should handle custom max length" time="0.001">
    </testcase>
    <testcase classname="InputValidator validateAndSanitize should handle errors gracefully" name="InputValidator validateAndSanitize should handle errors gracefully" time="0">
    </testcase>
    <testcase classname="InputValidator Validation Patterns should export validation patterns" name="InputValidator Validation Patterns should export validation patterns" time="0.001">
    </testcase>
    <testcase classname="InputValidator Validation Patterns should export validation limits" name="InputValidator Validation Patterns should export validation limits" time="0">
    </testcase>
    <testcase classname="InputValidator Validation Patterns should export dangerous patterns" name="InputValidator Validation Patterns should export dangerous patterns" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Memory Monitor" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="2.481" tests="24">
    <testcase classname="Memory Monitor Constructor should initialize with default values" name="Memory Monitor Constructor should initialize with default values" time="0.02">
    </testcase>
    <testcase classname="Memory Monitor Constructor should use environment variables when available" name="Memory Monitor Constructor should use environment variables when available" time="0.004">
    </testcase>
    <testcase classname="Memory Monitor initialize should initialize the memory monitor" name="Memory Monitor initialize should initialize the memory monitor" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor initialize should not initialize if already initialized" name="Memory Monitor initialize should not initialize if already initialized" time="0.003">
    </testcase>
    <testcase classname="Memory Monitor initialize should set up periodic checks" name="Memory Monitor initialize should set up periodic checks" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor initialize should call checkMemoryUsage on initialization" name="Memory Monitor initialize should call checkMemoryUsage on initialization" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor shutdown should shut down the memory monitor" name="Memory Monitor shutdown should shut down the memory monitor" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor shutdown should not shut down if not initialized" name="Memory Monitor shutdown should not shut down if not initialized" time="0">
    </testcase>
    <testcase classname="Memory Monitor shutdown should clear interval if it exists" name="Memory Monitor shutdown should clear interval if it exists" time="0">
    </testcase>
    <testcase classname="Memory Monitor checkMemoryUsage should check memory usage normally" name="Memory Monitor checkMemoryUsage should check memory usage normally" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor checkMemoryUsage should trigger GC when memory limit exceeded" name="Memory Monitor checkMemoryUsage should trigger GC when memory limit exceeded" time="0.1">
    </testcase>
    <testcase classname="Memory Monitor checkMemoryUsage should reset low memory flag when memory normalizes" name="Memory Monitor checkMemoryUsage should reset low memory flag when memory normalizes" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor checkMemoryUsage should log critical memory warning" name="Memory Monitor checkMemoryUsage should log critical memory warning" time="0.167">
    </testcase>
    <testcase classname="Memory Monitor checkMemoryUsage should handle errors gracefully" name="Memory Monitor checkMemoryUsage should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor forceGarbageCollection should run garbage collection if global.gc is available" name="Memory Monitor forceGarbageCollection should run garbage collection if global.gc is available" time="0.238">
    </testcase>
    <testcase classname="Memory Monitor forceGarbageCollection should not run GC if cooldown period has not passed" name="Memory Monitor forceGarbageCollection should not run GC if cooldown period has not passed" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor forceGarbageCollection should create memory pressure to encourage GC" name="Memory Monitor forceGarbageCollection should create memory pressure to encourage GC" time="0.112">
    </testcase>
    <testcase classname="Memory Monitor forceGarbageCollection should handle errors during garbage collection" name="Memory Monitor forceGarbageCollection should handle errors during garbage collection" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor getMemoryUsage should return memory usage stats" name="Memory Monitor getMemoryUsage should return memory usage stats" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor getMemoryUsage should calculate percent used correctly" name="Memory Monitor getMemoryUsage should calculate percent used correctly" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor getMemoryUsage should handle errors and return empty object" name="Memory Monitor getMemoryUsage should handle errors and return empty object" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor getStatus should return complete status information" name="Memory Monitor getStatus should return complete status information" time="0.002">
    </testcase>
    <testcase classname="Memory Monitor Integration should work with periodic checks" name="Memory Monitor Integration should work with periodic checks" time="0.001">
    </testcase>
    <testcase classname="Memory Monitor Integration should handle memory pressure scenario" name="Memory Monitor Integration should handle memory pressure scenario" time="0.162">
    </testcase>
  </testsuite>
  <testsuite name="EnhancedCache" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="2.352" tests="22">
    <testcase classname="EnhancedCache Basic Operations should set and get values" name="EnhancedCache Basic Operations should set and get values" time="0.019">
    </testcase>
    <testcase classname="EnhancedCache Basic Operations should return null for non-existent keys" name="EnhancedCache Basic Operations should return null for non-existent keys" time="0.004">
    </testcase>
    <testcase classname="EnhancedCache Basic Operations should check if key exists by getting it" name="EnhancedCache Basic Operations should check if key exists by getting it" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache Basic Operations should delete keys" name="EnhancedCache Basic Operations should delete keys" time="0">
    </testcase>
    <testcase classname="EnhancedCache Basic Operations should clear all entries" name="EnhancedCache Basic Operations should clear all entries" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache TTL (Time To Live) should respect TTL for individual entries" name="EnhancedCache TTL (Time To Live) should respect TTL for individual entries" time="0.22">
    </testcase>
    <testcase classname="EnhancedCache TTL (Time To Live) should not expire entries before TTL" name="EnhancedCache TTL (Time To Live) should not expire entries before TTL" time="0.158">
    </testcase>
    <testcase classname="EnhancedCache TTL (Time To Live) should use default TTL when not specified" name="EnhancedCache TTL (Time To Live) should use default TTL when not specified" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache Size Management should track cache size" name="EnhancedCache Size Management should track cache size" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache Size Management should respect maxEntries limit" name="EnhancedCache Size Management should respect maxEntries limit" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache Size Management should respect maxSize limit" name="EnhancedCache Size Management should respect maxSize limit" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache Eviction Strategies should use LRU eviction strategy" name="EnhancedCache Eviction Strategies should use LRU eviction strategy" time="0">
    </testcase>
    <testcase classname="EnhancedCache Eviction Strategies should use LFU eviction strategy" name="EnhancedCache Eviction Strategies should use LFU eviction strategy" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache Statistics and Metrics should track hit and miss statistics" name="EnhancedCache Statistics and Metrics should track hit and miss statistics" time="0.001">
    </testcase>
    <testcase classname="EnhancedCache Error Handling should handle errors in set operation gracefully" name="EnhancedCache Error Handling should handle errors in set operation gracefully" time="0.005">
    </testcase>
    <testcase classname="EnhancedCache Error Handling should handle errors in get operation gracefully" name="EnhancedCache Error Handling should handle errors in get operation gracefully" time="0.006">
    </testcase>
    <testcase classname="EnhancedCache Cache Entry should calculate size correctly" name="EnhancedCache Cache Entry should calculate size correctly" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache Cache Entry should handle size calculation errors" name="EnhancedCache Cache Entry should handle size calculation errors" time="0.003">
    </testcase>
    <testcase classname="EnhancedCache Cache Entry should check if entry is expired" name="EnhancedCache Cache Entry should check if entry is expired" time="0.253">
    </testcase>
    <testcase classname="EnhancedCache Cache Entry should update access time and count" name="EnhancedCache Cache Entry should update access time and count" time="0.058">
    </testcase>
    <testcase classname="EnhancedCache Configuration should use default configuration when none provided" name="EnhancedCache Configuration should use default configuration when none provided" time="0.002">
    </testcase>
    <testcase classname="EnhancedCache Configuration should use provided configuration" name="EnhancedCache Configuration should use provided configuration" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Perplexity Service" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.558" tests="4">
    <testcase classname="Perplexity Service sendChatRequest sends a request to the API with correct parameters" name="Perplexity Service sendChatRequest sends a request to the API with correct parameters" time="0.002">
    </testcase>
    <testcase classname="Perplexity Service sendChatRequest throws an error when API request fails" name="Perplexity Service sendChatRequest throws an error when API request fails" time="0.186">
    </testcase>
    <testcase classname="Perplexity Service generateSummary generates a summary with correct system prompt" name="Perplexity Service generateSummary generates a summary with correct system prompt" time="0.002">
    </testcase>
    <testcase classname="Perplexity Service generateTextSummary generates a text summary with correct system prompt" name="Perplexity Service generateTextSummary generates a text summary with correct system prompt" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Bot Initialization" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="2.48" tests="2">
    <testcase classname="Bot Initialization should create a Discord client and log in" name="Bot Initialization should create a Discord client and log in" time="0.743">
    </testcase>
    <testcase classname="Bot Initialization should register event handlers" name="Bot Initialization should register event handlers" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Bot Shutdown" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="2.633" tests="2">
    <testcase classname="Bot Shutdown should handle SIGINT and shut down gracefully" name="Bot Shutdown should handle SIGINT and shut down gracefully" time="0.933">
    </testcase>
    <testcase classname="Bot Shutdown should handle errors during shutdown and exit with code 1" name="Bot Shutdown should handle errors during shutdown and exit with code 1" time="0.075">
    </testcase>
  </testsuite>
  <testsuite name="Enhanced Message Chunker" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.324" tests="5">
    <testcase classname="Enhanced Message Chunker processes source references correctly" name="Enhanced Message Chunker processes source references correctly" time="0.002">
    </testcase>
    <testcase classname="Enhanced Message Chunker handles YouTube links in sources correctly" name="Enhanced Message Chunker handles YouTube links in sources correctly" time="0.001">
    </testcase>
    <testcase classname="Enhanced Message Chunker preserves formatting for multiple source references" name="Enhanced Message Chunker preserves formatting for multiple source references" time="0.001">
    </testcase>
    <testcase classname="Enhanced Message Chunker chunking preserves source references across chunks" name="Enhanced Message Chunker chunking preserves source references across chunks" time="0.03">
    </testcase>
    <testcase classname="Enhanced Message Chunker handles URLs split between chunks" name="Enhanced Message Chunker handles URLs split between chunks" time="0.01">
    </testcase>
  </testsuite>
  <testsuite name="Bot Edge Cases" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.78" tests="6">
    <testcase classname="Bot Edge Cases handles empty message" name="Bot Edge Cases handles empty message" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases handles very long message and truncates history" name="Bot Edge Cases handles very long message and truncates history" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases handles API failure for chat completions" name="Bot Edge Cases handles API failure for chat completions" time="0">
    </testcase>
    <testcase classname="Bot Edge Cases reacts with correct emoji for hello" name="Bot Edge Cases reacts with correct emoji for hello" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases does not react for non-keyword" name="Bot Edge Cases does not react for non-keyword" time="0.001">
    </testcase>
    <testcase classname="Bot Edge Cases handles missing environment variables gracefully" name="Bot Edge Cases handles missing environment variables gracefully" time="0.055">
    </testcase>
  </testsuite>
  <testsuite name="EmojiManager" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.336" tests="7">
    <testcase classname="EmojiManager adds emojis to response based on keywords" name="EmojiManager adds emojis to response based on keywords" time="0.001">
    </testcase>
    <testcase classname="EmojiManager adds multiple emojis when multiple keywords are found" name="EmojiManager adds multiple emojis when multiple keywords are found" time="0.001">
    </testcase>
    <testcase classname="EmojiManager does not add emojis when no keywords are found" name="EmojiManager does not add emojis when no keywords are found" time="0">
    </testcase>
    <testcase classname="EmojiManager gets reactions for a message based on keywords" name="EmojiManager gets reactions for a message based on keywords" time="0">
    </testcase>
    <testcase classname="EmojiManager returns empty array when no reaction keywords are found" name="EmojiManager returns empty array when no reaction keywords are found" time="0.001">
    </testcase>
    <testcase classname="EmojiManager adds reactions to a message" name="EmojiManager adds reactions to a message" time="0.001">
    </testcase>
    <testcase classname="EmojiManager handles errors when adding reactions" name="EmojiManager handles errors when adding reactions" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="DataStorage" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.265" tests="9">
    <testcase classname="DataStorage init should create data directory if it does not exist" name="DataStorage init should create data directory if it does not exist" time="0.001">
    </testcase>
    <testcase classname="DataStorage init should not create directory if already initialized" name="DataStorage init should not create directory if already initialized" time="0">
    </testcase>
    <testcase classname="DataStorage init should throw and log error if mkdir fails" name="DataStorage init should throw and log error if mkdir fails" time="0.014">
    </testcase>
    <testcase classname="DataStorage saveUserStats should save user stats to file" name="DataStorage saveUserStats should save user stats to file" time="0.001">
    </testcase>
    <testcase classname="DataStorage saveUserStats should log error if writeFile fails" name="DataStorage saveUserStats should log error if writeFile fails" time="0.001">
    </testcase>
    <testcase classname="DataStorage loadUserStats should load user stats from file" name="DataStorage loadUserStats should load user stats from file" time="0.001">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object if file does not exist" name="DataStorage loadUserStats should return empty object if file does not exist" time="0.001">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object and log error if readFile fails for other reasons" name="DataStorage loadUserStats should return empty object and log error if readFile fails for other reasons" time="0.001">
    </testcase>
    <testcase classname="DataStorage loadUserStats should return empty object and log error if JSON parsing fails" name="DataStorage loadUserStats should return empty object and log error if JSON parsing fails" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="appendEmoji" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.193" tests="8">
    <testcase classname="appendEmoji adds the correct emoji for known keywords" name="appendEmoji adds the correct emoji for known keywords" time="0.002">
    </testcase>
    <testcase classname="appendEmoji does not modify the text if no keyword is present" name="appendEmoji does not modify the text if no keyword is present" time="0">
    </testcase>
    <testcase classname="appendEmoji is case-insensitive" name="appendEmoji is case-insensitive" time="0.001">
    </testcase>
    <testcase classname="appendEmoji can add multiple emojis" name="appendEmoji can add multiple emojis" time="0">
    </testcase>
    <testcase classname="appendEmoji does not add emoji for keywords inside other words" name="appendEmoji does not add emoji for keywords inside other words" time="0.001">
    </testcase>
    <testcase classname="appendEmoji adds all matching emojis in correct order" name="appendEmoji adds all matching emojis in correct order" time="0">
    </testcase>
    <testcase classname="appendEmoji handles empty string" name="appendEmoji handles empty string" time="0">
    </testcase>
    <testcase classname="appendEmoji handles string with only emojis as keywords" name="appendEmoji handles string with only emojis as keywords" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Cache Pruner" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.198" tests="8">
    <testcase classname="Cache Pruner _initializePruningSchedule should set up interval based on config" name="Cache Pruner _initializePruningSchedule should set up interval based on config" time="0.002">
    </testcase>
    <testcase classname="Cache Pruner _initializePruningSchedule should execute pruneCache on interval" name="Cache Pruner _initializePruningSchedule should execute pruneCache on interval" time="0.001">
    </testcase>
    <testcase classname="Cache Pruner pruneCache should call both pruning methods" name="Cache Pruner pruneCache should call both pruning methods" time="0.001">
    </testcase>
    <testcase classname="Cache Pruner pruneCache should handle errors" name="Cache Pruner pruneCache should handle errors" time="0.024">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should prune when over max entries" name="Cache Pruner _pruneQuestionCache should prune when over max entries" time="0.002">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should not prune when under max entries" name="Cache Pruner _pruneQuestionCache should not prune when under max entries" time="0.001">
    </testcase>
    <testcase classname="Cache Pruner _pruneQuestionCache should handle missing file gracefully" name="Cache Pruner _pruneQuestionCache should handle missing file gracefully" time="0.001">
    </testcase>
    <testcase classname="Cache Pruner getStatus should return correct status information" name="Cache Pruner getStatus should return correct status information" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Performance Monitor" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:49" time="0.223" tests="13">
    <testcase classname="Performance Monitor initialize should start monitoring in production environment" name="Performance Monitor initialize should start monitoring in production environment" time="0.006">
    </testcase>
    <testcase classname="Performance Monitor initialize should not start monitoring when disabled" name="Performance Monitor initialize should not start monitoring when disabled" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor initialize should not start monitoring in non-production environment" name="Performance Monitor initialize should not start monitoring in non-production environment" time="0">
    </testcase>
    <testcase classname="Performance Monitor shutdown should clear the interval when shutdown is called" name="Performance Monitor shutdown should clear the interval when shutdown is called" time="0">
    </testcase>
    <testcase classname="Performance Monitor shutdown should do nothing if already stopped" name="Performance Monitor shutdown should do nothing if already stopped" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor throttle functions getThrottleFactor should return current factor when enabled" name="Performance Monitor throttle functions getThrottleFactor should return current factor when enabled" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor throttle functions getThrottleFactor should return 1 when disabled" name="Performance Monitor throttle functions getThrottleFactor should return 1 when disabled" time="0">
    </testcase>
    <testcase classname="Performance Monitor throttle functions throttleTime should multiply by throttle factor when enabled" name="Performance Monitor throttle functions throttleTime should multiply by throttle factor when enabled" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor throttle functions throttleTime should not throttle below minimum valid interval" name="Performance Monitor throttle functions throttleTime should not throttle below minimum valid interval" time="0">
    </testcase>
    <testcase classname="Performance Monitor throttle functions throttleTask should apply delay based on throttle factor" name="Performance Monitor throttle functions throttleTask should apply delay based on throttle factor" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor _getCpuInfo should calculate idle and total CPU time" name="Performance Monitor _getCpuInfo should calculate idle and total CPU time" time="0">
    </testcase>
    <testcase classname="Performance Monitor _checkPerformance should calculate CPU usage and update state" name="Performance Monitor _checkPerformance should calculate CPU usage and update state" time="0.001">
    </testcase>
    <testcase classname="Performance Monitor _checkPerformance should handle errors gracefully" name="Performance Monitor _checkPerformance should handle errors gracefully" time="0.022">
    </testcase>
  </testsuite>
  <testsuite name="Connection Throttler" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.2" tests="5">
    <testcase classname="Connection Throttler executeRequest should execute requests immediately when under max connections" name="Connection Throttler executeRequest should execute requests immediately when under max connections" time="0.002">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should queue requests when at max connections" name="Connection Throttler executeRequest should queue requests when at max connections" time="0.001">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should handle errors in requests" name="Connection Throttler executeRequest should handle errors in requests" time="0.023">
    </testcase>
    <testcase classname="Connection Throttler executeRequest should process next queue item after completion" name="Connection Throttler executeRequest should process next queue item after completion" time="0">
    </testcase>
    <testcase classname="Connection Throttler clearQueue should clear all queued requests" name="Connection Throttler clearQueue should clear all queued requests" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Logger" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.254" tests="9">
    <testcase classname="Logger logs debug messages" name="Logger logs debug messages" time="0.004">
    </testcase>
    <testcase classname="Logger logs debug messages with data" name="Logger logs debug messages with data" time="0.008">
    </testcase>
    <testcase classname="Logger logs info messages" name="Logger logs info messages" time="0.004">
    </testcase>
    <testcase classname="Logger logs warning messages" name="Logger logs warning messages" time="0">
    </testcase>
    <testcase classname="Logger logs error messages" name="Logger logs error messages" time="0.001">
    </testcase>
    <testcase classname="Logger logs error messages with error object" name="Logger logs error messages with error object" time="0.022">
    </testcase>
    <testcase classname="Logger handles API errors" name="Logger handles API errors" time="0.001">
    </testcase>
    <testcase classname="Logger provides user-friendly error messages" name="Logger provides user-friendly error messages" time="0.001">
    </testcase>
    <testcase classname="Logger handles different error types properly" name="Logger handles different error types properly" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Undici mock helpers" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.195" tests="3">
    <testcase classname="Undici mock helpers should create a success response with expected structure" name="Undici mock helpers should create a success response with expected structure" time="0.002">
    </testcase>
    <testcase classname="Undici mock helpers should create an error response with expected structure" name="Undici mock helpers should create an error response with expected structure" time="0.002">
    </testcase>
    <testcase classname="Undici mock helpers should use default status code for error responses" name="Undici mock helpers should use default status code for error responses" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Lazy Loader" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.174" tests="4">
    <testcase classname="Lazy Loader should return a function that loads a module when called" name="Lazy Loader should return a function that loads a module when called" time="0.001">
    </testcase>
    <testcase classname="Lazy Loader should handle modules with methods" name="Lazy Loader should handle modules with methods" time="0.001">
    </testcase>
    <testcase classname="Lazy Loader should memoize the loaded module" name="Lazy Loader should memoize the loaded module" time="0.001">
    </testcase>
    <testcase classname="Lazy Loader should handle errors in the loader function" name="Lazy Loader should handle errors in the loader function" time="0.013">
    </testcase>
  </testsuite>
  <testsuite name="Discord.js mock" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.163" tests="3">
    <testcase classname="Discord.js mock Client mock exists" name="Discord.js mock Client mock exists" time="0.001">
    </testcase>
    <testcase classname="Discord.js mock Client mock has required methods" name="Discord.js mock Client mock has required methods" time="0.001">
    </testcase>
    <testcase classname="Discord.js mock SlashCommandBuilder mock exists" name="Discord.js mock SlashCommandBuilder mock exists" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Message Chunker" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.166" tests="5">
    <testcase classname="Message Chunker should not chunk message that fits within max length" name="Message Chunker should not chunk message that fits within max length" time="0.002">
    </testcase>
    <testcase classname="Message Chunker should chunk a message that exceeds max length" name="Message Chunker should chunk a message that exceeds max length" time="0.005">
    </testcase>
    <testcase classname="Message Chunker should preserve paragraph breaks when possible" name="Message Chunker should preserve paragraph breaks when possible" time="0.001">
    </testcase>
    <testcase classname="Message Chunker should add correct chunk numbering" name="Message Chunker should add correct chunk numbering" time="0.002">
    </testcase>
    <testcase classname="Message Chunker should not cut off sentences at chunk boundaries" name="Message Chunker should not cut off sentences at chunk boundaries" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Config" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.197" tests="6">
    <testcase classname="Config exports required configuration settings" name="Config exports required configuration settings" time="0.014">
    </testcase>
    <testcase classname="Config should have required environment variables available" name="Config should have required environment variables available" time="0.002">
    </testcase>
    <testcase classname="Config should have default API configuration" name="Config should have default API configuration" time="0.002">
    </testcase>
    <testcase classname="Config should have system messages defined" name="Config should have system messages defined" time="0.002">
    </testcase>
    <testcase classname="Config initializePiOptimizations should have initializePiOptimizations function available" name="Config initializePiOptimizations should have initializePiOptimizations function available" time="0.003">
    </testcase>
    <testcase classname="Config initializePiOptimizations should return a promise when initializePiOptimizations is called" name="Config initializePiOptimizations should return a promise when initializePiOptimizations is called" time="0.003">
    </testcase>
  </testsuite>
  <testsuite name="Message Formatter" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.196" tests="7">
    <testcase classname="Message Formatter formatResponse should format a response message with default options" name="Message Formatter formatResponse should format a response message with default options" time="0.002">
    </testcase>
    <testcase classname="Message Formatter formatResponse should remove excessive whitespace" name="Message Formatter formatResponse should remove excessive whitespace" time="0.001">
    </testcase>
    <testcase classname="Message Formatter formatResponse should truncate long messages" name="Message Formatter formatResponse should truncate long messages" time="0.008">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should return original embed when not in compact mode" name="Message Formatter createCompactEmbed should return original embed when not in compact mode" time="0.001">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should simplify description in compact mode" name="Message Formatter createCompactEmbed should simplify description in compact mode" time="0.001">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should limit fields in compact mode" name="Message Formatter createCompactEmbed should limit fields in compact mode" time="0">
    </testcase>
    <testcase classname="Message Formatter createCompactEmbed should remove footer in low CPU mode" name="Message Formatter createCompactEmbed should remove footer in low CPU mode" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Undici Mock" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.163" tests="1">
    <testcase classname="Undici Mock should exist" name="Undici Mock should exist" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Bot Error Handling" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.185" tests="2">
    <testcase classname="Bot Error Handling should log uncaught exceptions" name="Bot Error Handling should log uncaught exceptions" time="0.001">
    </testcase>
    <testcase classname="Bot Error Handling should log unhandled promise rejections" name="Bot Error Handling should log unhandled promise rejections" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Debouncer" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.17" tests="4">
    <testcase classname="Debouncer debounce should delay function execution" name="Debouncer debounce should delay function execution" time="0.005">
    </testcase>
    <testcase classname="Debouncer debounce should only execute once for multiple rapid calls" name="Debouncer debounce should only execute once for multiple rapid calls" time="0.001">
    </testcase>
    <testcase classname="Debouncer debounce should reset the timer when called again during wait time" name="Debouncer debounce should reset the timer when called again during wait time" time="0.001">
    </testcase>
    <testcase classname="Debouncer debounce should pass arguments to the debounced function" name="Debouncer debounce should pass arguments to the debounced function" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Logger Mock" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.17" tests="4">
    <testcase classname="Logger Mock logger mock exists" name="Logger Mock logger mock exists" time="0.001">
    </testcase>
    <testcase classname="Logger Mock logger mock has required methods" name="Logger Mock logger mock has required methods" time="0.001">
    </testcase>
    <testcase classname="Logger Mock handleError returns a value" name="Logger Mock handleError returns a value" time="0.001">
    </testcase>
    <testcase classname="Logger Mock _formatMessage returns a formatted message" name="Logger Mock _formatMessage returns a formatted message" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Pi Detector" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.252" tests="21">
    <testcase classname="Pi Detector detectPiModel should detect Raspberry Pi 4" name="Pi Detector detectPiModel should detect Raspberry Pi 4" time="0.005">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should detect Raspberry Pi 3" name="Pi Detector detectPiModel should detect Raspberry Pi 3" time="0.001">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should detect Raspberry Pi 5" name="Pi Detector detectPiModel should detect Raspberry Pi 5" time="0">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle CPU frequency detection" name="Pi Detector detectPiModel should handle CPU frequency detection" time="0.001">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle temperature reading failure" name="Pi Detector detectPiModel should handle temperature reading failure" time="0.001">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle non-Pi systems" name="Pi Detector detectPiModel should handle non-Pi systems" time="0">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle non-Linux systems" name="Pi Detector detectPiModel should handle non-Linux systems" time="0.001">
    </testcase>
    <testcase classname="Pi Detector detectPiModel should handle errors gracefully" name="Pi Detector detectPiModel should handle errors gracefully" time="0.001">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 2GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 2GB" time="0.004">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 1GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 1GB" time="0.003">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 4GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 4 with 4GB" time="0.001">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 3" name="Pi Detector generateOptimizedConfig should generate config for Pi 3" time="0.002">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 4GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 4GB" time="0.001">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 8GB" name="Pi Detector generateOptimizedConfig should generate config for Pi 5 with 8GB" time="0.001">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for unknown Pi model" name="Pi Detector generateOptimizedConfig should generate config for unknown Pi model" time="0">
    </testcase>
    <testcase classname="Pi Detector generateOptimizedConfig should generate config for non-Pi systems" name="Pi Detector generateOptimizedConfig should generate config for non-Pi systems" time="0.001">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should initialize and return optimized config" name="Pi Detector initPiOptimizations should initialize and return optimized config" time="0.001">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should respect environment variable overrides" name="Pi Detector initPiOptimizations should respect environment variable overrides" time="0.003">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should handle errors and return safe defaults" name="Pi Detector initPiOptimizations should handle errors and return safe defaults" time="0.001">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should not initialize Pi optimizations when disabled by environment variable" name="Pi Detector initPiOptimizations should not initialize Pi optimizations when disabled by environment variable" time="0.001">
    </testcase>
    <testcase classname="Pi Detector initPiOptimizations should use environment-provided values when initialization fails" name="Pi Detector initPiOptimizations should use environment-provided values when initialization fails" time="0.015">
    </testcase>
  </testsuite>
  <testsuite name="Message flow" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.145" tests="1">
    <testcase classname="Message flow adds user and assistant messages to conversationHistory" name="Message flow adds user and assistant messages to conversationHistory" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Discord.js mock" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.181" tests="3">
    <testcase classname="Discord.js mock Client mock exists" name="Discord.js mock Client mock exists" time="0.001">
    </testcase>
    <testcase classname="Discord.js mock Client mock has required methods" name="Discord.js mock Client mock has required methods" time="0.001">
    </testcase>
    <testcase classname="Discord.js mock SlashCommandBuilder mock exists" name="Discord.js mock SlashCommandBuilder mock exists" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Test Utilities" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.171" tests="5">
    <testcase classname="Test Utilities createMockMessage creates a default mock message with expected properties" name="Test Utilities createMockMessage creates a default mock message with expected properties" time="0.002">
    </testcase>
    <testcase classname="Test Utilities createMockMessage allows custom options" name="Test Utilities createMockMessage allows custom options" time="0.001">
    </testcase>
    <testcase classname="Test Utilities createMockInteraction creates a default mock interaction with expected properties" name="Test Utilities createMockInteraction creates a default mock interaction with expected properties" time="0.001">
    </testcase>
    <testcase classname="Test Utilities createMockInteraction allows custom options" name="Test Utilities createMockInteraction allows custom options" time="0.003">
    </testcase>
    <testcase classname="Test Utilities resetMocks resets all mocks" name="Test Utilities resetMocks resets all mocks" time="0.002">
    </testcase>
  </testsuite>
  <testsuite name="Discord mock" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:50" time="0.143" tests="1">
    <testcase classname="Discord mock Mock is valid" name="Discord mock Mock is valid" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="Command Handling" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="3.288" tests="12">
    <testcase classname="Command Handling responds to !clearhistory and clears the conversation history" name="Command Handling responds to !clearhistory and clears the conversation history" time="0.02">
    </testcase>
    <testcase classname="Command Handling !help command replies with help message" name="Command Handling !help command replies with help message" time="0.001">
    </testcase>
    <testcase classname="Command Handling !summary command replies with summary" name="Command Handling !summary command replies with summary" time="0.001">
    </testcase>
    <testcase classname="Command Handling !summarise command replies with text summary" name="Command Handling !summarise command replies with text summary" time="0.001">
    </testcase>
    <testcase classname="Command Handling !summerise command (alternative spelling) replies with text summary" name="Command Handling !summerise command (alternative spelling) replies with text summary" time="0">
    </testcase>
    <testcase classname="Command Handling !summarise command with no text returns usage message" name="Command Handling !summarise command with no text returns usage message" time="0.001">
    </testcase>
    <testcase classname="Command Handling !summerise command with no text returns usage message" name="Command Handling !summerise command with no text returns usage message" time="0">
    </testcase>
    <testcase classname="Command Handling !summary command uses UK English in prompt" name="Command Handling !summary command uses UK English in prompt" time="0.001">
    </testcase>
    <testcase classname="Command Handling rate limiting prevents spam" name="Command Handling rate limiting prevents spam" time="0">
    </testcase>
    <testcase classname="Command Handling unknown command is ignored" name="Command Handling unknown command is ignored" time="0.001">
    </testcase>
    <testcase classname="Command Handling !summary with no conversation history" name="Command Handling !summary with no conversation history" time="0.001">
    </testcase>
    <testcase classname="Command Handling !stats command replies with user stats" name="Command Handling !stats command replies with user stats" time="0">
    </testcase>
  </testsuite>
  <testsuite name="Command Handlers" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="3.485" tests="37">
    <testcase classname="Command Handlers getSlashCommandsData should return an array of slash command data" name="Command Handlers getSlashCommandsData should return an array of slash command data" time="0.019">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !help command" name="Command Handlers handleTextCommand should handle !help command" time="0.003">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !clearhistory command" name="Command Handlers handleTextCommand should handle !clearhistory command" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command with history" name="Command Handlers handleTextCommand should handle !summary command with history" time="0.002">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command with no history" name="Command Handlers handleTextCommand should handle !summary command with no history" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command with only assistant messages in history" name="Command Handlers handleTextCommand should handle !summary command with only assistant messages in history" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle errors during text command execution" name="Command Handlers handleTextCommand should handle errors during text command execution" time="0.024">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summary command API error" name="Command Handlers handleTextCommand should handle !summary command API error" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !stats command" name="Command Handlers handleTextCommand should handle !stats command" time="0">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summarise command with text" name="Command Handlers handleTextCommand should handle !summarise command with text" time="0.002">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summerise command with text (alternative spelling)" name="Command Handlers handleTextCommand should handle !summerise command with text (alternative spelling)" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summarise command without text" name="Command Handlers handleTextCommand should handle !summarise command without text" time="0">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summarise command with empty text" name="Command Handlers handleTextCommand should handle !summarise command with empty text" time="0">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summarise command with invalid text" name="Command Handlers handleTextCommand should handle !summarise command with invalid text" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle !summarise command API error" name="Command Handlers handleTextCommand should handle !summarise command API error" time="0">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle text command with invalid user ID" name="Command Handlers handleTextCommand should handle text command with invalid user ID" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle text command parsing for summarise" name="Command Handlers handleTextCommand should handle text command parsing for summarise" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should handle text command parsing for summerise (alternative spelling)" name="Command Handlers handleTextCommand should handle text command parsing for summerise (alternative spelling)" time="0">
    </testcase>
    <testcase classname="Command Handlers handleTextCommand should return null for unknown command" name="Command Handlers handleTextCommand should return null for unknown command" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /help command" name="Command Handlers handleSlashCommand should handle /help command" time="0">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /clearhistory command" name="Command Handlers handleSlashCommand should handle /clearhistory command" time="0">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command with history" name="Command Handlers handleSlashCommand should handle /summary command with history" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command API error" name="Command Handlers handleSlashCommand should handle /summary command API error" time="0">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command with only assistant messages in history" name="Command Handlers handleSlashCommand should handle /summary command with only assistant messages in history" time="0.003">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summary command with no history" name="Command Handlers handleSlashCommand should handle /summary command with no history" time="0">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /stats command" name="Command Handlers handleSlashCommand should handle /stats command" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summarise command with text" name="Command Handlers handleSlashCommand should handle /summarise command with text" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summarise command without text" name="Command Handlers handleSlashCommand should handle /summarise command without text" time="0">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summarise command with empty text" name="Command Handlers handleSlashCommand should handle /summarise command with empty text" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summarise command with invalid text" name="Command Handlers handleSlashCommand should handle /summarise command with invalid text" time="0">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle /summarise command API error" name="Command Handlers handleSlashCommand should handle /summarise command API error" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle command execution error when not deferred" name="Command Handlers handleSlashCommand should handle command execution error when not deferred" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle unknown command" name="Command Handlers handleSlashCommand should handle unknown command" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle command execution error" name="Command Handlers handleSlashCommand should handle command execution error" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle slash command with invalid user ID" name="Command Handlers handleSlashCommand should handle slash command with invalid user ID" time="0">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle slash command when already replied" name="Command Handlers handleSlashCommand should handle slash command when already replied" time="0.001">
    </testcase>
    <testcase classname="Command Handlers handleSlashCommand should handle slash command when already deferred and replied" name="Command Handlers handleSlashCommand should handle slash command when already deferred and replied" time="0.001">
    </testcase>
  </testsuite>
  <testsuite name="PerplexitySecure Service" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="3.5" tests="14">
    <testcase classname="PerplexitySecure Service generateChatResponse should handle rate limiting with 429 status code" name="PerplexitySecure Service generateChatResponse should handle rate limiting with 429 status code" time="0.292">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should handle server errors with 500+ status code" name="PerplexitySecure Service generateChatResponse should handle server errors with 500+ status code" time="0.065">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should handle network errors" name="PerplexitySecure Service generateChatResponse should handle network errors" time="0.137">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should handle parsing errors in response" name="PerplexitySecure Service generateChatResponse should handle parsing errors in response" time="0.052">
    </testcase>
    <testcase classname="PerplexitySecure Service generateChatResponse should successfully generate a chat response" name="PerplexitySecure Service generateChatResponse should successfully generate a chat response" time="0.101">
    </testcase>
    <testcase classname="PerplexitySecure Service generateSummary should generate a summary of conversation history" name="PerplexitySecure Service generateSummary should generate a summary of conversation history" time="0.003">
    </testcase>
    <testcase classname="PerplexitySecure Service generateSummary should handle errors in summary generation" name="PerplexitySecure Service generateSummary should handle errors in summary generation" time="0.033">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should return cached response if available" name="PerplexitySecure Service question caching should return cached response if available" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should save response to cache on successful API call" name="PerplexitySecure Service question caching should save response to cache on successful API call" time="0.084">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should handle cache directory creation when it doesnt exist" name="PerplexitySecure Service question caching should handle cache directory creation when it doesnt exist" time="0.032">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should skip caching when disabled" name="PerplexitySecure Service question caching should skip caching when disabled" time="0.001">
    </testcase>
    <testcase classname="PerplexitySecure Service question caching should handle expired cache entries" name="PerplexitySecure Service question caching should handle expired cache entries" time="0.059">
    </testcase>
    <testcase classname="PerplexitySecure Service file permission security should set secure file permissions when writing to cache" name="PerplexitySecure Service file permission security should set secure file permissions when writing to cache" time="0.033">
    </testcase>
    <testcase classname="PerplexitySecure Service retry mechanism should retry API calls on transient errors" name="PerplexitySecure Service retry mechanism should retry API calls on transient errors" time="1.079">
    </testcase>
  </testsuite>
  <testsuite name="Bot integration" errors="0" failures="0" skipped="0" timestamp="2025-09-22T21:20:47" time="5.389" tests="16">
    <testcase classname="Bot integration should have attached the messageCreate handler" name="Bot integration should have attached the messageCreate handler" time="1.33">
    </testcase>
    <testcase classname="Bot integration handles a normal message and replies" name="Bot integration handles a normal message and replies" time="0.249">
    </testcase>
    <testcase classname="Bot integration replies to !help command" name="Bot integration replies to !help command" time="0.216">
    </testcase>
    <testcase classname="Bot integration replies to !clearhistory command" name="Bot integration replies to !clearhistory command" time="0.175">
    </testcase>
    <testcase classname="Bot integration replies to !summary with history" name="Bot integration replies to !summary with history" time="0.159">
    </testcase>
    <testcase classname="Bot integration replies to !summary with no history" name="Bot integration replies to !summary with no history" time="0.152">
    </testcase>
    <testcase classname="Bot integration ignores unknown command" name="Bot integration ignores unknown command" time="0.146">
    </testcase>
    <testcase classname="Bot integration ignores messages from bots" name="Bot integration ignores messages from bots" time="0.142">
    </testcase>
    <testcase classname="Bot integration adds emoji reactions for keywords" name="Bot integration adds emoji reactions for keywords" time="0.148">
    </testcase>
    <testcase classname="Bot integration adds multiple emoji reactions for multiple keywords" name="Bot integration adds multiple emoji reactions for multiple keywords" time="0.146">
    </testcase>
    <testcase classname="Bot integration rate limits user messages" name="Bot integration rate limits user messages" time="0.137">
    </testcase>
    <testcase classname="Bot integration handles API error when replying" name="Bot integration handles API error when replying" time="0.16">
    </testcase>
    <testcase classname="Bot integration handles API error when summarising" name="Bot integration handles API error when summarising" time="0.138">
    </testcase>
    <testcase classname="Bot integration handles empty message gracefully" name="Bot integration handles empty message gracefully" time="0.137">
    </testcase>
    <testcase classname="Bot integration truncates very long conversation history" name="Bot integration truncates very long conversation history" time="0.137">
    </testcase>
    <testcase classname="Bot integration handles missing environment variables gracefully" name="Bot integration handles missing environment variables gracefully" time="0.286">
    </testcase>
  </testsuite>
</testsuites>